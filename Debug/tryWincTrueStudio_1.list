
tryWincTrueStudio_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006320  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08006830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000230  20000074  080068a4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002a4  080068a4  000202a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012c3a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ce2  00000000  00000000  00032cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ee0  00000000  00000000  000359c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e08  00000000  00000000  000368a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000703b  00000000  00000000  000376a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005424  00000000  00000000  0003e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043b07  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000042dc  00000000  00000000  00043b84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080064d8 	.word	0x080064d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080064d8 	.word	0x080064d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b97a 	b.w	80005cc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	468c      	mov	ip, r1
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	9e08      	ldr	r6, [sp, #32]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d151      	bne.n	80003a4 <__udivmoddi4+0xb4>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d96d      	bls.n	80003e2 <__udivmoddi4+0xf2>
 8000306:	fab2 fe82 	clz	lr, r2
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d00b      	beq.n	8000328 <__udivmoddi4+0x38>
 8000310:	f1ce 0c20 	rsb	ip, lr, #32
 8000314:	fa01 f50e 	lsl.w	r5, r1, lr
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000320:	ea4c 0c05 	orr.w	ip, ip, r5
 8000324:	fa00 f40e 	lsl.w	r4, r0, lr
 8000328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	fbbc f8fa 	udiv	r8, ip, sl
 8000332:	fa1f f987 	uxth.w	r9, r7
 8000336:	fb0a cc18 	mls	ip, sl, r8, ip
 800033a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800033e:	fb08 f309 	mul.w	r3, r8, r9
 8000342:	42ab      	cmp	r3, r5
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x6c>
 8000346:	19ed      	adds	r5, r5, r7
 8000348:	f108 32ff 	add.w	r2, r8, #4294967295
 800034c:	f080 8123 	bcs.w	8000596 <__udivmoddi4+0x2a6>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f240 8120 	bls.w	8000596 <__udivmoddi4+0x2a6>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	443d      	add	r5, r7
 800035c:	1aed      	subs	r5, r5, r3
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb5 f0fa 	udiv	r0, r5, sl
 8000364:	fb0a 5510 	mls	r5, sl, r0, r5
 8000368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800036c:	fb00 f909 	mul.w	r9, r0, r9
 8000370:	45a1      	cmp	r9, r4
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x98>
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	f080 810a 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800037e:	45a1      	cmp	r9, r4
 8000380:	f240 8107 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000384:	3802      	subs	r0, #2
 8000386:	443c      	add	r4, r7
 8000388:	eba4 0409 	sub.w	r4, r4, r9
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	2100      	movs	r1, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d061      	beq.n	800045a <__udivmoddi4+0x16a>
 8000396:	fa24 f40e 	lsr.w	r4, r4, lr
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xc8>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d054      	beq.n	8000456 <__udivmoddi4+0x166>
 80003ac:	2100      	movs	r1, #0
 80003ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80003b2:	4608      	mov	r0, r1
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	fab3 f183 	clz	r1, r3
 80003bc:	2900      	cmp	r1, #0
 80003be:	f040 808e 	bne.w	80004de <__udivmoddi4+0x1ee>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xdc>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80fa 	bhi.w	80005c0 <__udivmoddi4+0x2d0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb65 0503 	sbc.w	r5, r5, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	46ac      	mov	ip, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d03f      	beq.n	800045a <__udivmoddi4+0x16a>
 80003da:	e886 1010 	stmia.w	r6, {r4, ip}
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b912      	cbnz	r2, 80003ea <__udivmoddi4+0xfa>
 80003e4:	2701      	movs	r7, #1
 80003e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ea:	fab7 fe87 	clz	lr, r7
 80003ee:	f1be 0f00 	cmp.w	lr, #0
 80003f2:	d134      	bne.n	800045e <__udivmoddi4+0x16e>
 80003f4:	1beb      	subs	r3, r5, r7
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000402:	0c25      	lsrs	r5, r4, #16
 8000404:	fb02 3318 	mls	r3, r2, r8, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb0c f308 	mul.w	r3, ip, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x134>
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	f108 30ff 	add.w	r0, r8, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x132>
 800041c:	42ab      	cmp	r3, r5
 800041e:	f200 80d1 	bhi.w	80005c4 <__udivmoddi4+0x2d4>
 8000422:	4680      	mov	r8, r0
 8000424:	1aed      	subs	r5, r5, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb5 f0f2 	udiv	r0, r5, r2
 800042c:	fb02 5510 	mls	r5, r2, r0, r5
 8000430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000434:	fb0c fc00 	mul.w	ip, ip, r0
 8000438:	45a4      	cmp	ip, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x15c>
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x15a>
 8000444:	45a4      	cmp	ip, r4
 8000446:	f200 80b8 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000454:	e79d      	b.n	8000392 <__udivmoddi4+0xa2>
 8000456:	4631      	mov	r1, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1ce 0420 	rsb	r4, lr, #32
 8000462:	fa05 f30e 	lsl.w	r3, r5, lr
 8000466:	fa07 f70e 	lsl.w	r7, r7, lr
 800046a:	fa20 f804 	lsr.w	r8, r0, r4
 800046e:	0c3a      	lsrs	r2, r7, #16
 8000470:	fa25 f404 	lsr.w	r4, r5, r4
 8000474:	ea48 0803 	orr.w	r8, r8, r3
 8000478:	fbb4 f1f2 	udiv	r1, r4, r2
 800047c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000480:	fb02 4411 	mls	r4, r2, r1, r4
 8000484:	fa1f fc87 	uxth.w	ip, r7
 8000488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800048c:	fb01 f30c 	mul.w	r3, r1, ip
 8000490:	42ab      	cmp	r3, r5
 8000492:	fa00 f40e 	lsl.w	r4, r0, lr
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x1bc>
 8000498:	19ed      	adds	r5, r5, r7
 800049a:	f101 30ff 	add.w	r0, r1, #4294967295
 800049e:	f080 808a 	bcs.w	80005b6 <__udivmoddi4+0x2c6>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f240 8087 	bls.w	80005b6 <__udivmoddi4+0x2c6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	1aeb      	subs	r3, r5, r3
 80004ae:	fa1f f588 	uxth.w	r5, r8
 80004b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004b6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004be:	fb00 f30c 	mul.w	r3, r0, ip
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1e6>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004cc:	d26f      	bcs.n	80005ae <__udivmoddi4+0x2be>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d96d      	bls.n	80005ae <__udivmoddi4+0x2be>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	1aeb      	subs	r3, r5, r3
 80004d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004dc:	e78f      	b.n	80003fe <__udivmoddi4+0x10e>
 80004de:	f1c1 0720 	rsb	r7, r1, #32
 80004e2:	fa22 f807 	lsr.w	r8, r2, r7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ec:	ea48 0303 	orr.w	r3, r8, r3
 80004f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000502:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000506:	fb0c 5519 	mls	r5, ip, r9, r5
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000512:	fb09 f408 	mul.w	r4, r9, r8
 8000516:	42ac      	cmp	r4, r5
 8000518:	fa02 f201 	lsl.w	r2, r2, r1
 800051c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x244>
 8000522:	18ed      	adds	r5, r5, r3
 8000524:	f109 30ff 	add.w	r0, r9, #4294967295
 8000528:	d243      	bcs.n	80005b2 <__udivmoddi4+0x2c2>
 800052a:	42ac      	cmp	r4, r5
 800052c:	d941      	bls.n	80005b2 <__udivmoddi4+0x2c2>
 800052e:	f1a9 0902 	sub.w	r9, r9, #2
 8000532:	441d      	add	r5, r3
 8000534:	1b2d      	subs	r5, r5, r4
 8000536:	fa1f fe8e 	uxth.w	lr, lr
 800053a:	fbb5 f0fc 	udiv	r0, r5, ip
 800053e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000546:	fb00 f808 	mul.w	r8, r0, r8
 800054a:	45a0      	cmp	r8, r4
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x26e>
 800054e:	18e4      	adds	r4, r4, r3
 8000550:	f100 35ff 	add.w	r5, r0, #4294967295
 8000554:	d229      	bcs.n	80005aa <__udivmoddi4+0x2ba>
 8000556:	45a0      	cmp	r8, r4
 8000558:	d927      	bls.n	80005aa <__udivmoddi4+0x2ba>
 800055a:	3802      	subs	r0, #2
 800055c:	441c      	add	r4, r3
 800055e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000562:	eba4 0408 	sub.w	r4, r4, r8
 8000566:	fba0 8902 	umull	r8, r9, r0, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	46c6      	mov	lr, r8
 800056e:	464d      	mov	r5, r9
 8000570:	d315      	bcc.n	800059e <__udivmoddi4+0x2ae>
 8000572:	d012      	beq.n	800059a <__udivmoddi4+0x2aa>
 8000574:	b156      	cbz	r6, 800058c <__udivmoddi4+0x29c>
 8000576:	ebba 030e 	subs.w	r3, sl, lr
 800057a:	eb64 0405 	sbc.w	r4, r4, r5
 800057e:	fa04 f707 	lsl.w	r7, r4, r7
 8000582:	40cb      	lsrs	r3, r1
 8000584:	431f      	orrs	r7, r3
 8000586:	40cc      	lsrs	r4, r1
 8000588:	6037      	str	r7, [r6, #0]
 800058a:	6074      	str	r4, [r6, #4]
 800058c:	2100      	movs	r1, #0
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	4618      	mov	r0, r3
 8000594:	e6f8      	b.n	8000388 <__udivmoddi4+0x98>
 8000596:	4690      	mov	r8, r2
 8000598:	e6e0      	b.n	800035c <__udivmoddi4+0x6c>
 800059a:	45c2      	cmp	sl, r8
 800059c:	d2ea      	bcs.n	8000574 <__udivmoddi4+0x284>
 800059e:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a2:	eb69 0503 	sbc.w	r5, r9, r3
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7e4      	b.n	8000574 <__udivmoddi4+0x284>
 80005aa:	4628      	mov	r0, r5
 80005ac:	e7d7      	b.n	800055e <__udivmoddi4+0x26e>
 80005ae:	4640      	mov	r0, r8
 80005b0:	e791      	b.n	80004d6 <__udivmoddi4+0x1e6>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e7be      	b.n	8000534 <__udivmoddi4+0x244>
 80005b6:	4601      	mov	r1, r0
 80005b8:	e778      	b.n	80004ac <__udivmoddi4+0x1bc>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e745      	b.n	800044c <__udivmoddi4+0x15c>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e708      	b.n	80003d6 <__udivmoddi4+0xe6>
 80005c4:	f1a8 0802 	sub.w	r8, r8, #2
 80005c8:	443d      	add	r5, r7
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x134>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <EXTI15_10_IRQHandler>:
 *
 * \param[in] None.
 * \retval    None.
 */
void EXTI15_10_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
    uint16_t GPIO_Pin;

    /* Get GPIO_Pin */
    if (__HAL_GPIO_EXTI_GET_IT(CONF_WINC_SPI_INT_PIN))
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <EXTI15_10_IRQHandler+0x28>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <EXTI15_10_IRQHandler+0x18>
    {
        GPIO_Pin = CONF_WINC_SPI_INT_PIN;
 80005e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005e6:	80fb      	strh	r3, [r7, #6]
    }

    HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fecc 	bl	8001388 <HAL_GPIO_EXTI_IRQHandler>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40013c00 	.word	0x40013c00

080005fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CONF_WINC_SPI_INT_PIN)
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800060c:	d101      	bne.n	8000612 <HAL_GPIO_EXTI_Callback+0x16>
    {
        isr();
 800060e:	f002 fcdb 	bl	8002fc8 <isr>
    }
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062a:	2201      	movs	r2, #1
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <__io_putchar+0x20>)
 800062e:	f001 fdf4 	bl	800221a <HAL_UART_Transmit>

  return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200001dc 	.word	0x200001dc

08000640 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af02      	add	r7, sp, #8
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
	switch (u8MsgType) {
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	3b11      	subs	r3, #17
 8000650:	2b21      	cmp	r3, #33	; 0x21
 8000652:	f200 80df 	bhi.w	8000814 <wifi_cb+0x1d4>
 8000656:	a201      	add	r2, pc, #4	; (adr r2, 800065c <wifi_cb+0x1c>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	080006e5 	.word	0x080006e5
 8000660:	08000815 	.word	0x08000815
 8000664:	08000717 	.word	0x08000717
 8000668:	08000815 	.word	0x08000815
 800066c:	08000815 	.word	0x08000815
 8000670:	08000815 	.word	0x08000815
 8000674:	08000815 	.word	0x08000815
 8000678:	08000815 	.word	0x08000815
 800067c:	08000815 	.word	0x08000815
 8000680:	08000815 	.word	0x08000815
 8000684:	08000815 	.word	0x08000815
 8000688:	08000815 	.word	0x08000815
 800068c:	08000815 	.word	0x08000815
 8000690:	08000815 	.word	0x08000815
 8000694:	08000815 	.word	0x08000815
 8000698:	08000815 	.word	0x08000815
 800069c:	08000815 	.word	0x08000815
 80006a0:	08000815 	.word	0x08000815
 80006a4:	08000815 	.word	0x08000815
 80006a8:	08000815 	.word	0x08000815
 80006ac:	08000815 	.word	0x08000815
 80006b0:	08000815 	.word	0x08000815
 80006b4:	08000815 	.word	0x08000815
 80006b8:	08000815 	.word	0x08000815
 80006bc:	08000815 	.word	0x08000815
 80006c0:	08000815 	.word	0x08000815
 80006c4:	08000815 	.word	0x08000815
 80006c8:	080007bb 	.word	0x080007bb
 80006cc:	08000815 	.word	0x08000815
 80006d0:	08000815 	.word	0x08000815
 80006d4:	08000815 	.word	0x08000815
 80006d8:	08000815 	.word	0x08000815
 80006dc:	08000815 	.word	0x08000815
 80006e0:	080007e3 	.word	0x080007e3
	case M2M_WIFI_RESP_SCAN_DONE:
	{
		tstrM2mScanDone *pstrInfo = (tstrM2mScanDone *)pvMsg;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	61fb      	str	r3, [r7, #28]
		scan_request_index = 0;
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <wifi_cb+0x1e4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
		if (pstrInfo->u8NumofCh >= 1) {
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d00b      	beq.n	800070e <wifi_cb+0xce>
			m2m_wifi_req_scan_result(scan_request_index);
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <wifi_cb+0x1e4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fbe2 	bl	8003ec4 <m2m_wifi_req_scan_result>
			scan_request_index++;
 8000700:	4b48      	ldr	r3, [pc, #288]	; (8000824 <wifi_cb+0x1e4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b46      	ldr	r3, [pc, #280]	; (8000824 <wifi_cb+0x1e4>)
 800070a:	701a      	strb	r2, [r3, #0]
		} else {
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
		}

		break;
 800070c:	e085      	b.n	800081a <wifi_cb+0x1da>
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 800070e:	20ff      	movs	r0, #255	; 0xff
 8000710:	f003 fb9a 	bl	8003e48 <m2m_wifi_request_scan>
		break;
 8000714:	e081      	b.n	800081a <wifi_cb+0x1da>
	}

	case M2M_WIFI_RESP_SCAN_RESULT:
	{
		tstrM2mWifiscanResult *pstrScanResult = (tstrM2mWifiscanResult *)pvMsg;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	61bb      	str	r3, [r7, #24]
		uint16_t demo_ssid_len;
		uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	330a      	adds	r3, #10
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd76 	bl	8000210 <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	82fb      	strh	r3, [r7, #22]

		/* display founded AP. */
		printf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);
 8000728:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <wifi_cb+0x1e4>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	330a      	adds	r3, #10
 8000732:	461a      	mov	r2, r3
 8000734:	483c      	ldr	r0, [pc, #240]	; (8000828 <wifi_cb+0x1e8>)
 8000736:	f004 ff73 	bl	8005620 <iprintf>

		num_founded_ap = m2m_wifi_get_num_ap_found();
 800073a:	f003 fbe1 	bl	8003f00 <m2m_wifi_get_num_ap_found>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	4b3a      	ldr	r3, [pc, #232]	; (800082c <wifi_cb+0x1ec>)
 8000744:	701a      	strb	r2, [r3, #0]
		if (scan_ssid_len) {
 8000746:	8afb      	ldrh	r3, [r7, #22]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d01c      	beq.n	8000786 <wifi_cb+0x146>
			/* check same SSID. */
			demo_ssid_len = strlen((const char *)MAIN_WLAN_SSID);
 800074c:	2304      	movs	r3, #4
 800074e:	82bb      	strh	r3, [r7, #20]
			if
			(
 8000750:	8aba      	ldrh	r2, [r7, #20]
 8000752:	8afb      	ldrh	r3, [r7, #22]
 8000754:	429a      	cmp	r2, r3
 8000756:	d116      	bne.n	8000786 <wifi_cb+0x146>
				(demo_ssid_len == scan_ssid_len) &&
				(!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	330a      	adds	r3, #10
 800075c:	8aba      	ldrh	r2, [r7, #20]
 800075e:	4934      	ldr	r1, [pc, #208]	; (8000830 <wifi_cb+0x1f0>)
 8000760:	4618      	mov	r0, r3
 8000762:	f004 ff45 	bl	80055f0 <memcmp>
 8000766:	4603      	mov	r3, r0
				(demo_ssid_len == scan_ssid_len) &&
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10c      	bne.n	8000786 <wifi_cb+0x146>
			) {
				/* A scan result matches an entry in the preferred AP List.
				 * Initiate a connection request.
				 */
				printf("Found %s \r\n", MAIN_WLAN_SSID);
 800076c:	4930      	ldr	r1, [pc, #192]	; (8000830 <wifi_cb+0x1f0>)
 800076e:	4831      	ldr	r0, [pc, #196]	; (8000834 <wifi_cb+0x1f4>)
 8000770:	f004 ff56 	bl	8005620 <iprintf>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID,
 8000774:	23ff      	movs	r3, #255	; 0xff
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <wifi_cb+0x1f8>)
 800077a:	2202      	movs	r2, #2
 800077c:	2105      	movs	r1, #5
 800077e:	482c      	ldr	r0, [pc, #176]	; (8000830 <wifi_cb+0x1f0>)
 8000780:	f003 fa11 	bl	8003ba6 <m2m_wifi_connect>
						sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH,
						(void *)MAIN_WLAN_PSK,
						M2M_WIFI_CH_ALL);
				break;
 8000784:	e049      	b.n	800081a <wifi_cb+0x1da>
			}
		}

		if (scan_request_index < num_founded_ap) {
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <wifi_cb+0x1e4>)
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <wifi_cb+0x1ec>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d20b      	bcs.n	80007aa <wifi_cb+0x16a>
			m2m_wifi_req_scan_result(scan_request_index);
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <wifi_cb+0x1e4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fb94 	bl	8003ec4 <m2m_wifi_req_scan_result>
			scan_request_index++;
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <wifi_cb+0x1e4>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <wifi_cb+0x1e4>)
 80007a6:	701a      	strb	r2, [r3, #0]
		} else {
			printf("can not find AP %s\r\n", MAIN_WLAN_SSID);
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
		}

		break;
 80007a8:	e037      	b.n	800081a <wifi_cb+0x1da>
			printf("can not find AP %s\r\n", MAIN_WLAN_SSID);
 80007aa:	4921      	ldr	r1, [pc, #132]	; (8000830 <wifi_cb+0x1f0>)
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <wifi_cb+0x1fc>)
 80007ae:	f004 ff37 	bl	8005620 <iprintf>
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 80007b2:	20ff      	movs	r0, #255	; 0xff
 80007b4:	f003 fb48 	bl	8003e48 <m2m_wifi_request_scan>
		break;
 80007b8:	e02f      	b.n	800081a <wifi_cb+0x1da>
	}

	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	613b      	str	r3, [r7, #16]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d102      	bne.n	80007cc <wifi_cb+0x18c>
			m2m_wifi_request_dhcp_client();
 80007c6:	f003 fb36 	bl	8003e36 <m2m_wifi_request_dhcp_client>

			/* Request scan. */
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
		}

		break;
 80007ca:	e025      	b.n	8000818 <wifi_cb+0x1d8>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d121      	bne.n	8000818 <wifi_cb+0x1d8>
			printf("Wi-Fi disconnected\r\n");
 80007d4:	481a      	ldr	r0, [pc, #104]	; (8000840 <wifi_cb+0x200>)
 80007d6:	f004 ff97 	bl	8005708 <puts>
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 80007da:	20ff      	movs	r0, #255	; 0xff
 80007dc:	f003 fb34 	bl	8003e48 <m2m_wifi_request_scan>
		break;
 80007e0:	e01a      	b.n	8000818 <wifi_cb+0x1d8>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
		printf("Wi-Fi connected\r\n");
 80007e6:	4817      	ldr	r0, [pc, #92]	; (8000844 <wifi_cb+0x204>)
 80007e8:	f004 ff8e 	bl	8005708 <puts>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 80007f0:	4619      	mov	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 80007f8:	461a      	mov	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3302      	adds	r3, #2
 80007fe:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 8000800:	4618      	mov	r0, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3303      	adds	r3, #3
 8000806:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	4603      	mov	r3, r0
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <wifi_cb+0x208>)
 800080e:	f004 ff07 	bl	8005620 <iprintf>
		break;
 8000812:	e002      	b.n	800081a <wifi_cb+0x1da>
	}

	default:
	{
		break;
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <wifi_cb+0x1da>
		break;
 8000818:	bf00      	nop
	}
	}
}
 800081a:	bf00      	nop
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000090 	.word	0x20000090
 8000828:	080064f0 	.word	0x080064f0
 800082c:	20000091 	.word	0x20000091
 8000830:	08006500 	.word	0x08006500
 8000834:	08006508 	.word	0x08006508
 8000838:	08006514 	.word	0x08006514
 800083c:	08006520 	.word	0x08006520
 8000840:	08006538 	.word	0x08006538
 8000844:	0800654c 	.word	0x0800654c
 8000848:	08006560 	.word	0x08006560

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000852:	f000 fa39 	bl	8000cc8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000856:	f000 f839 	bl	80008cc <SystemClock_Config>

	/* Initialize all configured peripherals */
	HAL_GPIO_WritePin(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000860:	4816      	ldr	r0, [pc, #88]	; (80008bc <main+0x70>)
 8000862:	f000 fd77 	bl	8001354 <HAL_GPIO_WritePin>
	MX_USART2_UART_Init();
 8000866:	f000 f89d 	bl	80009a4 <MX_USART2_UART_Init>

	tstrWifiInitParam param;
	int8_t ret;
	printf("Bismillah\n");
 800086a:	4815      	ldr	r0, [pc, #84]	; (80008c0 <main+0x74>)
 800086c:	f004 ff4c 	bl	8005708 <puts>

	/* Initialize the BSP. */
	nm_bsp_init();
 8000870:	f002 f9a2 	bl	8002bb8 <nm_bsp_init>

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2218      	movs	r2, #24
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f004 fec7 	bl	800560e <memset>

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <main+0x78>)
 8000882:	607b      	str	r3, [r7, #4]
	ret = m2m_wifi_init(&param);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4618      	mov	r0, r3
 8000888:	f003 f8fe 	bl	8003a88 <m2m_wifi_init>
 800088c:	4603      	mov	r3, r0
 800088e:	77fb      	strb	r3, [r7, #31]
	if (M2M_SUCCESS != ret) {
 8000890:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <main+0x5a>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 8000898:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800089c:	4619      	mov	r1, r3
 800089e:	480a      	ldr	r0, [pc, #40]	; (80008c8 <main+0x7c>)
 80008a0:	f004 febe 	bl	8005620 <iprintf>
		while (1) {
 80008a4:	e7fe      	b.n	80008a4 <main+0x58>
		}
	}

	/* Request scan. */
	m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 80008a6:	20ff      	movs	r0, #255	; 0xff
 80008a8:	f003 face 	bl	8003e48 <m2m_wifi_request_scan>

	/* Infinite loop */
	while (1)
	{
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS) {
 80008ac:	bf00      	nop
 80008ae:	2000      	movs	r0, #0
 80008b0:	f003 f96e 	bl	8003b90 <m2m_wifi_handle_events>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f9      	bne.n	80008ae <main+0x62>
 80008ba:	e7f7      	b.n	80008ac <main+0x60>
 80008bc:	40020400 	.word	0x40020400
 80008c0:	0800657c 	.word	0x0800657c
 80008c4:	08000641 	.word	0x08000641
 80008c8:	08006588 	.word	0x08006588

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2234      	movs	r2, #52	; 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 fe97 	bl	800560e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4a29      	ldr	r2, [pc, #164]	; (800099c <SystemClock_Config+0xd0>)
 80008f6:	4b29      	ldr	r3, [pc, #164]	; (800099c <SystemClock_Config+0xd0>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <SystemClock_Config+0xd0>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <SystemClock_Config+0xd4>)
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <SystemClock_Config+0xd4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <SystemClock_Config+0xd4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2310      	movs	r3, #16
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000938:	2300      	movs	r3, #0
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800093c:	2310      	movs	r3, #16
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000940:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000944:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000946:	2304      	movs	r3, #4
 8000948:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800094a:	2304      	movs	r3, #4
 800094c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4618      	mov	r0, r3
 8000958:	f000 ff20 	bl	800179c <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000962:	f000 f849 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2302      	movs	r3, #2
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2102      	movs	r1, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fd18 	bl	80013b8 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800098e:	f000 f833 	bl	80009f8 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3750      	adds	r7, #80	; 0x50
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_USART2_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009dc:	f001 fbd0 	bl	8002180 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f000 f807 	bl	80009f8 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001dc 	.word	0x200001dc
 80009f4:	40004400 	.word	0x40004400

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a46:	2007      	movs	r0, #7
 8000a48:	f000 fac2 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI_WIFI)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_SPI_MspInit+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d102      	bne.n	8000a70 <HAL_SPI_MspInit+0x18>
  {
	  nm_bus_wifi_spi_init(hspi);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f002 f97a 	bl	8002d64 <nm_bus_wifi_spi_init>
  }
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40003800 	.word	0x40003800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f000 fabd 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f904 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e00a      	b.n	8000b90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b7a:	68bc      	ldr	r4, [r7, #8]
 8000b7c:	1c63      	adds	r3, r4, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	f3af 8000 	nop.w
 8000b84:	4603      	mov	r3, r0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf0      	blt.n	8000b7a <_read+0x12>
	}

return len;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	371c      	adds	r7, #28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}

08000ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	e009      	b.n	8000bc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	60ba      	str	r2, [r7, #8]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fd2d 	bl	800061c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf1      	blt.n	8000bb4 <_write+0x12>
	}
	return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x50>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x16>
		heap_end = &end;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <_sbrk+0x50>)
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <_sbrk+0x54>)
 8000bf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <_sbrk+0x50>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <_sbrk+0x50>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	466a      	mov	r2, sp
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d907      	bls.n	8000c16 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c06:	f004 fcc9 	bl	800559c <__errno>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	e006      	b.n	8000c24 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <_sbrk+0x50>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <_sbrk+0x50>)
 8000c20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000094 	.word	0x20000094
 8000c30:	200002a4 	.word	0x200002a4

08000c34 <_close>:

int _close(int file)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	return -1;
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5c:	605a      	str	r2, [r3, #4]
	return 0;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_isatty>:

int _isatty(int file)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	return 1;
 8000c74:	2301      	movs	r3, #1
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b085      	sub	sp, #20
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
	return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <SystemInit+0x28>)
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <SystemInit+0x28>)
 8000ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SystemInit+0x28>)
 8000cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_Init+0x40>)
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_Init+0x40>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_Init+0x40>)
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_Init+0x40>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_Init+0x40>)
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_Init+0x40>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f96d 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe84 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f993 	bl	8001056 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f94d 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	2000021c 	.word	0x2000021c

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	2000021c 	.word	0x2000021c

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_Delay+0x40>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad2      	subs	r2, r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d3f7      	bcc.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	4909      	ldr	r1, [pc, #36]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	79fa      	ldrb	r2, [r7, #7]
 8000e70:	f002 021f 	and.w	r2, r2, #31
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db10      	blt.n	8000ec4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	490b      	ldr	r1, [pc, #44]	; (8000ed0 <__NVIC_DisableIRQ+0x40>)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	095b      	lsrs	r3, r3, #5
 8000eaa:	79fa      	ldrb	r2, [r7, #7]
 8000eac:	f002 021f 	and.w	r2, r2, #31
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	3320      	adds	r3, #32
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ec0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	490d      	ldr	r1, [pc, #52]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	4909      	ldr	r1, [pc, #36]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	401a      	ands	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6e:	2101      	movs	r1, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	1e59      	subs	r1, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff90 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff09 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff1e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff90 	bl	8000f28 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5f 	bl	8000ed4 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff11 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff21 	bl	8000e90 <__NVIC_DisableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff94 	bl	8000f8c <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e14d      	b.n	8001328 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 813c 	bne.w	8001322 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d00b      	beq.n	80010ca <HAL_GPIO_Init+0x5a>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010be:	2b11      	cmp	r3, #17
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b12      	cmp	r3, #18
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0xfc>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b12      	cmp	r3, #18
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	69b9      	ldr	r1, [r7, #24]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8096 	beq.w	8001322 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4a50      	ldr	r2, [pc, #320]	; (800133c <HAL_GPIO_Init+0x2cc>)
 80011fc:	4b4f      	ldr	r3, [pc, #316]	; (800133c <HAL_GPIO_Init+0x2cc>)
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_GPIO_Init+0x2cc>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001212:	4a4b      	ldr	r2, [pc, #300]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a42      	ldr	r2, [pc, #264]	; (8001344 <HAL_GPIO_Init+0x2d4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x1ea>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a41      	ldr	r2, [pc, #260]	; (8001348 <HAL_GPIO_Init+0x2d8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x1e6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a40      	ldr	r2, [pc, #256]	; (800134c <HAL_GPIO_Init+0x2dc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x1e2>
 800124e:	2302      	movs	r3, #2
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1ec>
 8001252:	2307      	movs	r3, #7
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1ec>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1ec>
 800125a:	2300      	movs	r3, #0
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	4934      	ldr	r1, [pc, #208]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129e:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c8:	4a21      	ldr	r2, [pc, #132]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	f67f aeae 	bls.w	800108c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001330:	bf00      	nop
 8001332:	3724      	adds	r7, #36	; 0x24
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40013c00 	.word	0x40013c00

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f928 	bl	80005fc <HAL_GPIO_EXTI_Callback>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0cc      	b.n	8001566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013cc:	4b68      	ldr	r3, [pc, #416]	; (8001570 <HAL_RCC_ClockConfig+0x1b8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 020f 	and.w	r2, r3, #15
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d20c      	bcs.n	80013f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	4b65      	ldr	r3, [pc, #404]	; (8001570 <HAL_RCC_ClockConfig+0x1b8>)
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e2:	4b63      	ldr	r3, [pc, #396]	; (8001570 <HAL_RCC_ClockConfig+0x1b8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 020f 	and.w	r2, r3, #15
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0b8      	b.n	8001566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800140c:	4a59      	ldr	r2, [pc, #356]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001424:	4a53      	ldr	r2, [pc, #332]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	4b53      	ldr	r3, [pc, #332]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800142e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001430:	4950      	ldr	r1, [pc, #320]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	4b50      	ldr	r3, [pc, #320]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	4313      	orrs	r3, r2
 8001440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d044      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d119      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e07f      	b.n	8001566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d003      	beq.n	8001476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001472:	2b03      	cmp	r3, #3
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e06f      	b.n	8001566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e067      	b.n	8001566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001496:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 0203 	bic.w	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a8:	f7ff fc74 	bl	8000d94 <HAL_GetTick>
 80014ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b0:	f7ff fc70 	bl	8000d94 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e04f      	b.n	8001566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 020c 	and.w	r2, r3, #12
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1eb      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_RCC_ClockConfig+0x1b8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 020f 	and.w	r2, r3, #15
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d90c      	bls.n	8001500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_RCC_ClockConfig+0x1b8>)
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_RCC_ClockConfig+0x1b8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 020f 	and.w	r2, r3, #15
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e032      	b.n	8001566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150c:	4919      	ldr	r1, [pc, #100]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800152a:	4912      	ldr	r1, [pc, #72]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800153e:	f000 f821 	bl	8001584 <HAL_RCC_GetSysClockFreq>
 8001542:	4601      	mov	r1, r0
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	fa21 f303 	lsr.w	r3, r1, r3
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_ClockConfig+0x1c8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fbd4 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00
 8001574:	40023800 	.word	0x40023800
 8001578:	08006670 	.word	0x08006670
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001588:	b08f      	sub	sp, #60	; 0x3c
 800158a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800159c:	4b62      	ldr	r3, [pc, #392]	; (8001728 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d007      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x34>
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d008      	beq.n	80015be <HAL_RCC_GetSysClockFreq+0x3a>
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 80b2 	bne.w	8001716 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b2:	4b5e      	ldr	r3, [pc, #376]	; (800172c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80015b6:	e0b1      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b8:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015bc:	e0ae      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015be:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c8:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d04e      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d4:	4b54      	ldr	r3, [pc, #336]	; (8001728 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	f04f 0400 	mov.w	r4, #0
 80015de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	ea01 0103 	and.w	r1, r1, r3
 80015ea:	ea02 0204 	and.w	r2, r2, r4
 80015ee:	460b      	mov	r3, r1
 80015f0:	4614      	mov	r4, r2
 80015f2:	0160      	lsls	r0, r4, #5
 80015f4:	6278      	str	r0, [r7, #36]	; 0x24
 80015f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015f8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80015fc:	6278      	str	r0, [r7, #36]	; 0x24
 80015fe:	015b      	lsls	r3, r3, #5
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001606:	1a5b      	subs	r3, r3, r1
 8001608:	eb64 0402 	sbc.w	r4, r4, r2
 800160c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001610:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001614:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001618:	ebb8 0803 	subs.w	r8, r8, r3
 800161c:	eb69 0904 	sbc.w	r9, r9, r4
 8001620:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001638:	eb18 0801 	adds.w	r8, r8, r1
 800163c:	eb49 0902 	adc.w	r9, r9, r2
 8001640:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001658:	4640      	mov	r0, r8
 800165a:	4649      	mov	r1, r9
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	f04f 0400 	mov.w	r4, #0
 8001662:	461a      	mov	r2, r3
 8001664:	4623      	mov	r3, r4
 8001666:	f7fe fe2b 	bl	80002c0 <__aeabi_uldivmod>
 800166a:	4603      	mov	r3, r0
 800166c:	460c      	mov	r4, r1
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
 8001670:	e043      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	f04f 0400 	mov.w	r4, #0
 800167c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	ea01 0103 	and.w	r1, r1, r3
 8001688:	ea02 0204 	and.w	r2, r2, r4
 800168c:	460b      	mov	r3, r1
 800168e:	4614      	mov	r4, r2
 8001690:	0160      	lsls	r0, r4, #5
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	015b      	lsls	r3, r3, #5
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016a4:	1a5b      	subs	r3, r3, r1
 80016a6:	eb64 0402 	sbc.w	r4, r4, r2
 80016aa:	01a6      	lsls	r6, r4, #6
 80016ac:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80016b0:	019d      	lsls	r5, r3, #6
 80016b2:	1aed      	subs	r5, r5, r3
 80016b4:	eb66 0604 	sbc.w	r6, r6, r4
 80016b8:	00f3      	lsls	r3, r6, #3
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	00eb      	lsls	r3, r5, #3
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	e897 0060 	ldmia.w	r7, {r5, r6}
 80016cc:	186d      	adds	r5, r5, r1
 80016ce:	eb46 0602 	adc.w	r6, r6, r2
 80016d2:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80016d6:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80016da:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80016de:	4655      	mov	r5, sl
 80016e0:	465e      	mov	r6, fp
 80016e2:	4628      	mov	r0, r5
 80016e4:	4631      	mov	r1, r6
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	f04f 0400 	mov.w	r4, #0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4623      	mov	r3, r4
 80016f0:	f7fe fde6 	bl	80002c0 <__aeabi_uldivmod>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	3301      	adds	r3, #1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800170a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001714:	e002      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800171a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800171e:	4618      	mov	r0, r3
 8001720:	373c      	adds	r7, #60	; 0x3c
 8001722:	46bd      	mov	sp, r7
 8001724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	00f42400 	.word	0x00f42400
 8001730:	007a1200 	.word	0x007a1200

08001734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_RCC_GetHCLKFreq+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000000 	.word	0x20000000

0800174c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001750:	f7ff fff0 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 8001754:	4601      	mov	r1, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0a9b      	lsrs	r3, r3, #10
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	08006680 	.word	0x08006680

08001774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001778:	f7ff ffdc 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 800177c:	4601      	mov	r1, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0b5b      	lsrs	r3, r3, #13
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	08006680 	.word	0x08006680

0800179c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d075      	beq.n	80018a0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017b4:	4ba2      	ldr	r3, [pc, #648]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d00c      	beq.n	80017da <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c0:	4b9f      	ldr	r3, [pc, #636]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d112      	bne.n	80017f2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017cc:	4b9c      	ldr	r3, [pc, #624]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d8:	d10b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	4b99      	ldr	r3, [pc, #612]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d05b      	beq.n	800189e <HAL_RCC_OscConfig+0x102>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d157      	bne.n	800189e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e20b      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x6e>
 80017fc:	4a90      	ldr	r2, [pc, #576]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80017fe:	4b90      	ldr	r3, [pc, #576]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e01d      	b.n	8001846 <HAL_RCC_OscConfig+0xaa>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x92>
 8001814:	4a8a      	ldr	r2, [pc, #552]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001816:	4b8a      	ldr	r3, [pc, #552]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4a87      	ldr	r2, [pc, #540]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001822:	4b87      	ldr	r3, [pc, #540]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0xaa>
 800182e:	4a84      	ldr	r2, [pc, #528]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001830:	4b83      	ldr	r3, [pc, #524]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4a81      	ldr	r2, [pc, #516]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 800183c:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d013      	beq.n	8001876 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff faa1 	bl	8000d94 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001856:	f7ff fa9d 	bl	8000d94 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	; 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1d0      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001868:	4b75      	ldr	r3, [pc, #468]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0xba>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fa8d 	bl	8000d94 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187e:	f7ff fa89 	bl	8000d94 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	; 0x64
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1bc      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001890:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0xe2>
 800189c:	e000      	b.n	80018a0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d063      	beq.n	8001974 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018ac:	4b64      	ldr	r3, [pc, #400]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00b      	beq.n	80018d0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b8:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d11c      	bne.n	80018fe <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c4:	4b5e      	ldr	r3, [pc, #376]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d0:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_OscConfig+0x14c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e190      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4955      	ldr	r1, [pc, #340]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80018ea:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fc:	e03a      	b.n	8001974 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d020      	beq.n	8001948 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001906:	4b4f      	ldr	r3, [pc, #316]	; (8001a44 <HAL_RCC_OscConfig+0x2a8>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fa42 	bl	8000d94 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fa3e 	bl	8000d94 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e171      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4943      	ldr	r1, [pc, #268]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
 8001946:	e015      	b.n	8001974 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_RCC_OscConfig+0x2a8>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fa21 	bl	8000d94 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff fa1d 	bl	8000d94 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e150      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001968:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d030      	beq.n	80019e2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d016      	beq.n	80019b6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff fa01 	bl	8000d94 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff f9fd 	bl	8000d94 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e130      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80019aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x1fa>
 80019b4:	e015      	b.n	80019e2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff f9ea 	bl	8000d94 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff f9e6 	bl	8000d94 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e119      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 809f 	beq.w	8001b2e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10f      	bne.n	8001a20 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x2a4>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_RCC_OscConfig+0x2b0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d120      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_RCC_OscConfig+0x2b0>)
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_RCC_OscConfig+0x2b0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a38:	f7ff f9ac 	bl	8000d94 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	e010      	b.n	8001a62 <HAL_RCC_OscConfig+0x2c6>
 8001a40:	40023800 	.word	0x40023800
 8001a44:	42470000 	.word	0x42470000
 8001a48:	42470e80 	.word	0x42470e80
 8001a4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a50:	f7ff f9a0 	bl	8000d94 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0d3      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a62:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_RCC_OscConfig+0x478>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2e8>
 8001a76:	4a68      	ldr	r2, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001a78:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6713      	str	r3, [r2, #112]	; 0x70
 8001a82:	e01c      	b.n	8001abe <HAL_RCC_OscConfig+0x322>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x30a>
 8001a8c:	4a62      	ldr	r2, [pc, #392]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001a8e:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6713      	str	r3, [r2, #112]	; 0x70
 8001a98:	4a5f      	ldr	r2, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x322>
 8001aa6:	4a5c      	ldr	r2, [pc, #368]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	4a59      	ldr	r2, [pc, #356]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001ab4:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d015      	beq.n	8001af2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f965 	bl	8000d94 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff f961 	bl	8000d94 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e092      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ee      	beq.n	8001ace <HAL_RCC_OscConfig+0x332>
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7ff f94f 	bl	8000d94 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7ff f94b 	bl	8000d94 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e07c      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ee      	bne.n	8001afa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b22:	4a3d      	ldr	r2, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001b24:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d068      	beq.n	8001c08 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d060      	beq.n	8001c04 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d145      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <HAL_RCC_OscConfig+0x480>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f920 	bl	8000d94 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f91c 	bl	8000d94 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e04f      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b76:	4928      	ldr	r1, [pc, #160]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	019b      	lsls	r3, r3, #6
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	3b01      	subs	r3, #1
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	071b      	lsls	r3, r3, #28
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_RCC_OscConfig+0x480>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f8f1 	bl	8000d94 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff f8ed 	bl	8000d94 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e020      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x41a>
 8001bd4:	e018      	b.n	8001c08 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_RCC_OscConfig+0x480>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f8da 	bl	8000d94 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f8d6 	bl	8000d94 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_RCC_OscConfig+0x47c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x448>
 8001c02:	e001      	b.n	8001c08 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40007000 	.word	0x40007000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	42470060 	.word	0x42470060

08001c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e055      	b.n	8001cde <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d106      	bne.n	8001c52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7fe ff03 	bl	8000a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2202      	movs	r2, #2
 8001c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6851      	ldr	r1, [r2, #4]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6892      	ldr	r2, [r2, #8]
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68d2      	ldr	r2, [r2, #12]
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6912      	ldr	r2, [r2, #16]
 8001c82:	4311      	orrs	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6952      	ldr	r2, [r2, #20]
 8001c88:	4311      	orrs	r1, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6992      	ldr	r2, [r2, #24]
 8001c8e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001c92:	4311      	orrs	r1, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	69d2      	ldr	r2, [r2, #28]
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6a12      	ldr	r2, [r2, #32]
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6992      	ldr	r2, [r2, #24]
 8001cb0:	0c12      	lsrs	r2, r2, #16
 8001cb2:	f002 0104 	and.w	r1, r2, #4
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	69d2      	ldr	r2, [r2, #28]
 8001cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b08c      	sub	sp, #48	; 0x30
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_SPI_TransmitReceive+0x26>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e188      	b.n	800201e <HAL_SPI_TransmitReceive+0x338>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d14:	f7ff f83e 	bl	8000d94 <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d00f      	beq.n	8001d56 <HAL_SPI_TransmitReceive+0x70>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d3c:	d107      	bne.n	8001d4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <HAL_SPI_TransmitReceive+0x68>
 8001d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d003      	beq.n	8001d56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d54:	e159      	b.n	800200a <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_SPI_TransmitReceive+0x82>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_SPI_TransmitReceive+0x82>
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d6e:	e14c      	b.n	800200a <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d003      	beq.n	8001d84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2205      	movs	r2, #5
 8001d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d007      	beq.n	8001dd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001de0:	d178      	bne.n	8001ed4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_SPI_TransmitReceive+0x10a>
 8001dea:	8b7b      	ldrh	r3, [r7, #26]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d166      	bne.n	8001ebe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df8:	8812      	ldrh	r2, [r2, #0]
 8001dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	1c9a      	adds	r2, r3, #2
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e14:	e053      	b.n	8001ebe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d11b      	bne.n	8001e5c <HAL_SPI_TransmitReceive+0x176>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <HAL_SPI_TransmitReceive+0x176>
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d113      	bne.n	8001e5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e3c:	8812      	ldrh	r2, [r2, #0]
 8001e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	1c9a      	adds	r2, r3, #2
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d119      	bne.n	8001e9e <HAL_SPI_TransmitReceive+0x1b8>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d014      	beq.n	8001e9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	68d2      	ldr	r2, [r2, #12]
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	1c9a      	adds	r2, r3, #2
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e9e:	f7fe ff79 	bl	8000d94 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	1ad2      	subs	r2, r2, r3
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d307      	bcc.n	8001ebe <HAL_SPI_TransmitReceive+0x1d8>
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d003      	beq.n	8001ebe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ebc:	e0a5      	b.n	800200a <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1a6      	bne.n	8001e16 <HAL_SPI_TransmitReceive+0x130>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1a1      	bne.n	8001e16 <HAL_SPI_TransmitReceive+0x130>
 8001ed2:	e07c      	b.n	8001fce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_SPI_TransmitReceive+0x1fc>
 8001edc:	8b7b      	ldrh	r3, [r7, #26]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d16b      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f08:	e057      	b.n	8001fba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d11c      	bne.n	8001f52 <HAL_SPI_TransmitReceive+0x26c>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d017      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x26c>
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d114      	bne.n	8001f52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d119      	bne.n	8001f94 <HAL_SPI_TransmitReceive+0x2ae>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d014      	beq.n	8001f94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	68d2      	ldr	r2, [r2, #12]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f94:	f7fe fefe 	bl	8000d94 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	1ad2      	subs	r2, r2, r3
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d303      	bcc.n	8001fac <HAL_SPI_TransmitReceive+0x2c6>
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d102      	bne.n	8001fb2 <HAL_SPI_TransmitReceive+0x2cc>
 8001fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fb8:	e027      	b.n	800200a <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1a2      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x224>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d19d      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f892 	bl	80020fc <SPI_EndRxTxTransaction>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001fea:	e00e      	b.n	800200a <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800201a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800201e:	4618      	mov	r0, r3
 8002020:	3730      	adds	r7, #48	; 0x30
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002036:	e04c      	b.n	80020d2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d048      	beq.n	80020d2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002040:	f7fe fea8 	bl	8000d94 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d202      	bcs.n	8002056 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d13d      	bne.n	80020d2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	6852      	ldr	r2, [r2, #4]
 8002060:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002064:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800206e:	d111      	bne.n	8002094 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002078:	d004      	beq.n	8002084 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002082:	d107      	bne.n	8002094 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002092:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209c:	d10f      	bne.n	80020be <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e00f      	b.n	80020f2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1a3      	bne.n	8002038 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <SPI_EndRxTxTransaction+0x7c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <SPI_EndRxTxTransaction+0x80>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0d5b      	lsrs	r3, r3, #21
 8002114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002126:	d112      	bne.n	800214e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2200      	movs	r2, #0
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff ff77 	bl	8002026 <SPI_WaitFlagStateUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f043 0220 	orr.w	r2, r3, #32
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e00f      	b.n	800216e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3b01      	subs	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b80      	cmp	r3, #128	; 0x80
 8002166:	d0f2      	beq.n	800214e <SPI_EndRxTxTransaction+0x52>
 8002168:	e000      	b.n	800216c <SPI_EndRxTxTransaction+0x70>
        break;
 800216a:	bf00      	nop
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000
 800217c:	165e9f81 	.word	0x165e9f81

08002180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e03f      	b.n	8002212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fc68 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	68d2      	ldr	r2, [r2, #12]
 80021be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f90b 	bl	80023e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	6912      	ldr	r2, [r2, #16]
 80021d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	6952      	ldr	r2, [r2, #20]
 80021e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	68d2      	ldr	r2, [r2, #12]
 80021f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b088      	sub	sp, #32
 800221e:	af02      	add	r7, sp, #8
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b20      	cmp	r3, #32
 8002238:	f040 8082 	bne.w	8002340 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_UART_Transmit+0x2e>
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e07a      	b.n	8002342 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_UART_Transmit+0x40>
 8002256:	2302      	movs	r3, #2
 8002258:	e073      	b.n	8002342 <HAL_UART_Transmit+0x128>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2221      	movs	r2, #33	; 0x21
 800226c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002270:	f7fe fd90 	bl	8000d94 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	88fa      	ldrh	r2, [r7, #6]
 8002280:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800228a:	e041      	b.n	8002310 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a2:	d121      	bne.n	80022e8 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f84b 	bl	800234a <UART_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e041      	b.n	8002342 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	8812      	ldrh	r2, [r2, #0]
 80022ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ce:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	3302      	adds	r3, #2
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	e017      	b.n	8002310 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	e013      	b.n	8002310 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2200      	movs	r2, #0
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f829 	bl	800234a <UART_WaitOnFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e01f      	b.n	8002342 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1c59      	adds	r1, r3, #1
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1b8      	bne.n	800228c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f810 	bl	800234a <UART_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e006      	b.n	8002342 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235a:	e02c      	b.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002362:	d028      	beq.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <UART_WaitOnFlagUntilTimeout+0x30>
 800236a:	f7fe fd13 	bl	8000d94 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	1ad2      	subs	r2, r2, r3
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	429a      	cmp	r2, r3
 8002378:	d91d      	bls.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	68d2      	ldr	r2, [r2, #12]
 8002384:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002388:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	6952      	ldr	r2, [r2, #20]
 8002394:	f022 0201 	bic.w	r2, r2, #1
 8002398:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e00f      	b.n	80023d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	bf0c      	ite	eq
 80023c6:	2301      	moveq	r3, #1
 80023c8:	2300      	movne	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d0c3      	beq.n	800235c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	b0a3      	sub	sp, #140	; 0x8c
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002400:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	431a      	orrs	r2, r3
 800240a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	431a      	orrs	r2, r3
 8002410:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 800241a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800241c:	6819      	ldr	r1, [r3, #0]
 800241e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002428:	f022 020c 	bic.w	r2, r2, #12
 800242c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002430:	4313      	orrs	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002434:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800244a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002452:	f040 8171 	bne.w	8002738 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4ab4      	ldr	r2, [pc, #720]	; (800272c <UART_SetConfig+0x34c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d005      	beq.n	800246c <UART_SetConfig+0x8c>
 8002460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4ab2      	ldr	r2, [pc, #712]	; (8002730 <UART_SetConfig+0x350>)
 8002466:	4293      	cmp	r3, r2
 8002468:	f040 80b1 	bne.w	80025ce <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800246c:	f7ff f982 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 8002470:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002474:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002476:	681d      	ldr	r5, [r3, #0]
 8002478:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800247c:	4619      	mov	r1, r3
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	460b      	mov	r3, r1
 8002484:	4614      	mov	r4, r2
 8002486:	18db      	adds	r3, r3, r3
 8002488:	eb44 0404 	adc.w	r4, r4, r4
 800248c:	185b      	adds	r3, r3, r1
 800248e:	eb44 0402 	adc.w	r4, r4, r2
 8002492:	00e0      	lsls	r0, r4, #3
 8002494:	6478      	str	r0, [r7, #68]	; 0x44
 8002496:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002498:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800249c:	6478      	str	r0, [r7, #68]	; 0x44
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	643b      	str	r3, [r7, #64]	; 0x40
 80024a2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80024a6:	eb13 0801 	adds.w	r8, r3, r1
 80024aa:	eb44 0902 	adc.w	r9, r4, r2
 80024ae:	4640      	mov	r0, r8
 80024b0:	4649      	mov	r1, r9
 80024b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f04f 0400 	mov.w	r4, #0
 80024ba:	18db      	adds	r3, r3, r3
 80024bc:	eb44 0404 	adc.w	r4, r4, r4
 80024c0:	461a      	mov	r2, r3
 80024c2:	4623      	mov	r3, r4
 80024c4:	f7fd fefc 	bl	80002c0 <__aeabi_uldivmod>
 80024c8:	4603      	mov	r3, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b99      	ldr	r3, [pc, #612]	; (8002734 <UART_SetConfig+0x354>)
 80024d0:	fba3 2302 	umull	r2, r3, r3, r2
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	011e      	lsls	r6, r3, #4
 80024d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4614      	mov	r4, r2
 80024e6:	18db      	adds	r3, r3, r3
 80024e8:	eb44 0404 	adc.w	r4, r4, r4
 80024ec:	185b      	adds	r3, r3, r1
 80024ee:	eb44 0402 	adc.w	r4, r4, r2
 80024f2:	00e0      	lsls	r0, r4, #3
 80024f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80024f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024f8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80024fc:	63f8      	str	r0, [r7, #60]	; 0x3c
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
 8002502:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002506:	eb13 0801 	adds.w	r8, r3, r1
 800250a:	eb44 0902 	adc.w	r9, r4, r2
 800250e:	4640      	mov	r0, r8
 8002510:	4649      	mov	r1, r9
 8002512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f04f 0400 	mov.w	r4, #0
 800251a:	18db      	adds	r3, r3, r3
 800251c:	eb44 0404 	adc.w	r4, r4, r4
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	f7fd fecc 	bl	80002c0 <__aeabi_uldivmod>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	461a      	mov	r2, r3
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <UART_SetConfig+0x354>)
 8002530:	fba3 1302 	umull	r1, r3, r3, r2
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	2164      	movs	r1, #100	; 0x64
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	3332      	adds	r3, #50	; 0x32
 8002542:	4a7c      	ldr	r2, [pc, #496]	; (8002734 <UART_SetConfig+0x354>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002550:	441e      	add	r6, r3
 8002552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	460b      	mov	r3, r1
 800255e:	4614      	mov	r4, r2
 8002560:	18db      	adds	r3, r3, r3
 8002562:	eb44 0404 	adc.w	r4, r4, r4
 8002566:	185b      	adds	r3, r3, r1
 8002568:	eb44 0402 	adc.w	r4, r4, r2
 800256c:	00e0      	lsls	r0, r4, #3
 800256e:	6378      	str	r0, [r7, #52]	; 0x34
 8002570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002572:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002576:	6378      	str	r0, [r7, #52]	; 0x34
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
 800257c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002580:	eb13 0801 	adds.w	r8, r3, r1
 8002584:	eb44 0902 	adc.w	r9, r4, r2
 8002588:	4640      	mov	r0, r8
 800258a:	4649      	mov	r1, r9
 800258c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f04f 0400 	mov.w	r4, #0
 8002594:	18db      	adds	r3, r3, r3
 8002596:	eb44 0404 	adc.w	r4, r4, r4
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	f7fd fe8f 	bl	80002c0 <__aeabi_uldivmod>
 80025a2:	4603      	mov	r3, r0
 80025a4:	460c      	mov	r4, r1
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b62      	ldr	r3, [pc, #392]	; (8002734 <UART_SetConfig+0x354>)
 80025aa:	fba3 1302 	umull	r1, r3, r3, r2
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2164      	movs	r1, #100	; 0x64
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	3332      	adds	r3, #50	; 0x32
 80025bc:	4a5d      	ldr	r2, [pc, #372]	; (8002734 <UART_SetConfig+0x354>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4433      	add	r3, r6
 80025ca:	60ab      	str	r3, [r5, #8]
 80025cc:	e240      	b.n	8002a50 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ce:	f7ff f8bd 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 80025d2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	673a      	str	r2, [r7, #112]	; 0x70
 80025dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e0:	4619      	mov	r1, r3
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4614      	mov	r4, r2
 80025ea:	18db      	adds	r3, r3, r3
 80025ec:	eb44 0404 	adc.w	r4, r4, r4
 80025f0:	185b      	adds	r3, r3, r1
 80025f2:	eb44 0402 	adc.w	r4, r4, r2
 80025f6:	00e0      	lsls	r0, r4, #3
 80025f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80025fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025fc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002600:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
 8002606:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800260a:	185d      	adds	r5, r3, r1
 800260c:	eb44 0602 	adc.w	r6, r4, r2
 8002610:	4628      	mov	r0, r5
 8002612:	4631      	mov	r1, r6
 8002614:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f04f 0400 	mov.w	r4, #0
 800261c:	18db      	adds	r3, r3, r3
 800261e:	eb44 0404 	adc.w	r4, r4, r4
 8002622:	461a      	mov	r2, r3
 8002624:	4623      	mov	r3, r4
 8002626:	f7fd fe4b 	bl	80002c0 <__aeabi_uldivmod>
 800262a:	4603      	mov	r3, r0
 800262c:	460c      	mov	r4, r1
 800262e:	461a      	mov	r2, r3
 8002630:	4b40      	ldr	r3, [pc, #256]	; (8002734 <UART_SetConfig+0x354>)
 8002632:	fba3 2302 	umull	r2, r3, r3, r2
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	011e      	lsls	r6, r3, #4
 800263a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800263e:	4619      	mov	r1, r3
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	460b      	mov	r3, r1
 8002646:	4614      	mov	r4, r2
 8002648:	18db      	adds	r3, r3, r3
 800264a:	eb44 0404 	adc.w	r4, r4, r4
 800264e:	185b      	adds	r3, r3, r1
 8002650:	eb44 0402 	adc.w	r4, r4, r2
 8002654:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8002658:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800265c:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8002660:	4653      	mov	r3, sl
 8002662:	465c      	mov	r4, fp
 8002664:	eb13 0a01 	adds.w	sl, r3, r1
 8002668:	eb44 0b02 	adc.w	fp, r4, r2
 800266c:	4650      	mov	r0, sl
 800266e:	4659      	mov	r1, fp
 8002670:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f04f 0400 	mov.w	r4, #0
 8002678:	18db      	adds	r3, r3, r3
 800267a:	eb44 0404 	adc.w	r4, r4, r4
 800267e:	461a      	mov	r2, r3
 8002680:	4623      	mov	r3, r4
 8002682:	f7fd fe1d 	bl	80002c0 <__aeabi_uldivmod>
 8002686:	4603      	mov	r3, r0
 8002688:	460c      	mov	r4, r1
 800268a:	461a      	mov	r2, r3
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <UART_SetConfig+0x354>)
 800268e:	fba3 1302 	umull	r1, r3, r3, r2
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2164      	movs	r1, #100	; 0x64
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	3332      	adds	r3, #50	; 0x32
 80026a0:	4a24      	ldr	r2, [pc, #144]	; (8002734 <UART_SetConfig+0x354>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026ae:	441e      	add	r6, r3
 80026b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	18db      	adds	r3, r3, r3
 80026c0:	eb44 0404 	adc.w	r4, r4, r4
 80026c4:	185b      	adds	r3, r3, r1
 80026c6:	eb44 0402 	adc.w	r4, r4, r2
 80026ca:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80026ce:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80026d2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80026d6:	4643      	mov	r3, r8
 80026d8:	464c      	mov	r4, r9
 80026da:	eb13 0801 	adds.w	r8, r3, r1
 80026de:	eb44 0902 	adc.w	r9, r4, r2
 80026e2:	4640      	mov	r0, r8
 80026e4:	4649      	mov	r1, r9
 80026e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f04f 0400 	mov.w	r4, #0
 80026ee:	18db      	adds	r3, r3, r3
 80026f0:	eb44 0404 	adc.w	r4, r4, r4
 80026f4:	461a      	mov	r2, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	f7fd fde2 	bl	80002c0 <__aeabi_uldivmod>
 80026fc:	4603      	mov	r3, r0
 80026fe:	460c      	mov	r4, r1
 8002700:	461a      	mov	r2, r3
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <UART_SetConfig+0x354>)
 8002704:	fba3 1302 	umull	r1, r3, r3, r2
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	2164      	movs	r1, #100	; 0x64
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	3332      	adds	r3, #50	; 0x32
 8002716:	4a07      	ldr	r2, [pc, #28]	; (8002734 <UART_SetConfig+0x354>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	4433      	add	r3, r6
 8002724:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002726:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002728:	e192      	b.n	8002a50 <UART_SetConfig+0x670>
 800272a:	bf00      	nop
 800272c:	40011000 	.word	0x40011000
 8002730:	40011400 	.word	0x40011400
 8002734:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4bc1      	ldr	r3, [pc, #772]	; (8002a44 <UART_SetConfig+0x664>)
 800273e:	429a      	cmp	r2, r3
 8002740:	d005      	beq.n	800274e <UART_SetConfig+0x36e>
 8002742:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4bc0      	ldr	r3, [pc, #768]	; (8002a48 <UART_SetConfig+0x668>)
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 80bf 	bne.w	80028cc <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 800274e:	f7ff f811 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 8002752:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002756:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002758:	681e      	ldr	r6, [r3, #0]
 800275a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	460b      	mov	r3, r1
 8002766:	4614      	mov	r4, r2
 8002768:	18db      	adds	r3, r3, r3
 800276a:	eb44 0404 	adc.w	r4, r4, r4
 800276e:	185b      	adds	r3, r3, r1
 8002770:	eb44 0402 	adc.w	r4, r4, r2
 8002774:	00e0      	lsls	r0, r4, #3
 8002776:	6278      	str	r0, [r7, #36]	; 0x24
 8002778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800277a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800277e:	6278      	str	r0, [r7, #36]	; 0x24
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002788:	eb13 0801 	adds.w	r8, r3, r1
 800278c:	eb44 0902 	adc.w	r9, r4, r2
 8002790:	4640      	mov	r0, r8
 8002792:	4649      	mov	r1, r9
 8002794:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	00a2      	lsls	r2, r4, #2
 800279e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027a2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80027a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80027ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027b0:	f7fd fd86 	bl	80002c0 <__aeabi_uldivmod>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	461a      	mov	r2, r3
 80027ba:	4ba4      	ldr	r3, [pc, #656]	; (8002a4c <UART_SetConfig+0x66c>)
 80027bc:	fba3 2302 	umull	r2, r3, r3, r2
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	011d      	lsls	r5, r3, #4
 80027c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027c8:	4619      	mov	r1, r3
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4614      	mov	r4, r2
 80027d2:	18db      	adds	r3, r3, r3
 80027d4:	eb44 0404 	adc.w	r4, r4, r4
 80027d8:	185b      	adds	r3, r3, r1
 80027da:	eb44 0402 	adc.w	r4, r4, r2
 80027de:	00e0      	lsls	r0, r4, #3
 80027e0:	61f8      	str	r0, [r7, #28]
 80027e2:	69f8      	ldr	r0, [r7, #28]
 80027e4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80027e8:	61f8      	str	r0, [r7, #28]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80027f2:	eb13 0801 	adds.w	r8, r3, r1
 80027f6:	eb44 0902 	adc.w	r9, r4, r2
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f04f 0400 	mov.w	r4, #0
 8002806:	00a2      	lsls	r2, r4, #2
 8002808:	657a      	str	r2, [r7, #84]	; 0x54
 800280a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800280c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002810:	657a      	str	r2, [r7, #84]	; 0x54
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	653b      	str	r3, [r7, #80]	; 0x50
 8002816:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800281a:	f7fd fd51 	bl	80002c0 <__aeabi_uldivmod>
 800281e:	4603      	mov	r3, r0
 8002820:	460c      	mov	r4, r1
 8002822:	461a      	mov	r2, r3
 8002824:	4b89      	ldr	r3, [pc, #548]	; (8002a4c <UART_SetConfig+0x66c>)
 8002826:	fba3 1302 	umull	r1, r3, r3, r2
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2164      	movs	r1, #100	; 0x64
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	3332      	adds	r3, #50	; 0x32
 8002838:	4a84      	ldr	r2, [pc, #528]	; (8002a4c <UART_SetConfig+0x66c>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002844:	441d      	add	r5, r3
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284a:	4619      	mov	r1, r3
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	460b      	mov	r3, r1
 8002852:	4614      	mov	r4, r2
 8002854:	18db      	adds	r3, r3, r3
 8002856:	eb44 0404 	adc.w	r4, r4, r4
 800285a:	185b      	adds	r3, r3, r1
 800285c:	eb44 0402 	adc.w	r4, r4, r2
 8002860:	00e0      	lsls	r0, r4, #3
 8002862:	6178      	str	r0, [r7, #20]
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800286a:	6178      	str	r0, [r7, #20]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002874:	eb13 0801 	adds.w	r8, r3, r1
 8002878:	eb44 0902 	adc.w	r9, r4, r2
 800287c:	4640      	mov	r0, r8
 800287e:	4649      	mov	r1, r9
 8002880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	00a2      	lsls	r2, r4, #2
 800288a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800288c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800288e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002892:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
 8002898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800289c:	f7fd fd10 	bl	80002c0 <__aeabi_uldivmod>
 80028a0:	4603      	mov	r3, r0
 80028a2:	460c      	mov	r4, r1
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <UART_SetConfig+0x66c>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	2164      	movs	r1, #100	; 0x64
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	3332      	adds	r3, #50	; 0x32
 80028ba:	4a64      	ldr	r2, [pc, #400]	; (8002a4c <UART_SetConfig+0x66c>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	442b      	add	r3, r5
 80028c8:	60b3      	str	r3, [r6, #8]
 80028ca:	e0c1      	b.n	8002a50 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 80028cc:	f7fe ff3e 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 80028d0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028de:	4619      	mov	r1, r3
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4614      	mov	r4, r2
 80028e8:	18db      	adds	r3, r3, r3
 80028ea:	eb44 0404 	adc.w	r4, r4, r4
 80028ee:	185b      	adds	r3, r3, r1
 80028f0:	eb44 0402 	adc.w	r4, r4, r2
 80028f4:	00e6      	lsls	r6, r4, #3
 80028f6:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80028fa:	00dd      	lsls	r5, r3, #3
 80028fc:	462b      	mov	r3, r5
 80028fe:	4634      	mov	r4, r6
 8002900:	185d      	adds	r5, r3, r1
 8002902:	eb44 0602 	adc.w	r6, r4, r2
 8002906:	4628      	mov	r0, r5
 8002908:	4631      	mov	r1, r6
 800290a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f04f 0400 	mov.w	r4, #0
 8002912:	00a5      	lsls	r5, r4, #2
 8002914:	677d      	str	r5, [r7, #116]	; 0x74
 8002916:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8002918:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 800291c:	677d      	str	r5, [r7, #116]	; 0x74
 800291e:	009c      	lsls	r4, r3, #2
 8002920:	673c      	str	r4, [r7, #112]	; 0x70
 8002922:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002926:	f7fd fccb 	bl	80002c0 <__aeabi_uldivmod>
 800292a:	4603      	mov	r3, r0
 800292c:	460c      	mov	r4, r1
 800292e:	461a      	mov	r2, r3
 8002930:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <UART_SetConfig+0x66c>)
 8002932:	fba3 1302 	umull	r1, r3, r3, r2
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	011d      	lsls	r5, r3, #4
 800293a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	460b      	mov	r3, r1
 8002946:	4614      	mov	r4, r2
 8002948:	18db      	adds	r3, r3, r3
 800294a:	eb44 0404 	adc.w	r4, r4, r4
 800294e:	185b      	adds	r3, r3, r1
 8002950:	eb44 0402 	adc.w	r4, r4, r2
 8002954:	00e0      	lsls	r0, r4, #3
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	00d8      	lsls	r0, r3, #3
 8002962:	60b8      	str	r0, [r7, #8]
 8002964:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002968:	eb13 0801 	adds.w	r8, r3, r1
 800296c:	eb44 0902 	adc.w	r9, r4, r2
 8002970:	4640      	mov	r0, r8
 8002972:	4649      	mov	r1, r9
 8002974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f04f 0400 	mov.w	r4, #0
 800297c:	00a6      	lsls	r6, r4, #2
 800297e:	66fe      	str	r6, [r7, #108]	; 0x6c
 8002980:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8002982:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002986:	66fe      	str	r6, [r7, #108]	; 0x6c
 8002988:	009c      	lsls	r4, r3, #2
 800298a:	66bc      	str	r4, [r7, #104]	; 0x68
 800298c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002990:	f7fd fc96 	bl	80002c0 <__aeabi_uldivmod>
 8002994:	4603      	mov	r3, r0
 8002996:	460c      	mov	r4, r1
 8002998:	461a      	mov	r2, r3
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <UART_SetConfig+0x66c>)
 800299c:	fba3 1302 	umull	r1, r3, r3, r2
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	2164      	movs	r1, #100	; 0x64
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	3332      	adds	r3, #50	; 0x32
 80029ae:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <UART_SetConfig+0x66c>)
 80029b0:	fba2 1303 	umull	r1, r3, r2, r3
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ba:	441d      	add	r5, r3
 80029bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029c0:	4619      	mov	r1, r3
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4614      	mov	r4, r2
 80029ca:	18db      	adds	r3, r3, r3
 80029cc:	eb44 0404 	adc.w	r4, r4, r4
 80029d0:	185b      	adds	r3, r3, r1
 80029d2:	eb44 0402 	adc.w	r4, r4, r2
 80029d6:	00e0      	lsls	r0, r4, #3
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	00d8      	lsls	r0, r3, #3
 80029e4:	6038      	str	r0, [r7, #0]
 80029e6:	e897 0018 	ldmia.w	r7, {r3, r4}
 80029ea:	eb13 0801 	adds.w	r8, r3, r1
 80029ee:	eb44 0902 	adc.w	r9, r4, r2
 80029f2:	4640      	mov	r0, r8
 80029f4:	4649      	mov	r1, r9
 80029f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	00a6      	lsls	r6, r4, #2
 8002a00:	667e      	str	r6, [r7, #100]	; 0x64
 8002a02:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8002a04:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002a08:	667e      	str	r6, [r7, #100]	; 0x64
 8002a0a:	009c      	lsls	r4, r3, #2
 8002a0c:	663c      	str	r4, [r7, #96]	; 0x60
 8002a0e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a12:	f7fd fc55 	bl	80002c0 <__aeabi_uldivmod>
 8002a16:	4603      	mov	r3, r0
 8002a18:	460c      	mov	r4, r1
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <UART_SetConfig+0x66c>)
 8002a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	2164      	movs	r1, #100	; 0x64
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	3332      	adds	r3, #50	; 0x32
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <UART_SetConfig+0x66c>)
 8002a32:	fba2 1303 	umull	r1, r3, r2, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	442b      	add	r3, r5
 8002a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a40:	6093      	str	r3, [r2, #8]
}
 8002a42:	e005      	b.n	8002a50 <UART_SetConfig+0x670>
 8002a44:	40011000 	.word	0x40011000
 8002a48:	40011400 	.word	0x40011400
 8002a4c:	51eb851f 	.word	0x51eb851f
 8002a50:	bf00      	nop
 8002a52:	378c      	adds	r7, #140	; 0x8c
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002a60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a62:	e003      	b.n	8002a6c <LoopCopyDataInit>

08002a64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a6a:	3104      	adds	r1, #4

08002a6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a74:	d3f6      	bcc.n	8002a64 <CopyDataInit>
  ldr  r2, =_sbss
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a78:	e002      	b.n	8002a80 <LoopFillZerobss>

08002a7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002a7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a7c:	f842 3b04 	str.w	r3, [r2], #4

08002a80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a84:	d3f9      	bcc.n	8002a7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a86:	f7fe f909 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f002 fd8d 	bl	80055a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7fd fedd 	bl	800084c <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a94:	20008000 	.word	0x20008000
  ldr  r3, =_sidata
 8002a98:	08006830 	.word	0x08006830
  ldr  r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002aa0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002aa4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002aa8:	200002a4 	.word	0x200002a4

08002aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC_IRQHandler>
	...

08002ab0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	4a37      	ldr	r2, [pc, #220]	; (8002ba8 <init_chip_pins+0xf8>)
 8002acc:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <init_chip_pins+0xf8>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <init_chip_pins+0xf8>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <init_chip_pins+0xf8>)
 8002ae8:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <init_chip_pins+0xf8>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <init_chip_pins+0xf8>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4a29      	ldr	r2, [pc, #164]	; (8002ba8 <init_chip_pins+0xf8>)
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <init_chip_pins+0xf8>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <init_chip_pins+0xf8>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <init_chip_pins+0xf8>)
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <init_chip_pins+0xf8>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <init_chip_pins+0xf8>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_WIFI_CS_PORT, SPI_WIFI_CS_PIN, GPIO_PIN_RESET);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2102      	movs	r1, #2
 8002b3a:	481c      	ldr	r0, [pc, #112]	; (8002bac <init_chip_pins+0xfc>)
 8002b3c:	f7fe fc0a 	bl	8001354 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CONF_WINC_ENABLE_PORT, CONF_WINC_ENABLE_PIN|CONF_WINC_WAKE_PIN |CONF_WINC_RESET_PIN, GPIO_PIN_RESET);
 8002b40:	2200      	movs	r2, #0
 8002b42:	f246 0102 	movw	r1, #24578	; 0x6002
 8002b46:	481a      	ldr	r0, [pc, #104]	; (8002bb0 <init_chip_pins+0x100>)
 8002b48:	f7fe fc04 	bl	8001354 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_WIFI_CS_PIN;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_WIFI_CS_PORT, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	4812      	ldr	r0, [pc, #72]	; (8002bac <init_chip_pins+0xfc>)
 8002b64:	f7fe fa84 	bl	8001070 <HAL_GPIO_Init>

	/*Configure GPIO pins : winc_EN_Pin winc_WAKE_Pin winc_RST_Pin */
	GPIO_InitStruct.Pin = CONF_WINC_ENABLE_PIN|CONF_WINC_WAKE_PIN |CONF_WINC_RESET_PIN;
 8002b68:	f246 0302 	movw	r3, #24578	; 0x6002
 8002b6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CONF_WINC_ENABLE_PORT, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <init_chip_pins+0x100>)
 8002b82:	f7fe fa75 	bl	8001070 <HAL_GPIO_Init>

	/*Configure GPIO pin : winc_IRQ_Pin */
	GPIO_InitStruct.Pin = CONF_WINC_IRQ_PIN;
 8002b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <init_chip_pins+0x104>)
 8002b8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CONF_WINC_IRQ_PORT, &GPIO_InitStruct);
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <init_chip_pins+0x100>)
 8002b9c:	f7fe fa68 	bl	8001070 <HAL_GPIO_Init>
}
 8002ba0:	bf00      	nop
 8002ba2:	3728      	adds	r7, #40	; 0x28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	10210000 	.word	0x10210000

08002bb8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 8002bbc:	f7ff ff78 	bl	8002ab0 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 8002bc0:	f000 f804 	bl	8002bcc <nm_bsp_reset>

	return M2M_SUCCESS;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	480d      	ldr	r0, [pc, #52]	; (8002c0c <nm_bsp_reset+0x40>)
 8002bd6:	f7fe fbbd 	bl	8001354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002be0:	480a      	ldr	r0, [pc, #40]	; (8002c0c <nm_bsp_reset+0x40>)
 8002be2:	f7fe fbb7 	bl	8001354 <HAL_GPIO_WritePin>
	nm_bsp_sleep(10);
 8002be6:	200a      	movs	r0, #10
 8002be8:	f000 f812 	bl	8002c10 <nm_bsp_sleep>
	HAL_GPIO_WritePin(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,GPIO_PIN_SET);
 8002bec:	2201      	movs	r2, #1
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4806      	ldr	r0, [pc, #24]	; (8002c0c <nm_bsp_reset+0x40>)
 8002bf2:	f7fe fbaf 	bl	8001354 <HAL_GPIO_WritePin>
	nm_bsp_sleep(10);
 8002bf6:	200a      	movs	r0, #10
 8002bf8:	f000 f80a 	bl	8002c10 <nm_bsp_sleep>
	HAL_GPIO_WritePin(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,GPIO_PIN_SET);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c02:	4802      	ldr	r0, [pc, #8]	; (8002c0c <nm_bsp_reset+0x40>)
 8002c04:	f7fe fba6 	bl	8001354 <HAL_GPIO_WritePin>
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40020400 	.word	0x40020400

08002c10 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32TimeMsec);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7fe f8c7 	bl	8000dac <HAL_Delay>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* EXTI2 init ISR function - called from nm_bsp_register_isr() */

	 __GPIOB_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <nm_bsp_register_isr+0x58>)
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <nm_bsp_register_isr+0x58>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <nm_bsp_register_isr+0x58>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin   = CONF_WINC_SPI_INT_PIN;
 8002c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <nm_bsp_register_isr+0x5c>)
 8002c54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(CONF_WINC_SPI_INT_PORT, &GPIO_InitStruct);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4809      	ldr	r0, [pc, #36]	; (8002c88 <nm_bsp_register_isr+0x60>)
 8002c62:	f7fe fa05 	bl	8001070 <HAL_GPIO_Init>

	/* EXTI 2 (PA2) interrupt init*/
	HAL_NVIC_SetPriority(CONF_WINC_EXTI_IRQN, 0x00, 0);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	2028      	movs	r0, #40	; 0x28
 8002c6c:	f7fe f9bb 	bl	8000fe6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CONF_WINC_EXTI_IRQN);
 8002c70:	2028      	movs	r0, #40	; 0x28
 8002c72:	f7fe f9d4 	bl	800101e <HAL_NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	10210000 	.word	0x10210000
 8002c88:	40020400 	.word	0x40020400

08002c8c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	if (1 == u8Enable)
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d108      	bne.n	8002cae <nm_bsp_interrupt_ctrl+0x22>
	{
		HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2028      	movs	r0, #40	; 0x28
 8002ca2:	f7fe f9a0 	bl	8000fe6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8002ca6:	2028      	movs	r0, #40	; 0x28
 8002ca8:	f7fe f9b9 	bl	800101e <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
	}
}
 8002cac:	e002      	b.n	8002cb4 <nm_bsp_interrupt_ctrl+0x28>
		HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8002cae:	2028      	movs	r0, #40	; 0x28
 8002cb0:	f7fe f9c3 	bl	800103a <HAL_NVIC_DisableIRQ>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <spi_rw>:
#ifdef CONF_WINC_USE_SPI

static uint8 spiDummyBuf[300] = {0};

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	/* Start SPI transaction - polling method */
	HAL_GPIO_WritePin(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);;
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2102      	movs	r1, #2
 8002cce:	4822      	ldr	r0, [pc, #136]	; (8002d58 <spi_rw+0x9c>)
 8002cd0:	f7fe fb40 	bl	8001354 <HAL_GPIO_WritePin>
	/* Transmit/Recieve */
	if (pu8Mosi == NULL)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10c      	bne.n	8002cf4 <spi_rw+0x38>
	{
		status = HAL_SPI_TransmitReceive(&hspi2,spiDummyBuf,pu8Miso,u16Sz,1000);
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	491d      	ldr	r1, [pc, #116]	; (8002d5c <spi_rw+0xa0>)
 8002ce8:	481d      	ldr	r0, [pc, #116]	; (8002d60 <spi_rw+0xa4>)
 8002cea:	f7fe fffc 	bl	8001ce6 <HAL_SPI_TransmitReceive>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]
 8002cf2:	e021      	b.n	8002d38 <spi_rw+0x7c>
	}
	else if(pu8Miso == NULL)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d112      	bne.n	8002d20 <spi_rw+0x64>
	{
		status = HAL_SPI_TransmitReceive(&hspi2,pu8Mosi,spiDummyBuf,u16Sz,1000);
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <spi_rw+0xa0>)
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	4815      	ldr	r0, [pc, #84]	; (8002d60 <spi_rw+0xa4>)
 8002d0a:	f7fe ffec 	bl	8001ce6 <HAL_SPI_TransmitReceive>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	75fb      	strb	r3, [r7, #23]
		memset(spiDummyBuf,0, u16Sz);
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	461a      	mov	r2, r3
 8002d16:	2100      	movs	r1, #0
 8002d18:	4810      	ldr	r0, [pc, #64]	; (8002d5c <spi_rw+0xa0>)
 8002d1a:	f002 fc78 	bl	800560e <memset>
 8002d1e:	e00b      	b.n	8002d38 <spi_rw+0x7c>
	}
	else
	{
		status = HAL_SPI_TransmitReceive(&hspi2,pu8Mosi,pu8Miso,u16Sz,1000);
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	480c      	ldr	r0, [pc, #48]	; (8002d60 <spi_rw+0xa4>)
 8002d30:	f7fe ffd9 	bl	8001ce6 <HAL_SPI_TransmitReceive>
 8002d34:	4603      	mov	r3, r0
 8002d36:	75fb      	strb	r3, [r7, #23]
	}

	/* Handle Transmit/Recieve error */
	if (status != HAL_OK)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <spi_rw+0x88>
	{
		M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
		return status;
 8002d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d42:	e005      	b.n	8002d50 <spi_rw+0x94>
	}
	HAL_GPIO_WritePin(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);;
 8002d44:	2201      	movs	r2, #1
 8002d46:	2102      	movs	r1, #2
 8002d48:	4803      	ldr	r0, [pc, #12]	; (8002d58 <spi_rw+0x9c>)
 8002d4a:	f7fe fb03 	bl	8001354 <HAL_GPIO_WritePin>
	return M2M_SUCCESS;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	20000098 	.word	0x20000098
 8002d60:	20000220 	.word	0x20000220

08002d64 <nm_bus_wifi_spi_init>:
#endif


void nm_bus_wifi_spi_init(SPI_HandleTypeDef *hspi)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	/* Peripheral clock enable */
	__HAL_RCC_SPI2_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	4a32      	ldr	r2, [pc, #200]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002d72:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002d8e:	4b2b      	ldr	r3, [pc, #172]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6313      	str	r3, [r2, #48]	; 0x30
 8002d98:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f043 0302 	orr.w	r3, r3, #2
 8002db2:	6313      	str	r3, [r2, #48]	; 0x30
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <nm_bus_wifi_spi_init+0xd8>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = SPI_WIFI_MISO_PIN;
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002de0:	2305      	movs	r3, #5
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(SPI_WIFI_MISO_PORT, &GPIO_InitStruct);
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	4619      	mov	r1, r3
 8002dea:	4815      	ldr	r0, [pc, #84]	; (8002e40 <nm_bus_wifi_spi_init+0xdc>)
 8002dec:	f7fe f940 	bl	8001070 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI_WIFI_MOSI_PIN;
 8002df0:	2308      	movs	r3, #8
 8002df2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e00:	2305      	movs	r3, #5
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(SPI_WIFI_MOSI_PORT, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	480d      	ldr	r0, [pc, #52]	; (8002e40 <nm_bus_wifi_spi_init+0xdc>)
 8002e0c:	f7fe f930 	bl	8001070 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI_WIFI_SCK_PIN;
 8002e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e22:	2305      	movs	r3, #5
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(SPI_WIFI_SCK_PORT, &GPIO_InitStruct);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <nm_bus_wifi_spi_init+0xe0>)
 8002e2e:	f7fe f91f 	bl	8001070 <HAL_GPIO_Init>
}
 8002e32:	bf00      	nop
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020400 	.word	0x40020400

08002e48 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]

	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <nm_bus_init+0x70>)
 8002e56:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <nm_bus_init+0x74>)
 8002e58:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <nm_bus_init+0x70>)
 8002e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e60:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <nm_bus_init+0x70>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <nm_bus_init+0x70>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <nm_bus_init+0x70>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <nm_bus_init+0x70>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <nm_bus_init+0x70>)
 8002e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e80:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <nm_bus_init+0x70>)
 8002e84:	2208      	movs	r2, #8
 8002e86:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <nm_bus_init+0x70>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <nm_bus_init+0x70>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <nm_bus_init+0x70>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <nm_bus_init+0x70>)
 8002e9c:	220a      	movs	r2, #10
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <nm_bus_init+0x70>)
 8002ea2:	f7fe febd 	bl	8001c20 <HAL_SPI_Init>
	{
		M2M_ERR("SPI bus Initialization error\r\n");
	}

	HAL_SPI_MspInit(&hspi2);
 8002ea6:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <nm_bus_init+0x70>)
 8002ea8:	f7fd fdd6 	bl	8000a58 <HAL_SPI_MspInit>
	return result;
 8002eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000220 	.word	0x20000220
 8002ebc:	40003800 	.word	0x40003800

08002ec0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d10d      	bne.n	8002ef2 <nm_bus_ioctl+0x32>
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6859      	ldr	r1, [r3, #4]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	891b      	ldrh	r3, [r3, #8]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff fee8 	bl	8002cbc <spi_rw>
 8002eec:	4603      	mov	r3, r0
 8002eee:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8002ef0:	e002      	b.n	8002ef8 <nm_bus_ioctl+0x38>

		default:
			s8Ret = -1;
 8002ef2:	23ff      	movs	r3, #255	; 0xff
 8002ef4:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("invalide ioclt cmd\n");
			break;
 8002ef6:	bf00      	nop
	}

	return s8Ret;
 8002ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	71fb      	strb	r3, [r7, #7]
	return result;
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d010      	beq.n	8002f52 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	701a      	strb	r2, [r3, #0]
		pDst++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
		pSrc++;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3301      	adds	r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
	}while(--sz);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ef      	bne.n	8002f30 <m2m_memcpy+0x12>
 8002f50:	e000      	b.n	8002f54 <m2m_memcpy+0x36>
	if(sz == 0) return;
 8002f52:	bf00      	nop
}
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	460b      	mov	r3, r1
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	72fb      	strb	r3, [r7, #11]
	if(sz == 0) return;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <m2m_memset+0x2e>
	do
	{
		*pBuf = val;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	7afa      	ldrb	r2, [r7, #11]
 8002f76:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
	}while(--sz);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f3      	bne.n	8002f72 <m2m_memset+0x14>
 8002f8a:	e000      	b.n	8002f8e <m2m_memset+0x30>
	if(sz == 0) return;
 8002f8c:	bf00      	nop
}
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	81fb      	strh	r3, [r7, #14]
	while(*pcStr)
 8002fa4:	e005      	b.n	8002fb2 <m2m_strlen+0x1a>
	{
		u16StrLen ++;
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	81fb      	strh	r3, [r7, #14]
		pcStr++;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	607b      	str	r3, [r7, #4]
	while(*pcStr)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f5      	bne.n	8002fa6 <m2m_strlen+0xe>
	}
	return u16StrLen;
 8002fba:	89fb      	ldrh	r3, [r7, #14]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

void isr(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <isr+0x1c>)
 8002fce:	78db      	ldrb	r3, [r3, #3]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <isr+0x1c>)
 8002fd8:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	20000278 	.word	0x20000278

08002fe8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	71fb      	strb	r3, [r7, #7]

	gstrHifCxt.u8HifRXDone = 0;
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <hif_set_rx_done+0x5c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f7ff fe47 	bl	8002c8c <nm_bsp_interrupt_ctrl>
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
 8002ffe:	463b      	mov	r3, r7
 8003000:	4619      	mov	r1, r3
 8003002:	f241 0070 	movw	r0, #4208	; 0x1070
 8003006:	f001 fa90 	bl	800452a <nm_read_reg_with_ret>
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <hif_set_rx_done+0x4e>
	/* Set RX Done */
	reg |= NBIT1;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	f241 0070 	movw	r0, #4208	; 0x1070
 8003026:	f001 fa8e 	bl	8004546 <nm_write_reg>
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	e000      	b.n	8003038 <hif_set_rx_done+0x50>
	if(ret != M2M_SUCCESS)goto ERR1;
 8003036:	bf00      	nop
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000278 	.word	0x20000278

08003048 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	603a      	str	r2, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
 8003054:	460b      	mov	r3, r1
 8003056:	80bb      	strh	r3, [r7, #4]


}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 800306a:	2300      	movs	r3, #0
 800306c:	71fb      	strb	r3, [r7, #7]
	if(gstrHifCxt.u8HifRXDone)
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <hif_chip_wake+0x5c>)
 8003070:	789b      	ldrb	r3, [r3, #2]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <hif_chip_wake+0x1a>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	e01c      	b.n	80030b8 <hif_chip_wake+0x54>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <hif_chip_wake+0x5c>)
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10c      	bne.n	80030a2 <hif_chip_wake+0x3e>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <hif_chip_wake+0x5c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <hif_chip_wake+0x3e>
		{
			ret = chip_wake();
 8003092:	f001 f891 	bl	80041b8 <chip_wake>
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <hif_chip_wake+0x4e>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <hif_chip_wake+0x5c>)
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <hif_chip_wake+0x5c>)
 80030ae:	705a      	strb	r2, [r3, #1]
 80030b0:	e000      	b.n	80030b4 <hif_chip_wake+0x50>
			if(ret != M2M_SUCCESS)goto ERR1;
 80030b2:	bf00      	nop
ERR1:
	return ret;
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000278 	.word	0x20000278

080030c4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <hif_chip_sleep_sc+0x28>)
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <hif_chip_sleep_sc+0x28>)
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <hif_chip_sleep_sc+0x28>)
 80030de:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20000278 	.word	0x20000278

080030f0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 80030f6:	2300      	movs	r3, #0
 80030f8:	71fb      	strb	r3, [r7, #7]

	if(gstrHifCxt.u8ChipSleep >= 1)
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <hif_chip_sleep+0x50>)
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <hif_chip_sleep+0x22>
	{
		gstrHifCxt.u8ChipSleep--;
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <hif_chip_sleep+0x50>)
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <hif_chip_sleep+0x50>)
 8003110:	705a      	strb	r2, [r3, #1]
	}

	if(gstrHifCxt.u8ChipSleep == 0)
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <hif_chip_sleep+0x50>)
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <hif_chip_sleep+0x44>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <hif_chip_sleep+0x50>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <hif_chip_sleep+0x44>
		{
			ret = chip_sleep();
 8003126:	f000 ffe5 	bl	80040f4 <chip_sleep>
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
			if(ret != M2M_SUCCESS)goto ERR1;
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
		else
		{
		}
	}
ERR1:
	return ret;
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000278 	.word	0x20000278

08003144 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
 800314c:	2228      	movs	r2, #40	; 0x28
 800314e:	2100      	movs	r1, #0
 8003150:	4807      	ldr	r0, [pc, #28]	; (8003170 <hif_init+0x2c>)
 8003152:	f7ff ff04 	bl	8002f5e <m2m_memset>
	nm_bsp_register_isr(isr);
 8003156:	4807      	ldr	r0, [pc, #28]	; (8003174 <hif_init+0x30>)
 8003158:	f7ff fd66 	bl	8002c28 <nm_bsp_register_isr>
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
 800315c:	4906      	ldr	r1, [pc, #24]	; (8003178 <hif_init+0x34>)
 800315e:	2003      	movs	r0, #3
 8003160:	f000 fac8 	bl	80036f4 <hif_register_cb>
	return M2M_SUCCESS;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000278 	.word	0x20000278
 8003174:	08002fc9 	.word	0x08002fc9
 8003178:	08003049 	.word	0x08003049

0800317c <hif_send>:
				Packet buffer size (including the HIF header).
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	603a      	str	r2, [r7, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
 800318a:	460b      	mov	r3, r1
 800318c:	71bb      	strb	r3, [r7, #6]
 800318e:	4613      	mov	r3, r2
 8003190:	80bb      	strh	r3, [r7, #4]
    /* temp is 16 bit variable used to read a volatile memory location to
       pass to function/macro, which is not using volatile variable.
       it is done due to IAR warning.
    */
    uint16  temp;
	sint8	ret = M2M_ERR_SEND;
 8003192:	23ff      	movs	r3, #255	; 0xff
 8003194:	77fb      	strb	r3, [r7, #31]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 8003196:	79bb      	ldrb	r3, [r7, #6]
 8003198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319c:	b2db      	uxtb	r3, r3
 800319e:	767b      	strb	r3, [r7, #25]
	strHif.u8Gid		= u8Gid;
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	763b      	strb	r3, [r7, #24]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 80031a4:	2308      	movs	r3, #8
 80031a6:	837b      	strh	r3, [r7, #26]
	if(pu8DataBuf != NULL)
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <hif_send+0x46>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
 80031ae:	8b7b      	ldrh	r3, [r7, #26]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80031b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031b6:	440b      	add	r3, r1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	837b      	strh	r3, [r7, #26]
 80031c0:	e005      	b.n	80031ce <hif_send+0x52>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 80031c2:	8b7b      	ldrh	r3, [r7, #26]
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	88bb      	ldrh	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	837b      	strh	r3, [r7, #26]
	}
	ret = hif_chip_wake();
 80031ce:	f7ff ff49 	bl	8003064 <hif_chip_wake>
 80031d2:	4603      	mov	r3, r0
 80031d4:	77fb      	strb	r3, [r7, #31]
	if(ret == M2M_SUCCESS)
 80031d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 80e6 	bne.w	80033ac <hif_send+0x230>
	{
		volatile uint32 reg, dma_addr = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	81fb      	strh	r3, [r7, #14]
//#define OPTIMIZE_BUS
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
        temp = (uint16)strHif.u16Length;
 80031ec:	8b7b      	ldrh	r3, [r7, #26]
 80031ee:	83bb      	strh	r3, [r7, #28]
		reg |= (uint32)u8Gid;
 80031f0:	79fa      	ldrb	r2, [r7, #7]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
 80031f8:	79bb      	ldrb	r3, [r7, #6]
 80031fa:	021a      	lsls	r2, r3, #8
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)temp<<16);
 8003202:	8bbb      	ldrh	r3, [r7, #28]
 8003204:	041a      	lsls	r2, r3, #16
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	4619      	mov	r1, r3
 8003210:	f241 008c 	movw	r0, #4236	; 0x108c
 8003214:	f001 f997 	bl	8004546 <nm_write_reg>
 8003218:	4603      	mov	r3, r0
 800321a:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 800321c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 80b7 	bne.w	8003394 <hif_send+0x218>

		reg = 0UL;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	4619      	mov	r1, r3
 8003236:	f241 0078 	movw	r0, #4216	; 0x1078
 800323a:	f001 f984 	bl	8004546 <nm_write_reg>
 800323e:	4603      	mov	r3, r0
 8003240:	77fb      	strb	r3, [r7, #31]
		if(M2M_SUCCESS != ret) goto ERR1;
 8003242:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 80a6 	bne.w	8003398 <hif_send+0x21c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]

		for(cnt = 0; cnt < 1000; cnt ++)
 8003250:	2300      	movs	r3, #0
 8003252:	81fb      	strh	r3, [r7, #14]
 8003254:	e02e      	b.n	80032b4 <hif_send+0x138>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4619      	mov	r1, r3
 800325c:	f241 0078 	movw	r0, #4216	; 0x1078
 8003260:	f001 f963 	bl	800452a <nm_read_reg_with_ret>
 8003264:	4603      	mov	r3, r0
 8003266:	77fb      	strb	r3, [r7, #31]
			if(ret != M2M_SUCCESS) break;
 8003268:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d127      	bne.n	80032c0 <hif_send+0x144>
			/*
			 * If it takes too long to get a response, the slow down to
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
 8003270:	89fb      	ldrh	r3, [r7, #14]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003278:	d303      	bcc.n	8003282 <hif_send+0x106>
				if(cnt < 501) {
 800327a:	89fb      	ldrh	r3, [r7, #14]
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
 800327c:	2001      	movs	r0, #1
 800327e:	f7ff fcc7 	bl	8002c10 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10e      	bne.n	80032aa <hif_send+0x12e>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4619      	mov	r1, r3
 8003292:	484a      	ldr	r0, [pc, #296]	; (80033bc <hif_send+0x240>)
 8003294:	f001 f949 	bl	800452a <nm_read_reg_with_ret>
 8003298:	4603      	mov	r3, r0
 800329a:	77fb      	strb	r3, [r7, #31]
				if(ret != M2M_SUCCESS) {
 800329c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00f      	beq.n	80032c4 <hif_send+0x148>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
					goto ERR1;
 80032a8:	e07d      	b.n	80033a6 <hif_send+0x22a>
		for(cnt = 0; cnt < 1000; cnt ++)
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	81fb      	strh	r3, [r7, #14]
 80032b4:	89fb      	ldrh	r3, [r7, #14]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032bc:	d3cb      	bcc.n	8003256 <hif_send+0xda>
 80032be:	e002      	b.n	80032c6 <hif_send+0x14a>
			if(ret != M2M_SUCCESS) break;
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <hif_send+0x14a>
				}
				/*in case of success break */
                break;
 80032c4:	bf00      	nop
			}
		}
        
		if (dma_addr != 0)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d055      	beq.n	8003378 <hif_send+0x1fc>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 80032d0:	8b7b      	ldrh	r3, [r7, #26]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	837b      	strh	r3, [r7, #26]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f107 0118 	add.w	r1, r7, #24
 80032dc:	2208      	movs	r2, #8
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 f9ae 	bl	8004640 <nm_write_block>
 80032e4:	4603      	mov	r3, r0
 80032e6:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 80032e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d155      	bne.n	800339c <hif_send+0x220>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3308      	adds	r3, #8
 80032f4:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00f      	beq.n	800331c <hif_send+0x1a0>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	88ba      	ldrh	r2, [r7, #4]
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f001 f99c 	bl	8004640 <nm_write_block>
 8003308:	4603      	mov	r3, r0
 800330a:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 800330c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d145      	bne.n	80033a0 <hif_send+0x224>
				u32CurrAddr += u16CtrlBufSize;
 8003314:	88ba      	ldrh	r2, [r7, #4]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <hif_send+0x1d4>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
 8003322:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003324:	88bb      	ldrh	r3, [r7, #4]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4413      	add	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003336:	4618      	mov	r0, r3
 8003338:	f001 f982 	bl	8004640 <nm_write_block>
 800333c:	4603      	mov	r3, r0
 800333e:	77fb      	strb	r3, [r7, #31]
				if(M2M_SUCCESS != ret) goto ERR1;
 8003340:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d12d      	bne.n	80033a4 <hif_send+0x228>
				u32CurrAddr += u16DataSize;
 8003348:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4413      	add	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4619      	mov	r1, r3
 8003362:	f241 006c 	movw	r0, #4204	; 0x106c
 8003366:	f001 f8ee 	bl	8004546 <nm_write_reg>
 800336a:	4603      	mov	r3, r0
 800336c:	77fb      	strb	r3, [r7, #31]
			if(M2M_SUCCESS != ret) goto ERR1;
 800336e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <hif_send+0x20a>
 8003376:	e016      	b.n	80033a6 <hif_send+0x22a>
		}
		else
		{
			ret = hif_chip_sleep();
 8003378:	f7ff feba 	bl	80030f0 <hif_chip_sleep>
 800337c:	4603      	mov	r3, r0
 800337e:	77fb      	strb	r3, [r7, #31]
			M2M_PRINT("Failed to alloc rx size %d\r\n",ret);
			ret = M2M_ERR_MEM_ALLOC;
 8003380:	23fd      	movs	r3, #253	; 0xfd
 8003382:	77fb      	strb	r3, [r7, #31]
			goto ERR2;
 8003384:	e013      	b.n	80033ae <hif_send+0x232>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
 8003386:	f7ff feb3 	bl	80030f0 <hif_chip_sleep>
 800338a:	4603      	mov	r3, r0
 800338c:	77fb      	strb	r3, [r7, #31]
	return ret;
 800338e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003392:	e00e      	b.n	80033b2 <hif_send+0x236>
		if(M2M_SUCCESS != ret) goto ERR1;
 8003394:	bf00      	nop
 8003396:	e006      	b.n	80033a6 <hif_send+0x22a>
		if(M2M_SUCCESS != ret) goto ERR1;
 8003398:	bf00      	nop
 800339a:	e004      	b.n	80033a6 <hif_send+0x22a>
			if(M2M_SUCCESS != ret) goto ERR1;
 800339c:	bf00      	nop
 800339e:	e002      	b.n	80033a6 <hif_send+0x22a>
				if(M2M_SUCCESS != ret) goto ERR1;
 80033a0:	bf00      	nop
 80033a2:	e000      	b.n	80033a6 <hif_send+0x22a>
				if(M2M_SUCCESS != ret) goto ERR1;
 80033a4:	bf00      	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
 80033a6:	f7ff fe8d 	bl	80030c4 <hif_chip_sleep_sc>
 80033aa:	e000      	b.n	80033ae <hif_send+0x232>
		goto ERR2;
 80033ac:	bf00      	nop
ERR2:
	/*logical error*/
	return ret;
 80033ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	00150400 	.word	0x00150400

080033c0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
    uint16 temp;
	sint8 ret = M2M_SUCCESS;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 80033ca:	f107 030c 	add.w	r3, r7, #12
 80033ce:	4619      	mov	r1, r3
 80033d0:	f241 0070 	movw	r0, #4208	; 0x1070
 80033d4:	f001 f8a9 	bl	800452a <nm_read_reg_with_ret>
 80033d8:	4603      	mov	r3, r0
 80033da:	75fb      	strb	r3, [r7, #23]
	if(M2M_SUCCESS == ret)
 80033dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 80f8 	bne.w	80035d6 <hif_isr+0x216>
	{
		if(reg & 0x1)	/* New interrupt has been received */
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80ef 	beq.w	80035d0 <hif_isr+0x210>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7ff fc4a 	bl	8002c8c <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4619      	mov	r1, r3
 8003404:	f241 0070 	movw	r0, #4208	; 0x1070
 8003408:	f001 f89d 	bl	8004546 <nm_write_reg>
 800340c:	4603      	mov	r3, r0
 800340e:	75fb      	strb	r3, [r7, #23]
			if(ret != M2M_SUCCESS)goto ERR1;
 8003410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 80e0 	bne.w	80035da <hif_isr+0x21a>
			gstrHifCxt.u8HifRXDone = 1;
 800341a:	4b73      	ldr	r3, [pc, #460]	; (80035e8 <hif_isr+0x228>)
 800341c:	2201      	movs	r2, #1
 800341e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	b29b      	uxth	r3, r3
 8003426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342a:	82bb      	strh	r3, [r7, #20]
			if (size > 0) {
 800342c:	8abb      	ldrh	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80cb 	beq.w	80035ca <hif_isr+0x20a>
				uint32 address = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	607b      	str	r3, [r7, #4]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	4619      	mov	r1, r3
 800343c:	f241 0084 	movw	r0, #4228	; 0x1084
 8003440:	f001 f873 	bl	800452a <nm_read_reg_with_ret>
 8003444:	4603      	mov	r3, r0
 8003446:	75fb      	strb	r3, [r7, #23]
				if(M2M_SUCCESS != ret)
 8003448:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <hif_isr+0x98>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
 8003450:	2001      	movs	r0, #1
 8003452:	f7ff fc1b 	bl	8002c8c <nm_bsp_interrupt_ctrl>
					goto ERR1;
 8003456:	e0c1      	b.n	80035dc <hif_isr+0x21c>
				}
				gstrHifCxt.u32RxAddr = address;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a63      	ldr	r2, [pc, #396]	; (80035e8 <hif_isr+0x228>)
 800345c:	6053      	str	r3, [r2, #4]
				gstrHifCxt.u32RxSize = size;
 800345e:	8abb      	ldrh	r3, [r7, #20]
 8003460:	4a61      	ldr	r2, [pc, #388]	; (80035e8 <hif_isr+0x228>)
 8003462:	6093      	str	r3, [r2, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f107 0108 	add.w	r1, r7, #8
 800346a:	2204      	movs	r2, #4
 800346c:	4618      	mov	r0, r3
 800346e:	f001 f88b 	bl	8004588 <nm_read_block>
 8003472:	4603      	mov	r3, r0
 8003474:	75fb      	strb	r3, [r7, #23]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	b29b      	uxth	r3, r3
 800347a:	817b      	strh	r3, [r7, #10]
				if(M2M_SUCCESS != ret)
 800347c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <hif_isr+0xcc>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
 8003484:	2001      	movs	r0, #1
 8003486:	f7ff fc01 	bl	8002c8c <nm_bsp_interrupt_ctrl>
					goto ERR1;
 800348a:	e0a7      	b.n	80035dc <hif_isr+0x21c>
				}
				if(strHif.u16Length != size)
 800348c:	897b      	ldrh	r3, [r7, #10]
 800348e:	b29b      	uxth	r3, r3
 8003490:	8aba      	ldrh	r2, [r7, #20]
 8003492:	429a      	cmp	r2, r3
 8003494:	d00b      	beq.n	80034ae <hif_isr+0xee>
				{
					if((size - strHif.u16Length) > 4)
 8003496:	8abb      	ldrh	r3, [r7, #20]
 8003498:	897a      	ldrh	r2, [r7, #10]
 800349a:	b292      	uxth	r2, r2
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	2b04      	cmp	r3, #4
 80034a0:	dd05      	ble.n	80034ae <hif_isr+0xee>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7ff fbf2 	bl	8002c8c <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
 80034a8:	23fa      	movs	r3, #250	; 0xfa
 80034aa:	75fb      	strb	r3, [r7, #23]
						goto ERR1;
 80034ac:	e096      	b.n	80035dc <hif_isr+0x21c>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 80034ae:	7a3b      	ldrb	r3, [r7, #8]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d110      	bne.n	80034d8 <hif_isr+0x118>
				{
					if(gstrHifCxt.pfWifiCb)
 80034b6:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <hif_isr+0x228>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d078      	beq.n	80035b0 <hif_isr+0x1f0>
                    {
                        temp = (uint16)strHif.u16Length;
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80034c2:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <hif_isr+0x228>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	7a7a      	ldrb	r2, [r7, #9]
 80034c8:	b2d0      	uxtb	r0, r2
 80034ca:	8a7a      	ldrh	r2, [r7, #18]
 80034cc:	3a08      	subs	r2, #8
 80034ce:	b291      	uxth	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	4798      	blx	r3
 80034d6:	e06b      	b.n	80035b0 <hif_isr+0x1f0>
					{
						M2M_ERR("WIFI callback is not registered\n");
					}

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 80034d8:	7a3b      	ldrb	r3, [r7, #8]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d110      	bne.n	8003502 <hif_isr+0x142>
				{
					if(gstrHifCxt.pfIpCb)
 80034e0:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <hif_isr+0x228>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d063      	beq.n	80035b0 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80034ec:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <hif_isr+0x228>)
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	7a7a      	ldrb	r2, [r7, #9]
 80034f2:	b2d0      	uxtb	r0, r2
 80034f4:	8a7a      	ldrh	r2, [r7, #18]
 80034f6:	3a08      	subs	r2, #8
 80034f8:	b291      	uxth	r1, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	4798      	blx	r3
 8003500:	e056      	b.n	80035b0 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Scoket callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8003502:	7a3b      	ldrb	r3, [r7, #8]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b04      	cmp	r3, #4
 8003508:	d110      	bne.n	800352c <hif_isr+0x16c>
				{
					if(gstrHifCxt.pfOtaCb)
 800350a:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <hif_isr+0x228>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04e      	beq.n	80035b0 <hif_isr+0x1f0>
					{
                            temp = (uint16)strHif.u16Length;
 8003512:	897b      	ldrh	r3, [r7, #10]
 8003514:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <hif_isr+0x228>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	7a7a      	ldrb	r2, [r7, #9]
 800351c:	b2d0      	uxtb	r0, r2
 800351e:	8a7a      	ldrh	r2, [r7, #18]
 8003520:	3a08      	subs	r2, #8
 8003522:	b291      	uxth	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	3208      	adds	r2, #8
 8003528:	4798      	blx	r3
 800352a:	e041      	b.n	80035b0 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Ota callback is not registered\n");
                    }
				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 800352c:	7a3b      	ldrb	r3, [r7, #8]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b06      	cmp	r3, #6
 8003532:	d110      	bne.n	8003556 <hif_isr+0x196>
				{
					if(gstrHifCxt.pfCryptoCb)
 8003534:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <hif_isr+0x228>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d039      	beq.n	80035b0 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 800353c:	897b      	ldrh	r3, [r7, #10]
 800353e:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8003540:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <hif_isr+0x228>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	7a7a      	ldrb	r2, [r7, #9]
 8003546:	b2d0      	uxtb	r0, r2
 8003548:	8a7a      	ldrh	r2, [r7, #18]
 800354a:	3a08      	subs	r2, #8
 800354c:	b291      	uxth	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	4798      	blx	r3
 8003554:	e02c      	b.n	80035b0 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Crypto callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8003556:	7a3b      	ldrb	r3, [r7, #8]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b07      	cmp	r3, #7
 800355c:	d110      	bne.n	8003580 <hif_isr+0x1c0>
				{
					if(gstrHifCxt.pfSigmaCb)
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <hif_isr+0x228>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d024      	beq.n	80035b0 <hif_isr+0x1f0>
					{
                        temp = (uint16)strHif.u16Length;
 8003566:	897b      	ldrh	r3, [r7, #10]
 8003568:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <hif_isr+0x228>)
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	7a7a      	ldrb	r2, [r7, #9]
 8003570:	b2d0      	uxtb	r0, r2
 8003572:	8a7a      	ldrh	r2, [r7, #18]
 8003574:	3a08      	subs	r2, #8
 8003576:	b291      	uxth	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	3208      	adds	r2, #8
 800357c:	4798      	blx	r3
 800357e:	e017      	b.n	80035b0 <hif_isr+0x1f0>
					else
					{
						M2M_ERR("Sigma callback is not registered\n");
					}
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8003580:	7a3b      	ldrb	r3, [r7, #8]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b05      	cmp	r3, #5
 8003586:	d110      	bne.n	80035aa <hif_isr+0x1ea>
				{
				    if(gstrHifCxt.pfSslCb)
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <hif_isr+0x228>)
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00f      	beq.n	80035b0 <hif_isr+0x1f0>
					{
					    temp = (uint16)strHif.u16Length;
 8003590:	897b      	ldrh	r3, [r7, #10]
 8003592:	827b      	strh	r3, [r7, #18]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8003594:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <hif_isr+0x228>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	7a7a      	ldrb	r2, [r7, #9]
 800359a:	b2d0      	uxtb	r0, r2
 800359c:	8a7a      	ldrh	r2, [r7, #18]
 800359e:	3a08      	subs	r2, #8
 80035a0:	b291      	uxth	r1, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	3208      	adds	r2, #8
 80035a6:	4798      	blx	r3
 80035a8:	e002      	b.n	80035b0 <hif_isr+0x1f0>
					}
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
 80035aa:	23fa      	movs	r3, #250	; 0xfa
 80035ac:	75fb      	strb	r3, [r7, #23]
					goto ERR1;
 80035ae:	e015      	b.n	80035dc <hif_isr+0x21c>
				}
				if(gstrHifCxt.u8HifRXDone)
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <hif_isr+0x228>)
 80035b2:	789b      	ldrb	r3, [r3, #2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d010      	beq.n	80035dc <hif_isr+0x21c>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
 80035ba:	f7ff fd15 	bl	8002fe8 <hif_set_rx_done>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]
					if(ret != M2M_SUCCESS) goto ERR1;
 80035c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	e008      	b.n	80035dc <hif_isr+0x21c>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
 80035ca:	23fe      	movs	r3, #254	; 0xfe
 80035cc:	75fb      	strb	r3, [r7, #23]
				goto ERR1;
 80035ce:	e005      	b.n	80035dc <hif_isr+0x21c>
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
			ret = M2M_ERR_FAIL;
 80035d0:	23f4      	movs	r3, #244	; 0xf4
 80035d2:	75fb      	strb	r3, [r7, #23]
			goto ERR1;
 80035d4:	e002      	b.n	80035dc <hif_isr+0x21c>
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <hif_isr+0x21c>
			if(ret != M2M_SUCCESS)goto ERR1;
 80035da:	bf00      	nop
	}

ERR1:
	return ret;
 80035dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000278 	.word	0x20000278

080035ec <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 80035f2:	2300      	movs	r3, #0
 80035f4:	71fb      	strb	r3, [r7, #7]
	while (gstrHifCxt.u8Interrupt) {
 80035f6:	e00e      	b.n	8003616 <hif_handle_isr+0x2a>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <hif_handle_isr+0x40>)
 80035fa:	78db      	ldrb	r3, [r3, #3]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <hif_handle_isr+0x40>)
 8003604:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
 8003606:	f7ff fedb 	bl	80033c0 <hif_isr>
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
			if(ret == M2M_SUCCESS) {
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f7      	bne.n	8003606 <hif_handle_isr+0x1a>
	while (gstrHifCxt.u8Interrupt) {
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <hif_handle_isr+0x40>)
 8003618:	78db      	ldrb	r3, [r3, #3]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1eb      	bne.n	80035f8 <hif_handle_isr+0xc>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000278 	.word	0x20000278

08003630 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	4611      	mov	r1, r2
 800363c:	461a      	mov	r2, r3
 800363e:	460b      	mov	r3, r1
 8003640:	80fb      	strh	r3, [r7, #6]
 8003642:	4613      	mov	r3, r2
 8003644:	717b      	strb	r3, [r7, #5]
	sint8 ret = M2M_SUCCESS;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <hif_receive+0x2c>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <hif_receive+0x2c>
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <hif_receive+0x42>
	{
		if(isDone)
 800365c:	797b      	ldrb	r3, [r7, #5]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <hif_receive+0x3c>
		{
			/* set RX done */
			ret = hif_set_rx_done();
 8003662:	f7ff fcc1 	bl	8002fe8 <hif_set_rx_done>
 8003666:	4603      	mov	r3, r0
 8003668:	75fb      	strb	r3, [r7, #23]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
 800366a:	e03b      	b.n	80036e4 <hif_receive+0xb4>
			ret = M2M_ERR_FAIL;
 800366c:	23f4      	movs	r3, #244	; 0xf4
 800366e:	75fb      	strb	r3, [r7, #23]
		goto ERR1;
 8003670:	e038      	b.n	80036e4 <hif_receive+0xb4>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <hif_receive+0xc0>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d902      	bls.n	8003682 <hif_receive+0x52>
	{
		ret = M2M_ERR_FAIL;
 800367c:	23f4      	movs	r3, #244	; 0xf4
 800367e:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
 8003680:	e030      	b.n	80036e4 <hif_receive+0xb4>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <hif_receive+0xc0>)
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	429a      	cmp	r2, r3
 800368a:	d809      	bhi.n	80036a0 <hif_receive+0x70>
 800368c:	88fa      	ldrh	r2, [r7, #6]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	441a      	add	r2, r3
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <hif_receive+0xc0>)
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <hif_receive+0xc0>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	440b      	add	r3, r1
 800369c:	429a      	cmp	r2, r3
 800369e:	d902      	bls.n	80036a6 <hif_receive+0x76>
	{
		ret = M2M_ERR_FAIL;
 80036a0:	23f4      	movs	r3, #244	; 0xf4
 80036a2:	75fb      	strb	r3, [r7, #23]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
 80036a4:	e01e      	b.n	80036e4 <hif_receive+0xb4>
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	461a      	mov	r2, r3
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 ff6b 	bl	8004588 <nm_read_block>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]
	if(ret != M2M_SUCCESS)goto ERR1;
 80036b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d111      	bne.n	80036e2 <hif_receive+0xb2>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <hif_receive+0xc0>)
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <hif_receive+0xc0>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	441a      	add	r2, r3
 80036c8:	88f9      	ldrh	r1, [r7, #6]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	440b      	add	r3, r1
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d002      	beq.n	80036d8 <hif_receive+0xa8>
 80036d2:	797b      	ldrb	r3, [r7, #5]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <hif_receive+0xb4>
	{
		/* set RX done */
		ret = hif_set_rx_done();
 80036d8:	f7ff fc86 	bl	8002fe8 <hif_set_rx_done>
 80036dc:	4603      	mov	r3, r0
 80036de:	75fb      	strb	r3, [r7, #23]
 80036e0:	e000      	b.n	80036e4 <hif_receive+0xb4>
	if(ret != M2M_SUCCESS)goto ERR1;
 80036e2:	bf00      	nop
	}

ERR1:
	return ret;
 80036e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000278 	.word	0x20000278

080036f4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
	switch(u8Grp)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	3b01      	subs	r3, #1
 8003708:	2b06      	cmp	r3, #6
 800370a:	d82d      	bhi.n	8003768 <hif_register_cb+0x74>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <hif_register_cb+0x20>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003739 	.word	0x08003739
 8003718:	08003731 	.word	0x08003731
 800371c:	08003749 	.word	0x08003749
 8003720:	08003741 	.word	0x08003741
 8003724:	08003761 	.word	0x08003761
 8003728:	08003751 	.word	0x08003751
 800372c:	08003759 	.word	0x08003759
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <hif_register_cb+0x8c>)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6113      	str	r3, [r2, #16]
			break;
 8003736:	e01a      	b.n	800376e <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <hif_register_cb+0x8c>)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	60d3      	str	r3, [r2, #12]
			break;
 800373e:	e016      	b.n	800376e <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
 8003740:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <hif_register_cb+0x8c>)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6153      	str	r3, [r2, #20]
			break;
 8003746:	e012      	b.n	800376e <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <hif_register_cb+0x8c>)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	61d3      	str	r3, [r2, #28]
			break;
 800374e:	e00e      	b.n	800376e <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
 8003750:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <hif_register_cb+0x8c>)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6213      	str	r3, [r2, #32]
			break;
 8003756:	e00a      	b.n	800376e <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
 8003758:	4a09      	ldr	r2, [pc, #36]	; (8003780 <hif_register_cb+0x8c>)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6193      	str	r3, [r2, #24]
			break;
 800375e:	e006      	b.n	800376e <hif_register_cb+0x7a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
 8003760:	4a07      	ldr	r2, [pc, #28]	; (8003780 <hif_register_cb+0x8c>)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8003766:	e002      	b.n	800376e <hif_register_cb+0x7a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
 8003768:	23f4      	movs	r3, #244	; 0xf4
 800376a:	73fb      	strb	r3, [r7, #15]
			break;
 800376c:	bf00      	nop
	}
	return ret;
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000278 	.word	0x20000278

08003784 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b0aa      	sub	sp, #168	; 0xa8
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	603a      	str	r2, [r7, #0]
 800378e:	71fb      	strb	r3, [r7, #7]
 8003790:	460b      	mov	r3, r1
 8003792:	80bb      	strh	r3, [r7, #4]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	2b2c      	cmp	r3, #44	; 0x2c
 8003798:	d117      	bne.n	80037ca <m2m_wifi_cb+0x46>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 800379a:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800379e:	2300      	movs	r3, #0
 80037a0:	2204      	movs	r2, #4
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	f7ff ff44 	bl	8003630 <hif_receive>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 8162 	bne.w	8003a74 <m2m_wifi_cb+0x2f0>
		{
			if (gpfAppWifiCb)
 80037b0:	4bb2      	ldr	r3, [pc, #712]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 815d 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 80037ba:	4bb0      	ldr	r3, [pc, #704]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80037c2:	4611      	mov	r1, r2
 80037c4:	202c      	movs	r0, #44	; 0x2c
 80037c6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
 80037c8:	e154      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	2b1b      	cmp	r3, #27
 80037ce:	d117      	bne.n	8003800 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 80037d0:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80037d4:	2300      	movs	r3, #0
 80037d6:	2208      	movs	r2, #8
 80037d8:	6838      	ldr	r0, [r7, #0]
 80037da:	f7ff ff29 	bl	8003630 <hif_receive>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 8147 	bne.w	8003a74 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 80037e6:	4ba5      	ldr	r3, [pc, #660]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8142 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 80037f0:	4ba2      	ldr	r3, [pc, #648]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80037f8:	4611      	mov	r1, r2
 80037fa:	201b      	movs	r0, #27
 80037fc:	4798      	blx	r3
}
 80037fe:	e139      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d117      	bne.n	8003836 <m2m_wifi_cb+0xb2>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 8003806:	f107 0108 	add.w	r1, r7, #8
 800380a:	2301      	movs	r3, #1
 800380c:	2230      	movs	r2, #48	; 0x30
 800380e:	6838      	ldr	r0, [r7, #0]
 8003810:	f7ff ff0e 	bl	8003630 <hif_receive>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 812c 	bne.w	8003a74 <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 800381c:	4b97      	ldr	r3, [pc, #604]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8127 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 8003826:	4b95      	ldr	r3, [pc, #596]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f107 0208 	add.w	r2, r7, #8
 800382e:	4611      	mov	r1, r2
 8003830:	2006      	movs	r0, #6
 8003832:	4798      	blx	r3
}
 8003834:	e11e      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	2b0e      	cmp	r3, #14
 800383a:	f000 811b 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b32      	cmp	r3, #50	; 0x32
 8003842:	d117      	bne.n	8003874 <m2m_wifi_cb+0xf0>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 8003844:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003848:	2300      	movs	r3, #0
 800384a:	2214      	movs	r2, #20
 800384c:	6838      	ldr	r0, [r7, #0]
 800384e:	f7ff feef 	bl	8003630 <hif_receive>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	f040 810d 	bne.w	8003a74 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800385a:	4b88      	ldr	r3, [pc, #544]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8108 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 8003864:	4b85      	ldr	r3, [pc, #532]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800386c:	4611      	mov	r1, r2
 800386e:	2032      	movs	r0, #50	; 0x32
 8003870:	4798      	blx	r3
}
 8003872:	e0ff      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	2b2f      	cmp	r3, #47	; 0x2f
 8003878:	d11e      	bne.n	80038b8 <m2m_wifi_cb+0x134>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	2264      	movs	r2, #100	; 0x64
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fb6b 	bl	8002f5e <m2m_memset>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 8003888:	f107 0108 	add.w	r1, r7, #8
 800388c:	2300      	movs	r3, #0
 800388e:	2264      	movs	r2, #100	; 0x64
 8003890:	6838      	ldr	r0, [r7, #0]
 8003892:	f7ff fecd 	bl	8003630 <hif_receive>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	f040 80eb 	bne.w	8003a74 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800389e:	4b77      	ldr	r3, [pc, #476]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80e6 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 80038a8:	4b74      	ldr	r3, [pc, #464]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f107 0208 	add.w	r2, r7, #8
 80038b0:	4611      	mov	r1, r2
 80038b2:	202f      	movs	r0, #47	; 0x2f
 80038b4:	4798      	blx	r3
}
 80038b6:	e0dd      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b34      	cmp	r3, #52	; 0x34
 80038bc:	d115      	bne.n	80038ea <m2m_wifi_cb+0x166>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 80038be:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80038c2:	2300      	movs	r3, #0
 80038c4:	2204      	movs	r2, #4
 80038c6:	6838      	ldr	r0, [r7, #0]
 80038c8:	f7ff feb2 	bl	8003630 <hif_receive>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 80d0 	bne.w	8003a74 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 80038d4:	4b69      	ldr	r3, [pc, #420]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80cb 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 80038de:	4b67      	ldr	r3, [pc, #412]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2100      	movs	r1, #0
 80038e4:	2034      	movs	r0, #52	; 0x34
 80038e6:	4798      	blx	r3
}
 80038e8:	e0c4      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	2b11      	cmp	r3, #17
 80038ee:	d11e      	bne.n	800392e <m2m_wifi_cb+0x1aa>
		gu8scanInProgress = 0;
 80038f0:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <m2m_wifi_cb+0x2fc>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 80038f6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80038fa:	2300      	movs	r3, #0
 80038fc:	2204      	movs	r2, #4
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	f7ff fe96 	bl	8003630 <hif_receive>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 80b4 	bne.w	8003a74 <m2m_wifi_cb+0x2f0>
			gu8ChNum = strState.u8NumofCh;
 800390c:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8003910:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <m2m_wifi_cb+0x300>)
 8003912:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80ab 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 800391e:	4b57      	ldr	r3, [pc, #348]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003926:	4611      	mov	r1, r2
 8003928:	2011      	movs	r0, #17
 800392a:	4798      	blx	r3
}
 800392c:	e0a2      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b13      	cmp	r3, #19
 8003932:	d117      	bne.n	8003964 <m2m_wifi_cb+0x1e0>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 8003934:	f107 0108 	add.w	r1, r7, #8
 8003938:	2300      	movs	r3, #0
 800393a:	222c      	movs	r2, #44	; 0x2c
 800393c:	6838      	ldr	r0, [r7, #0]
 800393e:	f7ff fe77 	bl	8003630 <hif_receive>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 8095 	bne.w	8003a74 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8090 	beq.w	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 8003954:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f107 0208 	add.w	r2, r7, #8
 800395c:	4611      	mov	r1, r2
 800395e:	2013      	movs	r0, #19
 8003960:	4798      	blx	r3
}
 8003962:	e087      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d115      	bne.n	8003996 <m2m_wifi_cb+0x212>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800396a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800396e:	2300      	movs	r3, #0
 8003970:	2204      	movs	r2, #4
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	f7ff fe5c 	bl	8003630 <hif_receive>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d17a      	bne.n	8003a74 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d076      	beq.n	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800398e:	4611      	mov	r1, r2
 8003990:	2004      	movs	r0, #4
 8003992:	4798      	blx	r3
}
 8003994:	e06e      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	2b65      	cmp	r3, #101	; 0x65
 800399a:	d115      	bne.n	80039c8 <m2m_wifi_cb+0x244>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 800399c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80039a0:	2300      	movs	r3, #0
 80039a2:	2204      	movs	r2, #4
 80039a4:	6838      	ldr	r0, [r7, #0]
 80039a6:	f7ff fe43 	bl	8003630 <hif_receive>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d161      	bne.n	8003a74 <m2m_wifi_cb+0x2f0>
			if (gpfAppWifiCb)
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05d      	beq.n	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 80039b8:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80039c0:	4611      	mov	r1, r2
 80039c2:	2065      	movs	r0, #101	; 0x65
 80039c4:	4798      	blx	r3
}
 80039c6:	e055      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b09      	cmp	r3, #9
 80039cc:	d115      	bne.n	80039fa <m2m_wifi_cb+0x276>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 80039ce:	f107 0108 	add.w	r1, r7, #8
 80039d2:	2301      	movs	r3, #1
 80039d4:	2264      	movs	r2, #100	; 0x64
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	f7ff fe2a 	bl	8003630 <hif_receive>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d148      	bne.n	8003a74 <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 80039e2:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d044      	beq.n	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f107 0208 	add.w	r2, r7, #8
 80039f2:	4611      	mov	r1, r2
 80039f4:	2009      	movs	r0, #9
 80039f6:	4798      	blx	r3
}
 80039f8:	e03c      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b2a      	cmp	r3, #42	; 0x2a
 80039fe:	d115      	bne.n	8003a2c <m2m_wifi_cb+0x2a8>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 8003a00:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8003a04:	2301      	movs	r3, #1
 8003a06:	2204      	movs	r2, #4
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f7ff fe11 	bl	8003630 <hif_receive>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d12f      	bne.n	8003a74 <m2m_wifi_cb+0x2f0>
			if(gpfAppWifiCb)
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02b      	beq.n	8003a74 <m2m_wifi_cb+0x2f0>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003a24:	4611      	mov	r1, r2
 8003a26:	202a      	movs	r0, #42	; 0x2a
 8003a28:	4798      	blx	r3
}
 8003a2a:	e023      	b.n	8003a74 <m2m_wifi_cb+0x2f0>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d120      	bne.n	8003a74 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 8003a32:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003a36:	2300      	movs	r3, #0
 8003a38:	2208      	movs	r2, #8
 8003a3a:	6838      	ldr	r0, [r7, #0]
 8003a3c:	f7ff fdf8 	bl	8003630 <hif_receive>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <m2m_wifi_cb+0x2f0>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f103 0008 	add.w	r0, r3, #8
 8003a4c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003a4e:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003a52:	2301      	movs	r3, #1
 8003a54:	f7ff fdec 	bl	8003630 <hif_receive>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <m2m_wifi_cb+0x2f0>
				if(gpfAppWifiCb)
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <m2m_wifi_cb+0x2f0>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <m2m_wifi_cb+0x2f8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003a6e:	4611      	mov	r1, r2
 8003a70:	2020      	movs	r0, #32
 8003a72:	4798      	blx	r3
}
 8003a74:	bf00      	nop
 8003a76:	37a8      	adds	r7, #168	; 0xa8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200001c8 	.word	0x200001c8
 8003a80:	200001c5 	.word	0x200001c5
 8003a84:	200001c4 	.word	0x200001c4

08003a88 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, ((uint8)M2M_SSL_IND_CRL | (uint8)M2M_REQ_DATA_PKT), NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b090      	sub	sp, #64	; 0x40
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 8003a96:	2301      	movs	r3, #1
 8003a98:	72fb      	strb	r3, [r7, #11]

	if(param == NULL) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
 8003aa0:	23f4      	movs	r3, #244	; 0xf4
 8003aa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		goto _EXIT0;
 8003aa6:	e059      	b.n	8003b5c <m2m_wifi_init+0xd4>
	}

	gpfAppWifiCb = param->pfAppWifiCb;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <m2m_wifi_init+0xe0>)
 8003aae:	6013      	str	r3, [r2, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
 8003ab0:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <m2m_wifi_init+0xe4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
 8003ab6:	f107 030b 	add.w	r3, r7, #11
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fea8 	bl	8004810 <nm_drv_init>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 8003ac6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d145      	bne.n	8003b5a <m2m_wifi_init+0xd2>
	/* Initialize host interface module */
	ret = hif_init(NULL);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7ff fb38 	bl	8003144 <hif_init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 8003ada:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d136      	bne.n	8003b50 <m2m_wifi_init+0xc8>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
 8003ae2:	4923      	ldr	r1, [pc, #140]	; (8003b70 <m2m_wifi_init+0xe8>)
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff fe05 	bl	80036f4 <hif_register_cb>

	ret = nm_get_firmware_full_info(&strtmp);
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fdf0 	bl	80046d4 <nm_get_firmware_full_info>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	printf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 8003afa:	7c3b      	ldrb	r3, [r7, #16]
 8003afc:	4619      	mov	r1, r3
 8003afe:	7c7b      	ldrb	r3, [r7, #17]
 8003b00:	461a      	mov	r2, r3
 8003b02:	7cbb      	ldrb	r3, [r7, #18]
 8003b04:	4618      	mov	r0, r3
 8003b06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4819      	ldr	r0, [pc, #100]	; (8003b74 <m2m_wifi_init+0xec>)
 8003b0e:	f001 fd87 	bl	8005620 <iprintf>
	printf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 8003b12:	f107 030c 	add.w	r3, r7, #12
 8003b16:	f103 0216 	add.w	r2, r3, #22
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	330a      	adds	r3, #10
 8003b20:	4619      	mov	r1, r3
 8003b22:	4815      	ldr	r0, [pc, #84]	; (8003b78 <m2m_wifi_init+0xf0>)
 8003b24:	f001 fd7c 	bl	8005620 <iprintf>
	printf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	7d3b      	ldrb	r3, [r7, #20]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	7d7b      	ldrb	r3, [r7, #21]
 8003b32:	4812      	ldr	r0, [pc, #72]	; (8003b7c <m2m_wifi_init+0xf4>)
 8003b34:	f001 fd74 	bl	8005620 <iprintf>
	printf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 8003b38:	2304      	movs	r3, #4
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	2113      	movs	r1, #19
 8003b3e:	4810      	ldr	r0, [pc, #64]	; (8003b80 <m2m_wifi_init+0xf8>)
 8003b40:	f001 fd6e 	bl	8005620 <iprintf>
	printf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 8003b44:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <m2m_wifi_init+0xfc>)
 8003b46:	4910      	ldr	r1, [pc, #64]	; (8003b88 <m2m_wifi_init+0x100>)
 8003b48:	4810      	ldr	r0, [pc, #64]	; (8003b8c <m2m_wifi_init+0x104>)
 8003b4a:	f001 fd69 	bl	8005620 <iprintf>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmware Version\n");
	}

	goto _EXIT0;
 8003b4e:	e005      	b.n	8003b5c <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
 8003b50:	bf00      	nop

_EXIT1:
	nm_drv_deinit(NULL);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f000 febc 	bl	80048d0 <nm_drv_deinit>
 8003b58:	e000      	b.n	8003b5c <m2m_wifi_init+0xd4>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 8003b5a:	bf00      	nop
_EXIT0:
	return ret;
 8003b5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3738      	adds	r7, #56	; 0x38
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	200001c8 	.word	0x200001c8
 8003b6c:	200001c5 	.word	0x200001c5
 8003b70:	08003785 	.word	0x08003785
 8003b74:	080065b0 	.word	0x080065b0
 8003b78:	080065d8 	.word	0x080065d8
 8003b7c:	080065f4 	.word	0x080065f4
 8003b80:	08006618 	.word	0x08006618
 8003b84:	08006630 	.word	0x08006630
 8003b88:	0800663c 	.word	0x0800663c
 8003b8c:	08006648 	.word	0x08006648

08003b90 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
 8003b98:	f7ff fd28 	bl	80035ec <hif_handle_isr>
 8003b9c:	4603      	mov	r3, r0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	72fb      	strb	r3, [r7, #11]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	72bb      	strb	r3, [r7, #10]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
 8003bb8:	7aba      	ldrb	r2, [r7, #10]
 8003bba:	7af9      	ldrb	r1, [r7, #11]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	8b3b      	ldrh	r3, [r7, #24]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f805 	bl	8003bd6 <m2m_wifi_connect_sc>
 8003bcc:	4603      	mov	r3, r0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b0aa      	sub	sp, #168	; 0xa8
 8003bda:	af04      	add	r7, sp, #16
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	72fb      	strb	r3, [r7, #11]
 8003be4:	4613      	mov	r3, r2
 8003be6:	72bb      	strb	r3, [r7, #10]
	sint8				ret = M2M_SUCCESS;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
 8003bee:	7abb      	ldrb	r3, [r7, #10]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d053      	beq.n	8003c9c <m2m_wifi_connect_sc+0xc6>
	{
		if(pvAuthInfo == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <m2m_wifi_connect_sc+0x2c>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
 8003bfa:	23f4      	movs	r3, #244	; 0xf4
 8003bfc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 8003c00:	e113      	b.n	8003e2a <m2m_wifi_connect_sc+0x254>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
 8003c02:	7abb      	ldrb	r3, [r7, #10]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d149      	bne.n	8003c9c <m2m_wifi_connect_sc+0xc6>
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff f9c5 	bl	8002f98 <m2m_strlen>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	d143      	bne.n	8003c9c <m2m_wifi_connect_sc+0xc6>
		{
			uint8 i = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			uint8* pu8Psk = (uint8*)pvAuthInfo;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			while(i < (M2M_MAX_PSK_LEN-1))
 8003c20:	e038      	b.n	8003c94 <m2m_wifi_connect_sc+0xbe>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 8003c22:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003c26:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c2a:	4413      	add	r3, r2
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b2f      	cmp	r3, #47	; 0x2f
 8003c30:	d927      	bls.n	8003c82 <m2m_wifi_connect_sc+0xac>
 8003c32:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003c36:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c3a:	4413      	add	r3, r2
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b39      	cmp	r3, #57	; 0x39
 8003c40:	d907      	bls.n	8003c52 <m2m_wifi_connect_sc+0x7c>
 8003c42:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003c46:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c4a:	4413      	add	r3, r2
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d917      	bls.n	8003c82 <m2m_wifi_connect_sc+0xac>
 8003c52:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003c56:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c5a:	4413      	add	r3, r2
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b46      	cmp	r3, #70	; 0x46
 8003c60:	d907      	bls.n	8003c72 <m2m_wifi_connect_sc+0x9c>
 8003c62:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003c66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c6a:	4413      	add	r3, r2
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b60      	cmp	r3, #96	; 0x60
 8003c70:	d907      	bls.n	8003c82 <m2m_wifi_connect_sc+0xac>
 8003c72:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003c76:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b66      	cmp	r3, #102	; 0x66
 8003c80:	d903      	bls.n	8003c8a <m2m_wifi_connect_sc+0xb4>
				{
					M2M_ERR("Invalid Key\n");
					ret = M2M_ERR_FAIL;
 8003c82:	23f4      	movs	r3, #244	; 0xf4
 8003c84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					goto ERR1;
 8003c88:	e0cf      	b.n	8003e2a <m2m_wifi_connect_sc+0x254>
				}
				i++;
 8003c8a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			while(i < (M2M_MAX_PSK_LEN-1))
 8003c94:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003c98:	2b3f      	cmp	r3, #63	; 0x3f
 8003c9a:	d9c2      	bls.n	8003c22 <m2m_wifi_connect_sc+0x4c>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
 8003c9c:	7afb      	ldrb	r3, [r7, #11]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <m2m_wifi_connect_sc+0xd2>
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d903      	bls.n	8003cb0 <m2m_wifi_connect_sc+0xda>
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
 8003ca8:	23f4      	movs	r3, #244	; 0xf4
 8003caa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
 8003cae:	e0bc      	b.n	8003e2a <m2m_wifi_connect_sc+0x254>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
 8003cb0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <m2m_wifi_connect_sc+0xea>
 8003cb8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8003cbc:	2b0e      	cmp	r3, #14
 8003cbe:	d907      	bls.n	8003cd0 <m2m_wifi_connect_sc+0xfa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
 8003cc0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8003cc4:	2bff      	cmp	r3, #255	; 0xff
 8003cc6:	d003      	beq.n	8003cd0 <m2m_wifi_connect_sc+0xfa>
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
 8003cc8:	23f4      	movs	r3, #244	; 0xf4
 8003cca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 8003cce:	e0ac      	b.n	8003e2a <m2m_wifi_connect_sc+0x254>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
 8003cd0:	7afa      	ldrb	r2, [r7, #11]
 8003cd2:	f107 0314 	add.w	r3, r7, #20
 8003cd6:	3346      	adds	r3, #70	; 0x46
 8003cd8:	68f9      	ldr	r1, [r7, #12]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff f91f 	bl	8002f1e <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
 8003ce0:	7afb      	ldrb	r3, [r7, #11]
 8003ce2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003ce6:	4413      	add	r3, r2
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f803 2c3e 	strb.w	r2, [r3, #-62]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
 8003cee:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8003cf2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
 8003cf6:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	pstrAuthInfo->u8SecType		= u8SecType;
 8003d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d14:	7aba      	ldrb	r2, [r7, #10]
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if(u8SecType == M2M_WIFI_SEC_WEP)
 8003d1a:	7abb      	ldrb	r3, [r7, #10]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d143      	bne.n	8003da8 <m2m_wifi_connect_sc+0x1d2>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
 8003d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
 8003d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d3c:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
 8003d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d903      	bls.n	8003d50 <m2m_wifi_connect_sc+0x17a>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
 8003d48:	23f4      	movs	r3, #244	; 0xf4
 8003d4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 8003d4e:	e06c      	b.n	8003e2a <m2m_wifi_connect_sc+0x254>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
 8003d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d54:	785b      	ldrb	r3, [r3, #1]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d5e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
 8003d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	2b0a      	cmp	r3, #10
 8003d68:	d008      	beq.n	8003d7c <m2m_wifi_connect_sc+0x1a6>
 8003d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b1a      	cmp	r3, #26
 8003d72:	d003      	beq.n	8003d7c <m2m_wifi_connect_sc+0x1a6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
 8003d74:	23f4      	movs	r3, #244	; 0xf4
 8003d76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 8003d7a:	e056      	b.n	8003e2a <m2m_wifi_connect_sc+0x254>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
 8003d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d80:	1c98      	adds	r0, r3, #2
 8003d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d86:	1c99      	adds	r1, r3, #2
 8003d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f7ff f8c5 	bl	8002f1e <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
 8003d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003da0:	4413      	add	r3, r2
 8003da2:	2200      	movs	r2, #0
 8003da4:	709a      	strb	r2, [r3, #2]
 8003da6:	e030      	b.n	8003e0a <m2m_wifi_connect_sc+0x234>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
 8003da8:	7abb      	ldrb	r3, [r7, #10]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d11b      	bne.n	8003de6 <m2m_wifi_connect_sc+0x210>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff f8f2 	bl	8002f98 <m2m_strlen>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
 8003dba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <m2m_wifi_connect_sc+0x1f4>
 8003dc2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d903      	bls.n	8003dd2 <m2m_wifi_connect_sc+0x1fc>
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
 8003dca:	23f4      	movs	r3, #244	; 0xf4
 8003dcc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			goto ERR1;
 8003dd0:	e02b      	b.n	8003e2a <m2m_wifi_connect_sc+0x254>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
 8003dd2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003dd6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003dda:	3301      	adds	r3, #1
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	f7ff f89d 	bl	8002f1e <m2m_memcpy>
 8003de4:	e011      	b.n	8003e0a <m2m_wifi_connect_sc+0x234>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
 8003de6:	7abb      	ldrb	r3, [r7, #10]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d107      	bne.n	8003dfc <m2m_wifi_connect_sc+0x226>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
 8003dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003df0:	223e      	movs	r2, #62	; 0x3e
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff f892 	bl	8002f1e <m2m_memcpy>
 8003dfa:	e006      	b.n	8003e0a <m2m_wifi_connect_sc+0x234>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
 8003dfc:	7abb      	ldrb	r3, [r7, #10]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d003      	beq.n	8003e0a <m2m_wifi_connect_sc+0x234>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
 8003e02:	23f4      	movs	r3, #244	; 0xf4
 8003e04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		goto ERR1;
 8003e08:	e00f      	b.n	8003e2a <m2m_wifi_connect_sc+0x254>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
 8003e0a:	f107 0214 	add.w	r2, r7, #20
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9302      	str	r3, [sp, #8]
 8003e12:	2300      	movs	r3, #0
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	236c      	movs	r3, #108	; 0x6c
 8003e1c:	2128      	movs	r1, #40	; 0x28
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f7ff f9ac 	bl	800317c <hif_send>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

ERR1:
	return ret;
 8003e2a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3798      	adds	r7, #152	; 0x98
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <m2m_wifi_request_scan>:
	strScanRegion.u16ScanRegion = ScanRegion;
	s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_REGION, (uint8*)&strScanRegion, sizeof(tstrM2MScanRegion),NULL, 0,0);
	return s8Ret;
}
sint8 m2m_wifi_request_scan(uint8 ch)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af04      	add	r7, sp, #16
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
	sint8	s8Ret = M2M_SUCCESS;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]

	if(!gu8scanInProgress)
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <m2m_wifi_request_scan+0x78>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d124      	bne.n	8003eaa <m2m_wifi_request_scan+0x62>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <m2m_wifi_request_scan+0x24>
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	2b0e      	cmp	r3, #14
 8003e6a:	d902      	bls.n	8003e72 <m2m_wifi_request_scan+0x2a>
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	2bff      	cmp	r3, #255	; 0xff
 8003e70:	d118      	bne.n	8003ea4 <m2m_wifi_request_scan+0x5c>
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	723b      	strb	r3, [r7, #8]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 8003e76:	f107 0208 	add.w	r2, r7, #8
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9302      	str	r3, [sp, #8]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	2300      	movs	r3, #0
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2304      	movs	r3, #4
 8003e88:	2110      	movs	r1, #16
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	f7ff f976 	bl	800317c <hif_send>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
			if(s8Ret == M2M_SUCCESS)
 8003e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <m2m_wifi_request_scan+0x68>
			{
				gu8scanInProgress = 1;
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <m2m_wifi_request_scan+0x78>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
		{
 8003ea2:	e005      	b.n	8003eb0 <m2m_wifi_request_scan+0x68>
			}
		}
		else
		{
			s8Ret = M2M_ERR_INVALID_ARG;
 8003ea4:	23f1      	movs	r3, #241	; 0xf1
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e003      	b.n	8003eb2 <m2m_wifi_request_scan+0x6a>
		}
	}
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
 8003eaa:	23f2      	movs	r3, #242	; 0xf2
 8003eac:	73fb      	strb	r3, [r7, #15]
 8003eae:	e000      	b.n	8003eb2 <m2m_wifi_request_scan+0x6a>
		{
 8003eb0:	bf00      	nop
	}
	return s8Ret;
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200001c5 	.word	0x200001c5

08003ec4 <m2m_wifi_req_scan_result>:
			 which mean if large delay occur between the scan request and the scan result request,
			 the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
	tstrM2mReqScanResult strReqScanRlt;
	strReqScanRlt.u8Index = index;
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	723b      	strb	r3, [r7, #8]
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 8003ed6:	f107 0208 	add.w	r2, r7, #8
 8003eda:	2300      	movs	r3, #0
 8003edc:	9302      	str	r3, [sp, #8]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	2112      	movs	r1, #18
 8003eea:	2001      	movs	r0, #1
 8003eec:	f7ff f946 	bl	800317c <hif_send>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	73fb      	strb	r3, [r7, #15]
	return ret;
 8003ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <m2m_wifi_get_num_ap_found>:
@warning     That function need to be called in the wifi_cb in M2M_WIFI_RESP_SCAN_DONE,
			 calling that function in any other place will return undefined/undated numbers.
			 Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
	return gu8ChNum;
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <m2m_wifi_get_num_ap_found+0x14>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b2db      	uxtb	r3, r3
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	200001c4 	.word	0x200001c4

08003f18 <chip_apply_conf>:

#define TIMEOUT						(20000) // ITCO: replace (0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]
	uint32 val32 = u32Conf;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2e:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
 8003f30:	6939      	ldr	r1, [r7, #16]
 8003f32:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 8003f36:	f000 fb06 	bl	8004546 <nm_write_reg>
		if(val32 != 0) {
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <chip_apply_conf+0x50>
			uint32 reg = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 8003f4e:	f000 faec 	bl	800452a <nm_read_reg_with_ret>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]
			if(ret == M2M_SUCCESS) {
 8003f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e8      	bne.n	8003f30 <chip_apply_conf+0x18>
				if(reg == val32)
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d002      	beq.n	8003f6c <chip_apply_conf+0x54>
		nm_write_reg(rNMI_GP_REG_1, val32);
 8003f66:	e7e3      	b.n	8003f30 <chip_apply_conf+0x18>
					break;
			}
		} else {
			break;
 8003f68:	bf00      	nop
 8003f6a:	e000      	b.n	8003f6e <chip_apply_conf+0x56>
					break;
 8003f6c:	bf00      	nop
		}
	} while(1);

	return M2M_SUCCESS;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
 8003f82:	2300      	movs	r3, #0
 8003f84:	71fb      	strb	r3, [r7, #7]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 8003f86:	463b      	mov	r3, r7
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f241 4008 	movw	r0, #5128	; 0x1408
 8003f8e:	f000 facc 	bl	800452a <nm_read_reg_with_ret>
 8003f92:	4603      	mov	r3, r0
 8003f94:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d12b      	bne.n	8003ff6 <enable_interrupts+0x7e>

	reg |= ((uint32) 1 << 8);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f241 4008 	movw	r0, #5128	; 0x1408
 8003fae:	f000 faca 	bl	8004546 <nm_write_reg>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11d      	bne.n	8003ffa <enable_interrupts+0x82>

	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003fc6:	f000 fab0 	bl	800452a <nm_read_reg_with_ret>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d113      	bne.n	8003ffe <enable_interrupts+0x86>

	reg |= ((uint32) 1 << 16);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003fe6:	f000 faae 	bl	8004546 <nm_write_reg>
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
	if (M2M_SUCCESS != ret) goto ERR1;
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	e004      	b.n	8004000 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <enable_interrupts+0x88>
	if (M2M_SUCCESS != ret) goto ERR1;
 8003ffe:	bf00      	nop
ERR1:
	return ret;
 8004000:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
 8004012:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <nmi_get_chipid+0xcc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d157      	bne.n	80040ca <nmi_get_chipid+0xbe>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800401a:	492f      	ldr	r1, [pc, #188]	; (80040d8 <nmi_get_chipid+0xcc>)
 800401c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004020:	f000 fa83 	bl	800452a <nm_read_reg_with_ret>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <nmi_get_chipid+0x28>
			chipid = 0;
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <nmi_get_chipid+0xcc>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
			return 0;
 8004030:	2300      	movs	r3, #0
 8004032:	e04c      	b.n	80040ce <nmi_get_chipid+0xc2>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	4619      	mov	r1, r3
 8004038:	f241 30f4 	movw	r0, #5108	; 0x13f4
 800403c:	f000 fa75 	bl	800452a <nm_read_reg_with_ret>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <nmi_get_chipid+0x44>
			chipid = 0;
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <nmi_get_chipid+0xcc>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
			return 0;
 800404c:	2300      	movs	r3, #0
 800404e:	e03e      	b.n	80040ce <nmi_get_chipid+0xc2>
		}

		if (chipid == 0x1002a0)  {
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <nmi_get_chipid+0xcc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a21      	ldr	r2, [pc, #132]	; (80040dc <nmi_get_chipid+0xd0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d106      	bne.n	8004068 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d028      	beq.n	80040b2 <nmi_get_chipid+0xa6>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
 8004060:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <nmi_get_chipid+0xcc>)
 8004062:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <nmi_get_chipid+0xd4>)
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	e024      	b.n	80040b2 <nmi_get_chipid+0xa6>
			}
		} else if(chipid == 0x1002b0) {
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <nmi_get_chipid+0xcc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <nmi_get_chipid+0xd8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10d      	bne.n	800408e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d01c      	beq.n	80040b2 <nmi_get_chipid+0xa6>
			} else if(rfrevid == 4) { /* 1002B1 */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b04      	cmp	r3, #4
 800407c:	d103      	bne.n	8004086 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
 800407e:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <nmi_get_chipid+0xcc>)
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <nmi_get_chipid+0xdc>)
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e015      	b.n	80040b2 <nmi_get_chipid+0xa6>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <nmi_get_chipid+0xcc>)
 8004088:	4a18      	ldr	r2, [pc, #96]	; (80040ec <nmi_get_chipid+0xe0>)
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e011      	b.n	80040b2 <nmi_get_chipid+0xa6>
			}
		}else if(chipid == 0x1000F0) {
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <nmi_get_chipid+0xcc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <nmi_get_chipid+0xe4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10c      	bne.n	80040b2 <nmi_get_chipid+0xa6>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 8004098:	490f      	ldr	r1, [pc, #60]	; (80040d8 <nmi_get_chipid+0xcc>)
 800409a:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 800409e:	f000 fa44 	bl	800452a <nm_read_reg_with_ret>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <nmi_get_chipid+0xa6>
			chipid = 0;
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <nmi_get_chipid+0xcc>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
			return 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e00d      	b.n	80040ce <nmi_get_chipid+0xc2>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <nmi_get_chipid+0xcc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80040ba:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <nmi_get_chipid+0xcc>)
 80040bc:	6013      	str	r3, [r2, #0]
		chipid |= 0x050000;
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <nmi_get_chipid+0xcc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <nmi_get_chipid+0xcc>)
 80040c8:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
 80040ca:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <nmi_get_chipid+0xcc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200001cc 	.word	0x200001cc
 80040dc:	001002a0 	.word	0x001002a0
 80040e0:	001002a1 	.word	0x001002a1
 80040e4:	001002b0 	.word	0x001002b0
 80040e8:	001002b1 	.word	0x001002b1
 80040ec:	001002b2 	.word	0x001002b2
 80040f0:	001000f0 	.word	0x001000f0

080040f4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
 80040fa:	2300      	movs	r3, #0
 80040fc:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 80040fe:	463b      	mov	r3, r7
 8004100:	4619      	mov	r1, r3
 8004102:	2010      	movs	r0, #16
 8004104:	f000 fa11 	bl	800452a <nm_read_reg_with_ret>
 8004108:	4603      	mov	r3, r0
 800410a:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS) goto ERR1;
 800410c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d144      	bne.n	800419e <chip_sleep+0xaa>
		if((reg & NBIT0) == 0) break;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d000      	beq.n	8004120 <chip_sleep+0x2c>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
 800411e:	e7ee      	b.n	80040fe <chip_sleep+0xa>
		if((reg & NBIT0) == 0) break;
 8004120:	bf00      	nop
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 8004122:	463b      	mov	r3, r7
 8004124:	4619      	mov	r1, r3
 8004126:	2001      	movs	r0, #1
 8004128:	f000 f9ff 	bl	800452a <nm_read_reg_with_ret>
 800412c:	4603      	mov	r3, r0
 800412e:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 8004130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d134      	bne.n	80041a2 <chip_sleep+0xae>
	if(reg & NBIT1)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00e      	beq.n	8004160 <chip_sleep+0x6c>
	{
		reg &=~NBIT1;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f023 0302 	bic.w	r3, r3, #2
 8004148:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	4619      	mov	r1, r3
 800414e:	2001      	movs	r0, #1
 8004150:	f000 f9f9 	bl	8004546 <nm_write_reg>
 8004154:	4603      	mov	r3, r0
 8004156:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 8004158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d122      	bne.n	80041a6 <chip_sleep+0xb2>
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 8004160:	463b      	mov	r3, r7
 8004162:	4619      	mov	r1, r3
 8004164:	200b      	movs	r0, #11
 8004166:	f000 f9e0 	bl	800452a <nm_read_reg_with_ret>
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
	if(ret != M2M_SUCCESS)goto ERR1;
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d119      	bne.n	80041aa <chip_sleep+0xb6>
	if(reg & NBIT0)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <chip_sleep+0xb8>
	{
		reg &= ~NBIT0;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4619      	mov	r1, r3
 800418c:	200b      	movs	r0, #11
 800418e:	f000 f9da 	bl	8004546 <nm_write_reg>
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
		if(ret != M2M_SUCCESS)goto ERR1;
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	2b00      	cmp	r3, #0
 800419c:	e006      	b.n	80041ac <chip_sleep+0xb8>
		if(ret != M2M_SUCCESS) goto ERR1;
 800419e:	bf00      	nop
 80041a0:	e004      	b.n	80041ac <chip_sleep+0xb8>
	if(ret != M2M_SUCCESS)goto ERR1;
 80041a2:	bf00      	nop
 80041a4:	e002      	b.n	80041ac <chip_sleep+0xb8>
		if(ret != M2M_SUCCESS)goto ERR1;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <chip_sleep+0xb8>
	if(ret != M2M_SUCCESS)goto ERR1;
 80041aa:	bf00      	nop
	}

ERR1:
	return ret;
 80041ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <chip_wake>:
sint8 chip_wake(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	2300      	movs	r3, #0
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	200b      	movs	r0, #11
 80041d4:	f000 f9a9 	bl	800452a <nm_read_reg_with_ret>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d14e      	bne.n	8004282 <chip_wake+0xca>

	if(!(reg & NBIT0))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10c      	bne.n	8004208 <chip_wake+0x50>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	4619      	mov	r1, r3
 80041f6:	200b      	movs	r0, #11
 80041f8:	f000 f9a5 	bl	8004546 <nm_write_reg>
 80041fc:	4603      	mov	r3, r0
 80041fe:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8004200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d13e      	bne.n	8004286 <chip_wake+0xce>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	4619      	mov	r1, r3
 800420c:	2001      	movs	r0, #1
 800420e:	f000 f98c 	bl	800452a <nm_read_reg_with_ret>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8004216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d135      	bne.n	800428a <chip_wake+0xd2>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10c      	bne.n	8004242 <chip_wake+0x8a>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f043 0302 	orr.w	r3, r3, #2
 800422e:	4619      	mov	r1, r3
 8004230:	2001      	movs	r0, #1
 8004232:	f000 f988 	bl	8004546 <nm_write_reg>
 8004236:	4603      	mov	r3, r0
 8004238:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800423a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d125      	bne.n	800428e <chip_wake+0xd6>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 8004242:	463b      	mov	r3, r7
 8004244:	4619      	mov	r1, r3
 8004246:	200f      	movs	r0, #15
 8004248:	f000 f96f 	bl	800452a <nm_read_reg_with_ret>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]
		if(ret != M2M_SUCCESS) {
 8004250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11c      	bne.n	8004292 <chip_wake+0xda>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <chip_wake+0xc2>
			break;
		}
		nm_bsp_sleep(2);
 8004262:	2002      	movs	r0, #2
 8004264:	f7fe fcd4 	bl	8002c10 <nm_bsp_sleep>
		trials++;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3301      	adds	r3, #1
 800426c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d9e6      	bls.n	8004242 <chip_wake+0x8a>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 8004274:	23fc      	movs	r3, #252	; 0xfc
 8004276:	73fb      	strb	r3, [r7, #15]
			goto _WAKE_EXIT;
 8004278:	e00c      	b.n	8004294 <chip_wake+0xdc>
			break;
 800427a:	bf00      	nop
		}
	}while(1);

	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
 800427c:	f000 f93a 	bl	80044f4 <nm_bus_reset>
 8004280:	e008      	b.n	8004294 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8004282:	bf00      	nop
 8004284:	e006      	b.n	8004294 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8004286:	bf00      	nop
 8004288:	e004      	b.n	8004294 <chip_wake+0xdc>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <chip_wake+0xdc>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <chip_wake+0xdc>
			goto _WAKE_EXIT;
 8004292:	bf00      	nop

_WAKE_EXIT:
	return ret;
 8004294:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 80042aa:	2300      	movs	r3, #0
 80042ac:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
	uint32 u32GpReg1 = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
 80042ba:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <wait_for_bootrom+0x118>)
 80042bc:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 80042c2:	f241 0014 	movw	r0, #4116	; 0x1014
 80042c6:	f000 f924 	bl	8004512 <nm_read_reg>
 80042ca:	61b8      	str	r0, [r7, #24]
		if (reg & 0x80000000) {
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db03      	blt.n	80042da <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
 80042d2:	2001      	movs	r0, #1
 80042d4:	f7fe fc9c 	bl	8002c10 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
 80042d8:	e7f3      	b.n	80042c2 <wait_for_bootrom+0x22>
			break;
 80042da:	bf00      	nop
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 80042dc:	4837      	ldr	r0, [pc, #220]	; (80043bc <wait_for_bootrom+0x11c>)
 80042de:	f000 f918 	bl	8004512 <nm_read_reg>
 80042e2:	61b8      	str	r0, [r7, #24]
	reg &= 0x1;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d119      	bne.n	8004326 <wait_for_bootrom+0x86>
	{
		reg = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
 80042f6:	e012      	b.n	800431e <wait_for_bootrom+0x7e>
		{
			nm_bsp_sleep(1);
 80042f8:	2001      	movs	r0, #1
 80042fa:	f7fe fc89 	bl	8002c10 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
 80042fe:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8004302:	f000 f906 	bl	8004512 <nm_read_reg>
 8004306:	61b8      	str	r0, [r7, #24]

			if(++cnt > (uint32)TIMEOUT)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3301      	adds	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004314:	4293      	cmp	r3, r2
 8004316:	d902      	bls.n	800431e <wait_for_bootrom+0x7e>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
 8004318:	23fb      	movs	r3, #251	; 0xfb
 800431a:	77fb      	strb	r3, [r7, #31]
				goto ERR2;
 800431c:	e045      	b.n	80043aa <wait_for_bootrom+0x10a>
		while(reg != M2M_FINISH_BOOT_ROM)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <wait_for_bootrom+0x120>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d1e8      	bne.n	80042f8 <wait_for_bootrom+0x58>
			}
		}
	}

	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d10a      	bne.n	8004342 <wait_for_bootrom+0xa2>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 800432c:	4925      	ldr	r1, [pc, #148]	; (80043c4 <wait_for_bootrom+0x124>)
 800432e:	4826      	ldr	r0, [pc, #152]	; (80043c8 <wait_for_bootrom+0x128>)
 8004330:	f000 f909 	bl	8004546 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
 8004334:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004338:	f241 008c 	movw	r0, #4236	; 0x108c
 800433c:	f000 f903 	bl	8004546 <nm_write_reg>
 8004340:	e01c      	b.n	800437c <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d109      	bne.n	800435c <wait_for_bootrom+0xbc>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 8004348:	491e      	ldr	r1, [pc, #120]	; (80043c4 <wait_for_bootrom+0x124>)
 800434a:	481f      	ldr	r0, [pc, #124]	; (80043c8 <wait_for_bootrom+0x128>)
 800434c:	f000 f8fb 	bl	8004546 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
 8004350:	2100      	movs	r1, #0
 8004352:	f241 008c 	movw	r0, #4236	; 0x108c
 8004356:	f000 f8f6 	bl	8004546 <nm_write_reg>
 800435a:	e00f      	b.n	800437c <wait_for_bootrom+0xdc>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d107      	bne.n	8004372 <wait_for_bootrom+0xd2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 8004362:	2380      	movs	r3, #128	; 0x80
 8004364:	613b      	str	r3, [r7, #16]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	f241 008c 	movw	r0, #4236	; 0x108c
 800436c:	f000 f8eb 	bl	8004546 <nm_write_reg>
 8004370:	e004      	b.n	800437c <wait_for_bootrom+0xdc>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	f241 008c 	movw	r0, #4236	; 0x108c
 8004378:	f000 f8e5 	bl	8004546 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 800437c:	f7ff fe46 	bl	800400c <nmi_get_chipid>
 8004380:	4603      	mov	r3, r0
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 800438a:	d306      	bcc.n	800439a <wait_for_bootrom+0xfa>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f043 0302 	orr.w	r3, r3, #2
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fdc0 	bl	8003f18 <chip_apply_conf>
 8004398:	e002      	b.n	80043a0 <wait_for_bootrom+0x100>
	} else {
		chip_apply_conf(u32GpReg1);
 800439a:	6938      	ldr	r0, [r7, #16]
 800439c:	f7ff fdbc 	bl	8003f18 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 80043a0:	490a      	ldr	r1, [pc, #40]	; (80043cc <wait_for_bootrom+0x12c>)
 80043a2:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 80043a6:	f000 f8ce 	bl	8004546 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
 80043aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	13541354 	.word	0x13541354
 80043bc:	000207bc 	.word	0x000207bc
 80043c0:	10add09e 	.word	0x10add09e
 80043c4:	3c1cd57d 	.word	0x3c1cd57d
 80043c8:	000207ac 	.word	0x000207ac
 80043cc:	ef522f61 	.word	0xef522f61

080043d0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
	sint8 ret = M2M_SUCCESS;
 80043da:	2300      	movs	r3, #0
 80043dc:	77fb      	strb	r3, [r7, #31]
	uint32 reg = 0, cnt = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
 80043e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80043ea:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
 80043ec:	f241 038c 	movw	r3, #4236	; 0x108c
 80043f0:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 80043f2:	4b19      	ldr	r3, [pc, #100]	; (8004458 <wait_for_firmware_start+0x88>)
 80043f4:	60bb      	str	r3, [r7, #8]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d002      	beq.n	8004402 <wait_for_firmware_start+0x32>
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d116      	bne.n	8004430 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
 8004402:	4b16      	ldr	r3, [pc, #88]	; (800445c <wait_for_firmware_start+0x8c>)
 8004404:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
 8004406:	4b16      	ldr	r3, [pc, #88]	; (8004460 <wait_for_firmware_start+0x90>)
 8004408:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}


	while (checkValue != reg)
 800440a:	e011      	b.n	8004430 <wait_for_firmware_start+0x60>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
 800440c:	2002      	movs	r0, #2
 800440e:	f7fe fbff 	bl	8002c10 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f87c 	bl	8004512 <nm_read_reg>
 800441a:	61b8      	str	r0, [r7, #24]
		if(++cnt >= u32Timeout)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	3301      	adds	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <wait_for_firmware_start+0x60>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
 800442a:	23fb      	movs	r3, #251	; 0xfb
 800442c:	77fb      	strb	r3, [r7, #31]
			goto ERR;
 800442e:	e00c      	b.n	800444a <wait_for_firmware_start+0x7a>
	while (checkValue != reg)
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	429a      	cmp	r2, r3
 8004436:	d1e9      	bne.n	800440c <wait_for_firmware_start+0x3c>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4a07      	ldr	r2, [pc, #28]	; (8004458 <wait_for_firmware_start+0x88>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d104      	bne.n	800444a <wait_for_firmware_start+0x7a>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 8004440:	2100      	movs	r1, #0
 8004442:	f241 008c 	movw	r0, #4236	; 0x108c
 8004446:	f000 f87e 	bl	8004546 <nm_write_reg>
	}
ERR:
	return ret;
 800444a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	02532636 	.word	0x02532636
 800445c:	000207ac 	.word	0x000207ac
 8004460:	d75dc1c3 	.word	0xd75dc1c3

08004464 <chip_deinit>:

sint8 chip_deinit(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
	uint32 reg = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 800446e:	463b      	mov	r3, r7
 8004470:	4619      	mov	r1, r3
 8004472:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8004476:	f000 f858 	bl	800452a <nm_read_reg_with_ret>
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800448c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	4619      	mov	r1, r3
 8004492:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8004496:	f000 f856 	bl	8004546 <nm_write_reg>
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
	if (ret != M2M_SUCCESS) {
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	e000      	b.n	80044a8 <chip_deinit+0x44>
		goto ERR1;
 80044a6:	bf00      	nop
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
	return ret;
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
	ret = nm_bus_init(pvInitVal);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fe fcc1 	bl	8002e48 <nm_bus_init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	73fb      	strb	r3, [r7, #15]
	return ret;
 80044ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 80044dc:	2300      	movs	r3, #0
 80044de:	71fb      	strb	r3, [r7, #7]
	ret = nm_bus_deinit();
 80044e0:	f7fe fd10 	bl	8002f04 <nm_bus_deinit>
 80044e4:	4603      	mov	r3, r0
 80044e6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
 80044fa:	2300      	movs	r3, #0
 80044fc:	71fb      	strb	r3, [r7, #7]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
    ret = nm_spi_reset();
 80044fe:	f000 fea3 	bl	8005248 <nm_spi_reset>
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
	return ret;
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
#elif defined (CONF_WINC_USE_I2C)
#else
#error "Plesae define bus usage"
	return ret;
#endif
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 ff04 	bl	8005328 <nm_spi_read_reg>
 8004520:	4603      	mov	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 ff05 	bl	8005346 <nm_spi_read_reg_with_ret>
 800453c:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 ff11 	bl	800537a <nm_spi_write_reg>
 8004558:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	4613      	mov	r3, r2
 800456e:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	461a      	mov	r2, r3
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 ff19 	bl	80053ae <nm_spi_read_block>
 800457c:	4603      	mov	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 8004594:	4b20      	ldr	r3, [pc, #128]	; (8004618 <nm_read_block+0x90>)
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	3b08      	subs	r3, #8
 800459a:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 80045a0:	2300      	movs	r3, #0
 80045a2:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 80045a4:	8a3a      	ldrh	r2, [r7, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d30f      	bcc.n	80045cc <nm_read_block+0x44>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4413      	add	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	b292      	uxth	r2, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff ffd2 	bl	8004562 <p_nm_read_block>
 80045be:	4603      	mov	r3, r0
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	7cfb      	ldrb	r3, [r7, #19]
 80045c4:	4413      	add	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	74fb      	strb	r3, [r7, #19]
			break;
 80045ca:	e01f      	b.n	800460c <nm_read_block+0x84>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4413      	add	r3, r2
 80045d2:	8a3a      	ldrh	r2, [r7, #16]
 80045d4:	4619      	mov	r1, r3
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ffc3 	bl	8004562 <p_nm_read_block>
 80045dc:	4603      	mov	r3, r0
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	4413      	add	r3, r2
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 80045e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10c      	bne.n	800460a <nm_read_block+0x82>
			u32Sz -= u16MaxTrxSz;
 80045f0:	8a3b      	ldrh	r3, [r7, #16]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 80045f8:	8a3b      	ldrh	r3, [r7, #16]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 8004600:	8a3b      	ldrh	r3, [r7, #16]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 8004608:	e7cc      	b.n	80045a4 <nm_read_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 800460a:	bf00      	nop
		}
	}

	return s8Ret;
 800460c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	2000000c 	.word	0x2000000c

0800461c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	461a      	mov	r2, r3
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 feda 	bl	80053ea <nm_spi_write_block>
 8004636:	4603      	mov	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 800464c:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <nm_write_block+0x90>)
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	3b08      	subs	r3, #8
 8004652:	823b      	strh	r3, [r7, #16]
	uint32 off = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
 8004658:	2300      	movs	r3, #0
 800465a:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 800465c:	8a3a      	ldrh	r2, [r7, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d30f      	bcc.n	8004684 <nm_write_block+0x44>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4413      	add	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	b292      	uxth	r2, r2
 800466e:	4619      	mov	r1, r3
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7ff ffd3 	bl	800461c <p_nm_write_block>
 8004676:	4603      	mov	r3, r0
 8004678:	b2da      	uxtb	r2, r3
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	4413      	add	r3, r2
 800467e:	b2db      	uxtb	r3, r3
 8004680:	74fb      	strb	r3, [r7, #19]
			break;
 8004682:	e01f      	b.n	80046c4 <nm_write_block+0x84>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4413      	add	r3, r2
 800468a:	8a3a      	ldrh	r2, [r7, #16]
 800468c:	4619      	mov	r1, r3
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff ffc4 	bl	800461c <p_nm_write_block>
 8004694:	4603      	mov	r3, r0
 8004696:	b2da      	uxtb	r2, r3
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	4413      	add	r3, r2
 800469c:	b2db      	uxtb	r3, r3
 800469e:	74fb      	strb	r3, [r7, #19]
			if(M2M_SUCCESS != s8Ret) break;
 80046a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10c      	bne.n	80046c2 <nm_write_block+0x82>
			u32Sz -= u16MaxTrxSz;
 80046a8:	8a3b      	ldrh	r3, [r7, #16]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
 80046b0:	8a3b      	ldrh	r3, [r7, #16]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4413      	add	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
 80046b8:	8a3b      	ldrh	r3, [r7, #16]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
 80046c0:	e7cc      	b.n	800465c <nm_write_block+0x1c>
			if(M2M_SUCCESS != s8Ret) break;
 80046c2:	bf00      	nop
		}
	}

	return s8Ret;
 80046c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	2000000c 	.word	0x2000000c

080046d4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
 80046e0:	2300      	movs	r3, #0
 80046e2:	77fb      	strb	r3, [r7, #31]
	tstrGpRegs strgp = {0};
 80046e4:	f107 030c 	add.w	r3, r7, #12
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
	if (pstrRev != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8085 	beq.w	8004800 <nm_get_firmware_full_info+0x12c>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
 80046f6:	2228      	movs	r2, #40	; 0x28
 80046f8:	2100      	movs	r1, #0
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fe fc2f 	bl	8002f5e <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	4619      	mov	r1, r3
 8004706:	4841      	ldr	r0, [pc, #260]	; (800480c <nm_get_firmware_full_info+0x138>)
 8004708:	f7ff ff0f 	bl	800452a <nm_read_reg_with_ret>
 800470c:	4603      	mov	r3, r0
 800470e:	77fb      	strb	r3, [r7, #31]
		if(ret == M2M_SUCCESS)
 8004710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d173      	bne.n	8004800 <nm_get_firmware_full_info+0x12c>
		{
			if(reg != 0)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d06e      	beq.n	80047fc <nm_get_firmware_full_info+0x128>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004724:	f107 010c 	add.w	r1, r7, #12
 8004728:	2208      	movs	r2, #8
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ff2c 	bl	8004588 <nm_read_block>
 8004730:	4603      	mov	r3, r0
 8004732:	77fb      	strb	r3, [r7, #31]
				if(ret == M2M_SUCCESS)
 8004734:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d161      	bne.n	8004800 <nm_get_firmware_full_info+0x12c>
				{
					reg = strgp.u32Firmware_Ota_rev;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	b29b      	uxth	r3, r3
 8004744:	617b      	str	r3, [r7, #20]
					if(reg != 0)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d054      	beq.n	80047f6 <nm_get_firmware_full_info+0x122>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004752:	2228      	movs	r2, #40	; 0x28
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ff16 	bl	8004588 <nm_read_block>
 800475c:	4603      	mov	r3, r0
 800475e:	77fb      	strb	r3, [r7, #31]
						if(ret == M2M_SUCCESS)
 8004760:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d14b      	bne.n	8004800 <nm_get_firmware_full_info+0x12c>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	791b      	ldrb	r3, [r3, #4]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	b21a      	sxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	795b      	ldrb	r3, [r3, #5]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	b21b      	sxth	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	b21b      	sxth	r3, r3
 800477c:	4313      	orrs	r3, r2
 800477e:	b21a      	sxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	799b      	ldrb	r3, [r3, #6]
 8004784:	b21b      	sxth	r3, r3
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	b21b      	sxth	r3, r3
 800478c:	4313      	orrs	r3, r2
 800478e:	b21b      	sxth	r3, r3
 8004790:	83bb      	strh	r3, [r7, #28]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 8004792:	f241 3354 	movw	r3, #4948	; 0x1354
 8004796:	837b      	strh	r3, [r7, #26]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	79db      	ldrb	r3, [r3, #7]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	b21a      	sxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	7a1b      	ldrb	r3, [r3, #8]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	b21b      	sxth	r3, r3
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	b21b      	sxth	r3, r3
 80047ac:	4313      	orrs	r3, r2
 80047ae:	b21a      	sxth	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	7a5b      	ldrb	r3, [r3, #9]
 80047b4:	b21b      	sxth	r3, r3
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	b21b      	sxth	r3, r3
 80047bc:	4313      	orrs	r3, r2
 80047be:	b21b      	sxth	r3, r3
 80047c0:	833b      	strh	r3, [r7, #24]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 80047c2:	8bbb      	ldrh	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <nm_get_firmware_full_info+0x100>
 80047c8:	8b3b      	ldrh	r3, [r7, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <nm_get_firmware_full_info+0x100>
 80047ce:	8b3b      	ldrh	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <nm_get_firmware_full_info+0x106>
								ret = M2M_ERR_FAIL;
 80047d4:	23f4      	movs	r3, #244	; 0xf4
 80047d6:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 80047d8:	e012      	b.n	8004800 <nm_get_firmware_full_info+0x12c>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
 80047da:	8b7a      	ldrh	r2, [r7, #26]
 80047dc:	8b3b      	ldrh	r3, [r7, #24]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d202      	bcs.n	80047e8 <nm_get_firmware_full_info+0x114>
								/*The current driver version should be larger or equal
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
 80047e2:	23f3      	movs	r3, #243	; 0xf3
 80047e4:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 80047e6:	e00b      	b.n	8004800 <nm_get_firmware_full_info+0x12c>
							}
							if(curr_drv_ver >  curr_firm_ver) {
 80047e8:	8b7a      	ldrh	r2, [r7, #26]
 80047ea:	8bbb      	ldrh	r3, [r7, #28]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d907      	bls.n	8004800 <nm_get_firmware_full_info+0x12c>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
 80047f0:	23f3      	movs	r3, #243	; 0xf3
 80047f2:	77fb      	strb	r3, [r7, #31]
								goto EXIT;
 80047f4:	e004      	b.n	8004800 <nm_get_firmware_full_info+0x12c>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
 80047f6:	23f4      	movs	r3, #244	; 0xf4
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e001      	b.n	8004800 <nm_get_firmware_full_info+0x12c>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
 80047fc:	23f4      	movs	r3, #244	; 0xf4
 80047fe:	77fb      	strb	r3, [r7, #31]
			}
		}
	}
EXIT:
	return ret;
 8004800:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	000c0008 	.word	0x000c0008

08004810 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
	uint8 u8Mode;

	if(NULL != arg) {
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <nm_drv_init+0x2a>
		u8Mode = *((uint8 *)arg);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	73bb      	strb	r3, [r7, #14]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
 8004828:	7bbb      	ldrb	r3, [r7, #14]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <nm_drv_init+0x24>
 800482e:	7bbb      	ldrb	r3, [r7, #14]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d904      	bls.n	800483e <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_NORMAL;
 8004834:	2301      	movs	r3, #1
 8004836:	73bb      	strb	r3, [r7, #14]
 8004838:	e001      	b.n	800483e <nm_drv_init+0x2e>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
 800483a:	2301      	movs	r3, #1
 800483c:	73bb      	strb	r3, [r7, #14]
	}

	ret = nm_bus_iface_init(NULL);
 800483e:	2000      	movs	r0, #0
 8004840:	f7ff fe38 	bl	80044b4 <nm_bus_iface_init>
 8004844:	4603      	mov	r3, r0
 8004846:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 8004848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d135      	bne.n	80048bc <nm_drv_init+0xac>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	printf("Chip ID %lx\n", nmi_get_chipid());
 8004850:	f7ff fbdc 	bl	800400c <nmi_get_chipid>
 8004854:	4603      	mov	r3, r0
 8004856:	4619      	mov	r1, r3
 8004858:	481c      	ldr	r0, [pc, #112]	; (80048cc <nm_drv_init+0xbc>)
 800485a:	f000 fee1 	bl	8005620 <iprintf>
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
 800485e:	f000 fd05 	bl	800526c <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fd1b 	bl	80042a0 <wait_for_bootrom>
 800486a:	4603      	mov	r3, r0
 800486c:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800486e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11a      	bne.n	80048ac <nm_drv_init+0x9c>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fda9 	bl	80043d0 <wait_for_firmware_start>
 800487e:	4603      	mov	r3, r0
 8004880:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 8004882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d112      	bne.n	80048b0 <nm_drv_init+0xa0>
		goto ERR2;
	}

	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
 800488a:	7bbb      	ldrb	r3, [r7, #14]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d016      	beq.n	80048be <nm_drv_init+0xae>
 8004890:	7bbb      	ldrb	r3, [r7, #14]
 8004892:	2b03      	cmp	r3, #3
 8004894:	d013      	beq.n	80048be <nm_drv_init+0xae>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
 8004896:	f7ff fb6f 	bl	8003f78 <enable_interrupts>
 800489a:	4603      	mov	r3, r0
 800489c:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 800489e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <nm_drv_init+0xa4>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
 80048a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048aa:	e00a      	b.n	80048c2 <nm_drv_init+0xb2>
		goto ERR2;
 80048ac:	bf00      	nop
 80048ae:	e002      	b.n	80048b6 <nm_drv_init+0xa6>
		goto ERR2;
 80048b0:	bf00      	nop
 80048b2:	e000      	b.n	80048b6 <nm_drv_init+0xa6>
		goto ERR2;
 80048b4:	bf00      	nop
ERR2:
	nm_bus_iface_deinit();
 80048b6:	f7ff fe0e 	bl	80044d6 <nm_bus_iface_deinit>
 80048ba:	e000      	b.n	80048be <nm_drv_init+0xae>
		goto ERR1;
 80048bc:	bf00      	nop
ERR1:
	return ret;
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	08006660 	.word	0x08006660

080048d0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
 80048d8:	f7ff fdc4 	bl	8004464 <chip_deinit>
 80048dc:	4603      	mov	r3, r0
 80048de:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 80048e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f000 fe09 	bl	8005500 <spi_flash_enable>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10c      	bne.n	8004914 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
 80048fa:	f7ff fdec 	bl	80044d6 <nm_bus_iface_deinit>
 80048fe:	4603      	mov	r3, r0
 8004900:	73fb      	strb	r3, [r7, #15]
	if (M2M_SUCCESS != ret) {
 8004902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
 800490a:	f000 fcff 	bl	800530c <nm_spi_deinit>
 800490e:	e004      	b.n	800491a <nm_drv_deinit+0x4a>
		goto ERR1;
 8004910:	bf00      	nop
 8004912:	e002      	b.n	800491a <nm_drv_deinit+0x4a>
		goto ERR1;
 8004914:	bf00      	nop
 8004916:	e000      	b.n	800491a <nm_drv_deinit+0x4a>
		goto ERR1;
 8004918:	bf00      	nop
#endif

ERR1:
	return ret;
 800491a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b086      	sub	sp, #24
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 800493a:	887b      	ldrh	r3, [r7, #2]
 800493c:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800493e:	f107 030c 	add.w	r3, r7, #12
 8004942:	4619      	mov	r1, r3
 8004944:	2003      	movs	r0, #3
 8004946:	f7fe fabb 	bl	8002ec0 <nm_bus_ioctl>
 800494a:	4603      	mov	r3, r0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 8004968:	887b      	ldrh	r3, [r7, #2]
 800496a:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800496c:	f107 030c 	add.w	r3, r7, #12
 8004970:	4619      	mov	r1, r3
 8004972:	2003      	movs	r0, #3
 8004974:	f7fe faa4 	bl	8002ec0 <nm_bus_ioctl>
 8004978:	4603      	mov	r3, r0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	460a      	mov	r2, r1
 800498e:	71fb      	strb	r3, [r7, #7]
 8004990:	4613      	mov	r3, r2
 8004992:	71bb      	strb	r3, [r7, #6]
	return crc7_syndrome_table[(crc << 1) ^ data];
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	005a      	lsls	r2, r3, #1
 8004998:	79bb      	ldrb	r3, [r7, #6]
 800499a:	4053      	eors	r3, r2
 800499c:	4a03      	ldr	r2, [pc, #12]	; (80049ac <crc7_byte+0x28>)
 800499e:	5cd3      	ldrb	r3, [r2, r3]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	08006688 	.word	0x08006688

080049b0 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	73fb      	strb	r3, [r7, #15]
	while (len--)
 80049be:	e00a      	b.n	80049d6 <crc7+0x26>
		crc = crc7_byte(crc, *buffer++);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	60ba      	str	r2, [r7, #8]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff ffd9 	bl	8004984 <crc7_byte>
 80049d2:	4603      	mov	r3, r0
 80049d4:	73fb      	strb	r3, [r7, #15]
	while (len--)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	1e5a      	subs	r2, r3, #1
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ef      	bne.n	80049c0 <crc7+0x10>
	return crc;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b089      	sub	sp, #36	; 0x24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4603      	mov	r3, r0
 80049fa:	73fb      	strb	r3, [r7, #15]
	uint8 bc[9];
	uint8 len = 5;
 80049fc:	2305      	movs	r3, #5
 80049fe:	77fb      	strb	r3, [r7, #31]
	sint8 result = N_OK;
 8004a00:	2301      	movs	r3, #1
 8004a02:	77bb      	strb	r3, [r7, #30]

	bc[0] = cmd;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	753b      	strb	r3, [r7, #20]
	switch (cmd) {
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	3bc1      	subs	r3, #193	; 0xc1
 8004a0c:	2b0e      	cmp	r3, #14
 8004a0e:	f200 80cc 	bhi.w	8004baa <spi_cmd+0x1be>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <spi_cmd+0x2c>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004ad1 	.word	0x08004ad1
 8004a1c:	08004ad1 	.word	0x08004ad1
 8004a20:	08004b2d 	.word	0x08004b2d
 8004a24:	08004a71 	.word	0x08004a71
 8004a28:	08004a9b 	.word	0x08004a9b
 8004a2c:	08004aad 	.word	0x08004aad
 8004a30:	08004afb 	.word	0x08004afb
 8004a34:	08004afb 	.word	0x08004afb
 8004a38:	08004b71 	.word	0x08004b71
 8004a3c:	08004a55 	.word	0x08004a55
 8004a40:	08004bab 	.word	0x08004bab
 8004a44:	08004bab 	.word	0x08004bab
 8004a48:	08004bab 	.word	0x08004bab
 8004a4c:	08004bab 	.word	0x08004bab
 8004a50:	08004abf 	.word	0x08004abf
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	77fb      	strb	r3, [r7, #31]
		break;
 8004a6e:	e09f      	b.n	8004bb0 <spi_cmd+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 8004a78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <spi_cmd+0x9e>
 8004a80:	7d7b      	ldrb	r3, [r7, #21]
 8004a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)adr;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8004a94:	2305      	movs	r3, #5
 8004a96:	77fb      	strb	r3, [r7, #31]
		break;
 8004a98:	e08a      	b.n	8004bb0 <spi_cmd+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8004aa6:	2305      	movs	r3, #5
 8004aa8:	77fb      	strb	r3, [r7, #31]
		break;
 8004aaa:	e081      	b.n	8004bb0 <spi_cmd+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
 8004aac:	2300      	movs	r3, #0
 8004aae:	757b      	strb	r3, [r7, #21]
		bc[2] = 0x00;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0x00;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8004ab8:	2305      	movs	r3, #5
 8004aba:	77fb      	strb	r3, [r7, #31]
		break;
 8004abc:	e078      	b.n	8004bb0 <spi_cmd+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
 8004abe:	23ff      	movs	r3, #255	; 0xff
 8004ac0:	757b      	strb	r3, [r7, #21]
		bc[2] = 0xff;
 8004ac2:	23ff      	movs	r3, #255	; 0xff
 8004ac4:	75bb      	strb	r3, [r7, #22]
		bc[3] = 0xff;
 8004ac6:	23ff      	movs	r3, #255	; 0xff
 8004ac8:	75fb      	strb	r3, [r7, #23]
		len = 5;
 8004aca:	2305      	movs	r3, #5
 8004acc:	77fb      	strb	r3, [r7, #31]
		break;
 8004ace:	e06f      	b.n	8004bb0 <spi_cmd+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 8);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	767b      	strb	r3, [r7, #25]
		len = 7;
 8004af4:	2307      	movs	r3, #7
 8004af6:	77fb      	strb	r3, [r7, #31]
		break;
 8004af8:	e05a      	b.n	8004bb0 <spi_cmd+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)adr;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(sz >> 16);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(sz >> 8);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(sz);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	76bb      	strb	r3, [r7, #26]
		len = 8;
 8004b26:	2308      	movs	r3, #8
 8004b28:	77fb      	strb	r3, [r7, #31]
		break;
 8004b2a:	e041      	b.n	8004bb0 <spi_cmd+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	757b      	strb	r3, [r7, #21]
		if(clockless)  bc[1] |= (1 << 7);
 8004b34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <spi_cmd+0x15a>
 8004b3c:	7d7b      	ldrb	r3, [r7, #21]
 8004b3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(u32data >> 24);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	0e1b      	lsrs	r3, r3, #24
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 16);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 8);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	76bb      	strb	r3, [r7, #26]
		len = 8;
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	77fb      	strb	r3, [r7, #31]
		break;
 8004b6e:	e01f      	b.n	8004bb0 <spi_cmd+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	757b      	strb	r3, [r7, #21]
		bc[2] = (uint8)(adr >> 8);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	75bb      	strb	r3, [r7, #22]
		bc[3] = (uint8)(adr);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	75fb      	strb	r3, [r7, #23]
		bc[4] = (uint8)(u32data >> 24);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0e1b      	lsrs	r3, r3, #24
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	763b      	strb	r3, [r7, #24]
		bc[5] = (uint8)(u32data >> 16);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	767b      	strb	r3, [r7, #25]
		bc[6] = (uint8)(u32data >> 8);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	76bb      	strb	r3, [r7, #26]
		bc[7] = (uint8)(u32data);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	76fb      	strb	r3, [r7, #27]
		len = 9;
 8004ba4:	2309      	movs	r3, #9
 8004ba6:	77fb      	strb	r3, [r7, #31]
		break;
 8004ba8:	e002      	b.n	8004bb0 <spi_cmd+0x1c4>
	default:
		result = N_FAIL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	77bb      	strb	r3, [r7, #30]
		break;
 8004bae:	bf00      	nop
	}

	if (result) {
 8004bb0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d027      	beq.n	8004c08 <spi_cmd+0x21c>
		if (!gu8Crc_off)
 8004bb8:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <spi_cmd+0x228>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d113      	bne.n	8004be8 <spi_cmd+0x1fc>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 8004bc0:	7ffb      	ldrb	r3, [r7, #31]
 8004bc2:	1e5c      	subs	r4, r3, #1
 8004bc4:	7ffb      	ldrb	r3, [r7, #31]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f107 0314 	add.w	r3, r7, #20
 8004bce:	4619      	mov	r1, r3
 8004bd0:	207f      	movs	r0, #127	; 0x7f
 8004bd2:	f7ff feed 	bl	80049b0 <crc7>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	f107 0320 	add.w	r3, r7, #32
 8004be0:	4423      	add	r3, r4
 8004be2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8004be6:	e002      	b.n	8004bee <spi_cmd+0x202>
		else
			len-=1;
 8004be8:	7ffb      	ldrb	r3, [r7, #31]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	77fb      	strb	r3, [r7, #31]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff feab 	bl	8004954 <nmi_spi_write>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <spi_cmd+0x21c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	77bb      	strb	r3, [r7, #30]
		}
	}

	return result;
 8004c08:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3724      	adds	r7, #36	; 0x24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd90      	pop	{r4, r7, pc}
 8004c14:	200001d0 	.word	0x200001d0

08004c18 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73bb      	strb	r3, [r7, #14]

    if (!gu8Crc_off)
 8004c26:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <spi_data_rsp+0x74>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <spi_data_rsp+0x1c>
		len = 2;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	73fb      	strb	r3, [r7, #15]
 8004c32:	e001      	b.n	8004c38 <spi_data_rsp+0x20>
	else
		len = 3;
 8004c34:	2303      	movs	r3, #3
 8004c36:	73fb      	strb	r3, [r7, #15]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	f107 0308 	add.w	r3, r7, #8
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fe6f 	bl	8004926 <nmi_spi_read>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <spi_data_rsp+0x3c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 8004c52:	e014      	b.n	8004c7e <spi_data_rsp+0x66>
	}

	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	f107 0210 	add.w	r2, r7, #16
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <spi_data_rsp+0x60>
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	3b02      	subs	r3, #2
 8004c6a:	f107 0210 	add.w	r2, r7, #16
 8004c6e:	4413      	add	r3, r2
 8004c70:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004c74:	2bc3      	cmp	r3, #195	; 0xc3
 8004c76:	d002      	beq.n	8004c7e <spi_data_rsp+0x66>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73bb      	strb	r3, [r7, #14]
		goto _fail_;
 8004c7c:	bf00      	nop
	}
_fail_:

	return result;
 8004c7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200001d0 	.word	0x200001d0

08004c90 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
	uint8 rsp;
	sint8 result = N_OK;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	2bcf      	cmp	r3, #207	; 0xcf
 8004ca2:	d005      	beq.n	8004cb0 <spi_cmd_rsp+0x20>
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	2bc5      	cmp	r3, #197	; 0xc5
 8004ca8:	d002      	beq.n	8004cb0 <spi_cmd_rsp+0x20>
		 (cmd == CMD_TERMINATE) ||
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	2bc6      	cmp	r3, #198	; 0xc6
 8004cae:	d10b      	bne.n	8004cc8 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8004cb0:	f107 030d 	add.w	r3, r7, #13
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fe35 	bl	8004926 <nmi_spi_read>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <spi_cmd_rsp+0x38>
			result = N_FAIL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 8004cc6:	e032      	b.n	8004d2e <spi_cmd_rsp+0x9e>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 8004cc8:	230a      	movs	r3, #10
 8004cca:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8004ccc:	f107 030d 	add.w	r3, r7, #13
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fe27 	bl	8004926 <nmi_spi_read>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <spi_cmd_rsp+0x54>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 8004ce2:	e024      	b.n	8004d2e <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8004ce4:	7b7b      	ldrb	r3, [r7, #13]
 8004ce6:	79fa      	ldrb	r2, [r7, #7]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d007      	beq.n	8004cfc <spi_cmd_rsp+0x6c>
 8004cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	73ba      	strb	r2, [r7, #14]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	dce7      	bgt.n	8004ccc <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
 8004cfc:	230a      	movs	r3, #10
 8004cfe:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8004d00:	f107 030d 	add.w	r3, r7, #13
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fe0d 	bl	8004926 <nmi_spi_read>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
			goto _fail_;
 8004d16:	e00a      	b.n	8004d2e <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 8004d18:	7b7b      	ldrb	r3, [r7, #13]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <spi_cmd_rsp+0x9e>
 8004d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	3a01      	subs	r2, #1
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	73ba      	strb	r2, [r7, #14]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	dce8      	bgt.n	8004d00 <spi_cmd_rsp+0x70>

_fail_:

	return result;
 8004d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	807b      	strh	r3, [r7, #2]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	707b      	strb	r3, [r7, #1]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	747b      	strb	r3, [r7, #17]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	82bb      	strh	r3, [r7, #20]
	do {
		if (sz <= DATA_PKT_SZ)
 8004d54:	887b      	ldrh	r3, [r7, #2]
 8004d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5a:	d802      	bhi.n	8004d62 <spi_data_read+0x26>
			nbytes = sz;
 8004d5c:	887b      	ldrh	r3, [r7, #2]
 8004d5e:	827b      	strh	r3, [r7, #18]
 8004d60:	e002      	b.n	8004d68 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 8004d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d66:	827b      	strh	r3, [r7, #18]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 8004d68:	230a      	movs	r3, #10
 8004d6a:	82fb      	strh	r3, [r7, #22]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8004d6c:	f107 030b 	add.w	r3, r7, #11
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fdd7 	bl	8004926 <nmi_spi_read>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <spi_data_read+0x48>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	747b      	strb	r3, [r7, #17]
				break;
 8004d82:	e010      	b.n	8004da6 <spi_data_read+0x6a>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
 8004d84:	7afb      	ldrb	r3, [r7, #11]
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	2b0f      	cmp	r3, #15
 8004d90:	d008      	beq.n	8004da4 <spi_data_read+0x68>
				break;
		} while (retry--);
 8004d92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	3a01      	subs	r2, #1
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	82fa      	strh	r2, [r7, #22]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e4      	bne.n	8004d6c <spi_data_read+0x30>
 8004da2:	e000      	b.n	8004da6 <spi_data_read+0x6a>
				break;
 8004da4:	bf00      	nop

		if (result == N_FAIL)
 8004da6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d035      	beq.n	8004e1a <spi_data_read+0xde>
			break;

		if (retry <= 0) {
 8004dae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dc02      	bgt.n	8004dbc <spi_data_read+0x80>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	747b      	strb	r3, [r7, #17]
			break;
 8004dba:	e02f      	b.n	8004e1c <spi_data_read+0xe0>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 8004dbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	8a7a      	ldrh	r2, [r7, #18]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fdac 	bl	8004926 <nmi_spi_read>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <spi_data_read+0x9e>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	747b      	strb	r3, [r7, #17]
			break;
 8004dd8:	e020      	b.n	8004e1c <spi_data_read+0xe0>
		}
		if(!clockless)
 8004dda:	787b      	ldrb	r3, [r7, #1]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <spi_data_read+0xc4>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <spi_data_read+0xec>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <spi_data_read+0xc4>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	2102      	movs	r1, #2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fd99 	bl	8004926 <nmi_spi_read>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <spi_data_read+0xc4>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	747b      	strb	r3, [r7, #17]
					break;
 8004dfe:	e00d      	b.n	8004e1c <spi_data_read+0xe0>
				}
			}
		}
		ix += nbytes;
 8004e00:	8aba      	ldrh	r2, [r7, #20]
 8004e02:	8a7b      	ldrh	r3, [r7, #18]
 8004e04:	4413      	add	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	82bb      	strh	r3, [r7, #20]
		sz -= nbytes;
 8004e0a:	8a7b      	ldrh	r3, [r7, #18]
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	807b      	strh	r3, [r7, #2]

	} while (sz);
 8004e12:	887b      	ldrh	r3, [r7, #2]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d19d      	bne.n	8004d54 <spi_data_read+0x18>
 8004e18:	e000      	b.n	8004e1c <spi_data_read+0xe0>
			break;
 8004e1a:	bf00      	nop

	return result;
 8004e1c:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	200001d0 	.word	0x200001d0

08004e2c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	807b      	strh	r3, [r7, #2]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	74fb      	strb	r3, [r7, #19]
	uint8 cmd, order, crc[2] = {0};
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	81bb      	strh	r3, [r7, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	82fb      	strh	r3, [r7, #22]
	do {
		if (sz <= DATA_PKT_SZ)
 8004e44:	887b      	ldrh	r3, [r7, #2]
 8004e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4a:	d802      	bhi.n	8004e52 <spi_data_write+0x26>
			nbytes = sz;
 8004e4c:	887b      	ldrh	r3, [r7, #2]
 8004e4e:	82bb      	strh	r3, [r7, #20]
 8004e50:	e002      	b.n	8004e58 <spi_data_write+0x2c>
		else
			nbytes = DATA_PKT_SZ;
 8004e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e56:	82bb      	strh	r3, [r7, #20]

		/**
			Write command
		**/
		cmd = 0xf0;
 8004e58:	23f0      	movs	r3, #240	; 0xf0
 8004e5a:	747b      	strb	r3, [r7, #17]
		if (ix == 0)  {
 8004e5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <spi_data_write+0x4c>
			if (sz <= DATA_PKT_SZ)
 8004e64:	887b      	ldrh	r3, [r7, #2]
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6a:	d802      	bhi.n	8004e72 <spi_data_write+0x46>
				order = 0x3;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	74bb      	strb	r3, [r7, #18]
 8004e70:	e00b      	b.n	8004e8a <spi_data_write+0x5e>
			else
				order = 0x1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	74bb      	strb	r3, [r7, #18]
 8004e76:	e008      	b.n	8004e8a <spi_data_write+0x5e>
		} else {
			if (sz <= DATA_PKT_SZ)
 8004e78:	887b      	ldrh	r3, [r7, #2]
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	d802      	bhi.n	8004e86 <spi_data_write+0x5a>
				order = 0x3;
 8004e80:	2303      	movs	r3, #3
 8004e82:	74bb      	strb	r3, [r7, #18]
 8004e84:	e001      	b.n	8004e8a <spi_data_write+0x5e>
			else
				order = 0x2;
 8004e86:	2302      	movs	r3, #2
 8004e88:	74bb      	strb	r3, [r7, #18]
		}
		cmd |= order;
 8004e8a:	7c7a      	ldrb	r2, [r7, #17]
 8004e8c:	7cbb      	ldrb	r3, [r7, #18]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	747b      	strb	r3, [r7, #17]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 8004e94:	f107 0311 	add.w	r3, r7, #17
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fd5a 	bl	8004954 <nmi_spi_write>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <spi_data_write+0x80>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	74fb      	strb	r3, [r7, #19]
			break;
 8004eaa:	e02a      	b.n	8004f02 <spi_data_write+0xd6>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 8004eac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	8aba      	ldrh	r2, [r7, #20]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fd4b 	bl	8004954 <nmi_spi_write>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <spi_data_write+0x9e>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	74fb      	strb	r3, [r7, #19]
			break;
 8004ec8:	e01b      	b.n	8004f02 <spi_data_write+0xd6>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <spi_data_write+0xe4>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <spi_data_write+0xbe>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 8004ed2:	f107 030c 	add.w	r3, r7, #12
 8004ed6:	2102      	movs	r1, #2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fd3b 	bl	8004954 <nmi_spi_write>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <spi_data_write+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	74fb      	strb	r3, [r7, #19]
				break;
 8004ee8:	e00b      	b.n	8004f02 <spi_data_write+0xd6>
			}
		}

		ix += nbytes;
 8004eea:	8afa      	ldrh	r2, [r7, #22]
 8004eec:	8abb      	ldrh	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	82fb      	strh	r3, [r7, #22]
		sz -= nbytes;
 8004ef4:	887a      	ldrh	r2, [r7, #2]
 8004ef6:	8abb      	ldrh	r3, [r7, #20]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	807b      	strh	r3, [r7, #2]
	} while (sz);
 8004efc:	887b      	ldrh	r3, [r7, #2]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1a0      	bne.n	8004e44 <spi_data_write+0x18>


	return result;
 8004f02:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200001d0 	.word	0x200001d0

08004f14 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 8004f1e:	230a      	movs	r3, #10
 8004f20:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_WRITE;
 8004f26:	23c9      	movs	r3, #201	; 0xc9
 8004f28:	737b      	strb	r3, [r7, #13]
	uint8 clockless = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	733b      	strb	r3, [r7, #12]

_RETRY_:
	if (addr <= 0x30)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b30      	cmp	r3, #48	; 0x30
 8004f32:	d804      	bhi.n	8004f3e <spi_write_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
 8004f34:	23c3      	movs	r3, #195	; 0xc3
 8004f36:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	733b      	strb	r3, [r7, #12]
 8004f3c:	e003      	b.n	8004f46 <spi_write_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
 8004f3e:	23c9      	movs	r3, #201	; 0xc9
 8004f40:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 8004f46:	7b78      	ldrb	r0, [r7, #13]
 8004f48:	7b3b      	ldrb	r3, [r7, #12]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	f7ff fd4b 	bl	80049ec <spi_cmd>
 8004f56:	4603      	mov	r3, r0
 8004f58:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 8004f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d109      	bne.n	8004f76 <spi_write_reg+0x62>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 8004f62:	7b7b      	ldrb	r3, [r7, #13]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fe93 	bl	8004c90 <spi_cmd_rsp>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 8004f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	e000      	b.n	8004f78 <spi_write_reg+0x64>
		goto _FAIL_;
 8004f76:	bf00      	nop
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
 8004f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d017      	beq.n	8004fb0 <spi_write_reg+0x9c>
	{
		nm_bsp_sleep(1);
 8004f80:	2001      	movs	r0, #1
 8004f82:	f7fd fe45 	bl	8002c10 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8004f86:	2300      	movs	r3, #0
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2100      	movs	r1, #0
 8004f90:	20cf      	movs	r0, #207	; 0xcf
 8004f92:	f7ff fd2b 	bl	80049ec <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8004f96:	20cf      	movs	r0, #207	; 0xcf
 8004f98:	f7ff fe7a 	bl	8004c90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f7fd fe37 	bl	8002c10 <nm_bsp_sleep>
		retry--;
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d000      	beq.n	8004fb0 <spi_write_reg+0x9c>
 8004fae:	e7be      	b.n	8004f2e <spi_write_reg+0x1a>
	}

	return result;
 8004fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 8004fca:	230a      	movs	r3, #10
 8004fcc:	75bb      	strb	r3, [r7, #22]
	uint8 cmd = CMD_DMA_EXT_WRITE;
 8004fce:	23c7      	movs	r3, #199	; 0xc7
 8004fd0:	757b      	strb	r3, [r7, #21]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <nm_spi_write+0x20>
		size = 2;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	80fb      	strh	r3, [r7, #6]

	result = spi_cmd(cmd, addr, 0, size,0);
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	7d78      	ldrb	r0, [r7, #21]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	68f9      	ldr	r1, [r7, #12]
 8004fea:	f7ff fcff 	bl	80049ec <spi_cmd>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 8004ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d11e      	bne.n	8005038 <nm_spi_write+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 8004ffa:	7d7b      	ldrb	r3, [r7, #21]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff fe47 	bl	8004c90 <spi_cmd_rsp>
 8005002:	4603      	mov	r3, r0
 8005004:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 8005006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d116      	bne.n	800503c <nm_spi_write+0x80>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	4619      	mov	r1, r3
 8005012:	68b8      	ldr	r0, [r7, #8]
 8005014:	f7ff ff0a 	bl	8004e2c <spi_data_write>
 8005018:	4603      	mov	r3, r0
 800501a:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 800501c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10d      	bne.n	8005040 <nm_spi_write+0x84>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
 8005024:	7d7b      	ldrb	r3, [r7, #21]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fdf6 	bl	8004c18 <spi_data_rsp>
 800502c:	4603      	mov	r3, r0
 800502e:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 8005030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005034:	2b01      	cmp	r3, #1
 8005036:	e004      	b.n	8005042 <nm_spi_write+0x86>
		goto _FAIL_;
 8005038:	bf00      	nop
 800503a:	e002      	b.n	8005042 <nm_spi_write+0x86>
		goto _FAIL_;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <nm_spi_write+0x86>
		goto _FAIL_;
 8005040:	bf00      	nop
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}

_FAIL_:
	if(result != N_OK)
 8005042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d017      	beq.n	800507a <nm_spi_write+0xbe>
	{
		nm_bsp_sleep(1);
 800504a:	2001      	movs	r0, #1
 800504c:	f7fd fde0 	bl	8002c10 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	20cf      	movs	r0, #207	; 0xcf
 800505c:	f7ff fcc6 	bl	80049ec <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8005060:	20cf      	movs	r0, #207	; 0xcf
 8005062:	f7ff fe15 	bl	8004c90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 8005066:	2001      	movs	r0, #1
 8005068:	f7fd fdd2 	bl	8002c10 <nm_bsp_sleep>
		retry--;
 800506c:	7dbb      	ldrb	r3, [r7, #22]
 800506e:	3b01      	subs	r3, #1
 8005070:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 8005072:	7dbb      	ldrb	r3, [r7, #22]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d000      	beq.n	800507a <nm_spi_write+0xbe>
 8005078:	e7ab      	b.n	8004fd2 <nm_spi_write+0x16>
	}


	return result;
 800507a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af02      	add	r7, sp, #8
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
 8005090:	230a      	movs	r3, #10
 8005092:	73fb      	strb	r3, [r7, #15]
	sint8 result = N_OK;
 8005094:	2301      	movs	r3, #1
 8005096:	73bb      	strb	r3, [r7, #14]
	uint8 cmd = CMD_SINGLE_READ;
 8005098:	23ca      	movs	r3, #202	; 0xca
 800509a:	737b      	strb	r3, [r7, #13]
	uint8 tmp[4];
	uint8 clockless = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	733b      	strb	r3, [r7, #12]

_RETRY_:

	if (addr <= 0xff)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2bff      	cmp	r3, #255	; 0xff
 80050a4:	d804      	bhi.n	80050b0 <spi_read_reg+0x2a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
 80050a6:	23c4      	movs	r3, #196	; 0xc4
 80050a8:	737b      	strb	r3, [r7, #13]
		clockless = 1;
 80050aa:	2301      	movs	r3, #1
 80050ac:	733b      	strb	r3, [r7, #12]
 80050ae:	e003      	b.n	80050b8 <spi_read_reg+0x32>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
 80050b0:	23ca      	movs	r3, #202	; 0xca
 80050b2:	737b      	strb	r3, [r7, #13]
		clockless = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	733b      	strb	r3, [r7, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 80050b8:	7b78      	ldrb	r0, [r7, #13]
 80050ba:	7b3b      	ldrb	r3, [r7, #12]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2304      	movs	r3, #4
 80050c0:	2200      	movs	r2, #0
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	f7ff fc92 	bl	80049ec <spi_cmd>
 80050c8:	4603      	mov	r3, r0
 80050ca:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 80050cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d124      	bne.n	800511e <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 80050d4:	7b7b      	ldrb	r3, [r7, #13]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fdda 	bl	8004c90 <spi_cmd_rsp>
 80050dc:	4603      	mov	r3, r0
 80050de:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 80050e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d11c      	bne.n	8005122 <spi_read_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
 80050e8:	7b3a      	ldrb	r2, [r7, #12]
 80050ea:	f107 0308 	add.w	r3, r7, #8
 80050ee:	2104      	movs	r1, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fe23 	bl	8004d3c <spi_data_read>
 80050f6:	4603      	mov	r3, r0
 80050f8:	73bb      	strb	r3, [r7, #14]
	if (result != N_OK) {
 80050fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d111      	bne.n	8005126 <spi_read_reg+0xa0>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
 8005102:	7a3b      	ldrb	r3, [r7, #8]
 8005104:	461a      	mov	r2, r3
		((uint32)tmp[1] << 8) |
 8005106:	7a7b      	ldrb	r3, [r7, #9]
 8005108:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
 800510a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
 800510c:	7abb      	ldrb	r3, [r7, #10]
 800510e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
 8005110:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
 8005112:	7afb      	ldrb	r3, [r7, #11]
 8005114:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
 8005116:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e004      	b.n	8005128 <spi_read_reg+0xa2>
		goto _FAIL_;
 800511e:	bf00      	nop
 8005120:	e002      	b.n	8005128 <spi_read_reg+0xa2>
		goto _FAIL_;
 8005122:	bf00      	nop
 8005124:	e000      	b.n	8005128 <spi_read_reg+0xa2>
		goto _FAIL_;
 8005126:	bf00      	nop

_FAIL_:
	if(result != N_OK)
 8005128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d017      	beq.n	8005160 <spi_read_reg+0xda>
	{

		nm_bsp_sleep(1);
 8005130:	2001      	movs	r0, #1
 8005132:	f7fd fd6d 	bl	8002c10 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8005136:	2300      	movs	r3, #0
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	2200      	movs	r2, #0
 800513e:	2100      	movs	r1, #0
 8005140:	20cf      	movs	r0, #207	; 0xcf
 8005142:	f7ff fc53 	bl	80049ec <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8005146:	20cf      	movs	r0, #207	; 0xcf
 8005148:	f7ff fda2 	bl	8004c90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
 800514c:	2001      	movs	r0, #1
 800514e:	f7fd fd5f 	bl	8002c10 <nm_bsp_sleep>
		retry--;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	3b01      	subs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
		if(retry) goto _RETRY_;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d000      	beq.n	8005160 <spi_read_reg+0xda>
 800515e:	e79f      	b.n	80050a0 <spi_read_reg+0x1a>
	}

	return result;
 8005160:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
	uint8 cmd = CMD_DMA_EXT_READ;
 800517a:	23c8      	movs	r3, #200	; 0xc8
 800517c:	753b      	strb	r3, [r7, #20]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
 800517e:	230a      	movs	r3, #10
 8005180:	75bb      	strb	r3, [r7, #22]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	757b      	strb	r3, [r7, #21]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d103      	bne.n	8005194 <nm_spi_read+0x28>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
 800518c:	2302      	movs	r3, #2
 800518e:	80fb      	strh	r3, [r7, #6]
		single_byte_workaround = 1;
 8005190:	2301      	movs	r3, #1
 8005192:	757b      	strb	r3, [r7, #21]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 8005194:	88fa      	ldrh	r2, [r7, #6]
 8005196:	7d38      	ldrb	r0, [r7, #20]
 8005198:	2300      	movs	r3, #0
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	2200      	movs	r2, #0
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	f7ff fc23 	bl	80049ec <spi_cmd>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 80051aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d125      	bne.n	80051fe <nm_spi_read+0x92>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
 80051b2:	7d3b      	ldrb	r3, [r7, #20]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff fd6b 	bl	8004c90 <spi_cmd_rsp>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]
	if (result != N_OK) {
 80051be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d11d      	bne.n	8005202 <nm_spi_read+0x96>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
 80051c6:	7d7b      	ldrb	r3, [r7, #21]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00c      	beq.n	80051e6 <nm_spi_read+0x7a>
	{
		result = spi_data_read(tmp, size,0);
 80051cc:	88f9      	ldrh	r1, [r7, #6]
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	2200      	movs	r2, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fdb1 	bl	8004d3c <spi_data_read>
 80051da:	4603      	mov	r3, r0
 80051dc:	75fb      	strb	r3, [r7, #23]
		buf[0] = tmp[0];
 80051de:	7c3a      	ldrb	r2, [r7, #16]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e007      	b.n	80051f6 <nm_spi_read+0x8a>
	}
	else
		result = spi_data_read(buf, size,0);
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	2200      	movs	r2, #0
 80051ea:	4619      	mov	r1, r3
 80051ec:	68b8      	ldr	r0, [r7, #8]
 80051ee:	f7ff fda5 	bl	8004d3c <spi_data_read>
 80051f2:	4603      	mov	r3, r0
 80051f4:	75fb      	strb	r3, [r7, #23]

	if (result != N_OK) {
 80051f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	e002      	b.n	8005204 <nm_spi_read+0x98>
		goto _FAIL_;
 80051fe:	bf00      	nop
 8005200:	e000      	b.n	8005204 <nm_spi_read+0x98>
		goto _FAIL_;
 8005202:	bf00      	nop
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
 8005204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d017      	beq.n	800523c <nm_spi_read+0xd0>
	{
		nm_bsp_sleep(1);
 800520c:	2001      	movs	r0, #1
 800520e:	f7fd fcff 	bl	8002c10 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8005212:	2300      	movs	r3, #0
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	2300      	movs	r3, #0
 8005218:	2200      	movs	r2, #0
 800521a:	2100      	movs	r1, #0
 800521c:	20cf      	movs	r0, #207	; 0xcf
 800521e:	f7ff fbe5 	bl	80049ec <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8005222:	20cf      	movs	r0, #207	; 0xcf
 8005224:	f7ff fd34 	bl	8004c90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
 8005228:	2001      	movs	r0, #1
 800522a:	f7fd fcf1 	bl	8002c10 <nm_bsp_sleep>
		retry--;
 800522e:	7dbb      	ldrb	r3, [r7, #22]
 8005230:	3b01      	subs	r3, #1
 8005232:	75bb      	strb	r3, [r7, #22]
		if(retry) goto _RETRY_;
 8005234:	7dbb      	ldrb	r3, [r7, #22]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d000      	beq.n	800523c <nm_spi_read+0xd0>
 800523a:	e7a4      	b.n	8005186 <nm_spi_read+0x1a>
	}

	return result;
 800523c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800524e:	2300      	movs	r3, #0
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	2300      	movs	r3, #0
 8005254:	2200      	movs	r2, #0
 8005256:	2100      	movs	r1, #0
 8005258:	20cf      	movs	r0, #207	; 0xcf
 800525a:	f7ff fbc7 	bl	80049ec <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 800525e:	20cf      	movs	r0, #207	; 0xcf
 8005260:	f7ff fd16 	bl	8004c90 <spi_cmd_rsp>
	return M2M_SUCCESS;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	603b      	str	r3, [r7, #0]


	/**
		configure protocol
	**/
	gu8Crc_off = 0;
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <nm_spi_init+0x9c>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 800527c:	463b      	mov	r3, r7
 800527e:	4619      	mov	r1, r3
 8005280:	f64e 0024 	movw	r0, #59428	; 0xe824
 8005284:	f7ff feff 	bl	8005086 <spi_read_reg>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <nm_spi_init+0x3e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
 800528e:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <nm_spi_init+0x9c>)
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 8005294:	463b      	mov	r3, r7
 8005296:	4619      	mov	r1, r3
 8005298:	f64e 0024 	movw	r0, #59428	; 0xe824
 800529c:	f7ff fef3 	bl	8005086 <spi_read_reg>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <nm_spi_init+0x3e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e02a      	b.n	8005300 <nm_spi_init+0x94>
		}
	}
	if(gu8Crc_off == 0)
 80052aa:	4b17      	ldr	r3, [pc, #92]	; (8005308 <nm_spi_init+0x9c>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d119      	bne.n	80052e6 <nm_spi_init+0x7a>
	{
		reg &= ~0xc;	/* disable crc checking */
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f023 030c 	bic.w	r3, r3, #12
 80052b8:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c0:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80052c8:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	4619      	mov	r1, r3
 80052ce:	f64e 0024 	movw	r0, #59428	; 0xe824
 80052d2:	f7ff fe1f 	bl	8004f14 <spi_write_reg>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <nm_spi_init+0x74>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	e00f      	b.n	8005300 <nm_spi_init+0x94>
		}
		gu8Crc_off = 1;
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <nm_spi_init+0x9c>)
 80052e2:	2201      	movs	r2, #1
 80052e4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80052ee:	f7ff feca 	bl	8005086 <spi_read_reg>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <nm_spi_init+0x92>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
 80052f8:	f06f 0305 	mvn.w	r3, #5
 80052fc:	e000      	b.n	8005300 <nm_spi_init+0x94>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	//spi_init_pkt_sz();


	return M2M_SUCCESS;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	200001d0 	.word	0x200001d0

0800530c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <nm_spi_deinit+0x18>)
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	200001d0 	.word	0x200001d0

08005328 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
 8005330:	f107 030c 	add.w	r3, r7, #12
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fea5 	bl	8005086 <spi_read_reg>

	return u32Val;
 800533c:	68fb      	ldr	r3, [r7, #12]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fe97 	bl	8005086 <spi_read_reg>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800535c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d102      	bne.n	800536a <nm_spi_read_reg_with_ret+0x24>
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]
 8005368:	e001      	b.n	800536e <nm_spi_read_reg_with_ret+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800536a:	23fa      	movs	r3, #250	; 0xfa
 800536c:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 800536e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fdc4 	bl	8004f14 <spi_write_reg>
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8005390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d102      	bne.n	800539e <nm_spi_write_reg+0x24>
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
 800539c:	e001      	b.n	80053a2 <nm_spi_write_reg+0x28>
	else s8Ret = M2M_ERR_BUS_FAIL;
 800539e:	23fa      	movs	r3, #250	; 0xfa
 80053a0:	73fb      	strb	r3, [r7, #15]

	return s8Ret;
 80053a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b086      	sub	sp, #24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	4613      	mov	r3, r2
 80053ba:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	461a      	mov	r2, r3
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff fed2 	bl	800516c <nm_spi_read>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 80053cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d102      	bne.n	80053da <nm_spi_read_block+0x2c>
 80053d4:	2300      	movs	r3, #0
 80053d6:	75fb      	strb	r3, [r7, #23]
 80053d8:	e001      	b.n	80053de <nm_spi_read_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 80053da:	23fa      	movs	r3, #250	; 0xfa
 80053dc:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 80053de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b086      	sub	sp, #24
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	4613      	mov	r3, r2
 80053f6:	80fb      	strh	r3, [r7, #6]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	461a      	mov	r2, r3
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff fddc 	bl	8004fbc <nm_spi_write>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8005408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d102      	bne.n	8005416 <nm_spi_write_block+0x2c>
 8005410:	2300      	movs	r3, #0
 8005412:	75fb      	strb	r3, [r7, #23]
 8005414:	e001      	b.n	800541a <nm_spi_write_block+0x30>
	else s8Ret = M2M_ERR_BUS_FAIL;
 8005416:	23fa      	movs	r3, #250	; 0xfa
 8005418:	75fb      	strb	r3, [r7, #23]

	return s8Ret;
 800541a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800542e:	463b      	mov	r3, r7
 8005430:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	22b9      	movs	r2, #185	; 0xb9
 8005436:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 8005438:	2100      	movs	r1, #0
 800543a:	4810      	ldr	r0, [pc, #64]	; (800547c <spi_flash_enter_low_power_mode+0x54>)
 800543c:	f7ff f883 	bl	8004546 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	480e      	ldr	r0, [pc, #56]	; (8005480 <spi_flash_enter_low_power_mode+0x58>)
 8005448:	f7ff f87d 	bl	8004546 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 800544c:	2101      	movs	r1, #1
 800544e:	480d      	ldr	r0, [pc, #52]	; (8005484 <spi_flash_enter_low_power_mode+0x5c>)
 8005450:	f7ff f879 	bl	8004546 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 8005454:	2100      	movs	r1, #0
 8005456:	480c      	ldr	r0, [pc, #48]	; (8005488 <spi_flash_enter_low_power_mode+0x60>)
 8005458:	f7ff f875 	bl	8004546 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
 800545c:	2181      	movs	r1, #129	; 0x81
 800545e:	480b      	ldr	r0, [pc, #44]	; (800548c <spi_flash_enter_low_power_mode+0x64>)
 8005460:	f7ff f871 	bl	8004546 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 8005464:	bf00      	nop
 8005466:	480a      	ldr	r0, [pc, #40]	; (8005490 <spi_flash_enter_low_power_mode+0x68>)
 8005468:	f7ff f853 	bl	8004512 <nm_read_reg>
 800546c:	4603      	mov	r3, r0
 800546e:	2b01      	cmp	r3, #1
 8005470:	d1f9      	bne.n	8005466 <spi_flash_enter_low_power_mode+0x3e>
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	00010208 	.word	0x00010208
 8005480:	0001020c 	.word	0x0001020c
 8005484:	00010214 	.word	0x00010214
 8005488:	0001021c 	.word	0x0001021c
 800548c:	00010204 	.word	0x00010204
 8005490:	00010218 	.word	0x00010218

08005494 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
 800549a:	463b      	mov	r3, r7
 800549c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	22ab      	movs	r2, #171	; 0xab
 80054a2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
 80054a4:	2100      	movs	r1, #0
 80054a6:	4810      	ldr	r0, [pc, #64]	; (80054e8 <spi_flash_leave_low_power_mode+0x54>)
 80054a8:	f7ff f84d 	bl	8004546 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	4619      	mov	r1, r3
 80054b2:	480e      	ldr	r0, [pc, #56]	; (80054ec <spi_flash_leave_low_power_mode+0x58>)
 80054b4:	f7ff f847 	bl	8004546 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
 80054b8:	2101      	movs	r1, #1
 80054ba:	480d      	ldr	r0, [pc, #52]	; (80054f0 <spi_flash_leave_low_power_mode+0x5c>)
 80054bc:	f7ff f843 	bl	8004546 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
 80054c0:	2100      	movs	r1, #0
 80054c2:	480c      	ldr	r0, [pc, #48]	; (80054f4 <spi_flash_leave_low_power_mode+0x60>)
 80054c4:	f7ff f83f 	bl	8004546 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
 80054c8:	2181      	movs	r1, #129	; 0x81
 80054ca:	480b      	ldr	r0, [pc, #44]	; (80054f8 <spi_flash_leave_low_power_mode+0x64>)
 80054cc:	f7ff f83b 	bl	8004546 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
 80054d0:	bf00      	nop
 80054d2:	480a      	ldr	r0, [pc, #40]	; (80054fc <spi_flash_leave_low_power_mode+0x68>)
 80054d4:	f7ff f81d 	bl	8004512 <nm_read_reg>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d1f9      	bne.n	80054d2 <spi_flash_leave_low_power_mode+0x3e>
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	00010208 	.word	0x00010208
 80054ec:	0001020c 	.word	0x0001020c
 80054f0:	00010214 	.word	0x00010214
 80054f4:	0001021c 	.word	0x0001021c
 80054f8:	00010204 	.word	0x00010204
 80054fc:	00010218 	.word	0x00010218

08005500 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = M2M_SUCCESS;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
	if(REV(nmi_get_chipid()) >= REV_3A0) {
 800550e:	f7fe fd7d 	bl	800400c <nmi_get_chipid>
 8005512:	4603      	mov	r3, r0
 8005514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005518:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 800551c:	d338      	bcc.n	8005590 <spi_flash_enable+0x90>
		uint32 u32Val;

		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	4619      	mov	r1, r3
 8005524:	f241 4010 	movw	r0, #5136	; 0x1410
 8005528:	f7fe ffff 	bl	800452a <nm_read_reg_with_ret>
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]
		if(s8Ret != M2M_SUCCESS) {
 8005530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d12a      	bne.n	800558e <spi_flash_enable+0x8e>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 63ee 	bic.w	r3, r3, #124780544	; 0x7700000
 800553e:	f423 23ee 	bic.w	r3, r3, #487424	; 0x77000
 8005542:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f043 7388 	orr.w	r3, r3, #17825792	; 0x1100000
 800554a:	f443 3388 	orr.w	r3, r3, #69632	; 0x11000
 800554e:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4619      	mov	r1, r3
 8005554:	f241 4010 	movw	r0, #5136	; 0x1410
 8005558:	f7fe fff5 	bl	8004546 <nm_write_reg>
		if(enable) {
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <spi_flash_enable+0x68>
			spi_flash_leave_low_power_mode();
 8005562:	f7ff ff97 	bl	8005494 <spi_flash_leave_low_power_mode>
 8005566:	e001      	b.n	800556c <spi_flash_enable+0x6c>
		} else {
			spi_flash_enter_low_power_mode();
 8005568:	f7ff ff5e 	bl	8005428 <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f023 63ee 	bic.w	r3, r3, #124780544	; 0x7700000
 8005572:	f423 23ee 	bic.w	r3, r3, #487424	; 0x77000
 8005576:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557e:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4619      	mov	r1, r3
 8005584:	f241 4010 	movw	r0, #5136	; 0x1410
 8005588:	f7fe ffdd 	bl	8004546 <nm_write_reg>
 800558c:	e000      	b.n	8005590 <spi_flash_enable+0x90>
			goto ERR1;
 800558e:	bf00      	nop
	}
ERR1:
	return s8Ret;
 8005590:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <__errno>:
 800559c:	4b01      	ldr	r3, [pc, #4]	; (80055a4 <__errno+0x8>)
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000010 	.word	0x20000010

080055a8 <__libc_init_array>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4e0d      	ldr	r6, [pc, #52]	; (80055e0 <__libc_init_array+0x38>)
 80055ac:	4c0d      	ldr	r4, [pc, #52]	; (80055e4 <__libc_init_array+0x3c>)
 80055ae:	1ba4      	subs	r4, r4, r6
 80055b0:	10a4      	asrs	r4, r4, #2
 80055b2:	2500      	movs	r5, #0
 80055b4:	42a5      	cmp	r5, r4
 80055b6:	d109      	bne.n	80055cc <__libc_init_array+0x24>
 80055b8:	4e0b      	ldr	r6, [pc, #44]	; (80055e8 <__libc_init_array+0x40>)
 80055ba:	4c0c      	ldr	r4, [pc, #48]	; (80055ec <__libc_init_array+0x44>)
 80055bc:	f000 ff8c 	bl	80064d8 <_init>
 80055c0:	1ba4      	subs	r4, r4, r6
 80055c2:	10a4      	asrs	r4, r4, #2
 80055c4:	2500      	movs	r5, #0
 80055c6:	42a5      	cmp	r5, r4
 80055c8:	d105      	bne.n	80055d6 <__libc_init_array+0x2e>
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055d0:	4798      	blx	r3
 80055d2:	3501      	adds	r5, #1
 80055d4:	e7ee      	b.n	80055b4 <__libc_init_array+0xc>
 80055d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055da:	4798      	blx	r3
 80055dc:	3501      	adds	r5, #1
 80055de:	e7f2      	b.n	80055c6 <__libc_init_array+0x1e>
 80055e0:	08006828 	.word	0x08006828
 80055e4:	08006828 	.word	0x08006828
 80055e8:	08006828 	.word	0x08006828
 80055ec:	0800682c 	.word	0x0800682c

080055f0 <memcmp>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	3901      	subs	r1, #1
 80055f4:	4402      	add	r2, r0
 80055f6:	4290      	cmp	r0, r2
 80055f8:	d101      	bne.n	80055fe <memcmp+0xe>
 80055fa:	2000      	movs	r0, #0
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005602:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005606:	42a3      	cmp	r3, r4
 8005608:	d0f5      	beq.n	80055f6 <memcmp+0x6>
 800560a:	1b18      	subs	r0, r3, r4
 800560c:	bd10      	pop	{r4, pc}

0800560e <memset>:
 800560e:	4402      	add	r2, r0
 8005610:	4603      	mov	r3, r0
 8005612:	4293      	cmp	r3, r2
 8005614:	d100      	bne.n	8005618 <memset+0xa>
 8005616:	4770      	bx	lr
 8005618:	f803 1b01 	strb.w	r1, [r3], #1
 800561c:	e7f9      	b.n	8005612 <memset+0x4>
	...

08005620 <iprintf>:
 8005620:	b40f      	push	{r0, r1, r2, r3}
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <iprintf+0x2c>)
 8005624:	b513      	push	{r0, r1, r4, lr}
 8005626:	681c      	ldr	r4, [r3, #0]
 8005628:	b124      	cbz	r4, 8005634 <iprintf+0x14>
 800562a:	69a3      	ldr	r3, [r4, #24]
 800562c:	b913      	cbnz	r3, 8005634 <iprintf+0x14>
 800562e:	4620      	mov	r0, r4
 8005630:	f000 fa24 	bl	8005a7c <__sinit>
 8005634:	ab05      	add	r3, sp, #20
 8005636:	9a04      	ldr	r2, [sp, #16]
 8005638:	68a1      	ldr	r1, [r4, #8]
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	4620      	mov	r0, r4
 800563e:	f000 fbe1 	bl	8005e04 <_vfiprintf_r>
 8005642:	b002      	add	sp, #8
 8005644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005648:	b004      	add	sp, #16
 800564a:	4770      	bx	lr
 800564c:	20000010 	.word	0x20000010

08005650 <_puts_r>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	460e      	mov	r6, r1
 8005654:	4605      	mov	r5, r0
 8005656:	b118      	cbz	r0, 8005660 <_puts_r+0x10>
 8005658:	6983      	ldr	r3, [r0, #24]
 800565a:	b90b      	cbnz	r3, 8005660 <_puts_r+0x10>
 800565c:	f000 fa0e 	bl	8005a7c <__sinit>
 8005660:	69ab      	ldr	r3, [r5, #24]
 8005662:	68ac      	ldr	r4, [r5, #8]
 8005664:	b913      	cbnz	r3, 800566c <_puts_r+0x1c>
 8005666:	4628      	mov	r0, r5
 8005668:	f000 fa08 	bl	8005a7c <__sinit>
 800566c:	4b23      	ldr	r3, [pc, #140]	; (80056fc <_puts_r+0xac>)
 800566e:	429c      	cmp	r4, r3
 8005670:	d117      	bne.n	80056a2 <_puts_r+0x52>
 8005672:	686c      	ldr	r4, [r5, #4]
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	071b      	lsls	r3, r3, #28
 8005678:	d51d      	bpl.n	80056b6 <_puts_r+0x66>
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	b1db      	cbz	r3, 80056b6 <_puts_r+0x66>
 800567e:	3e01      	subs	r6, #1
 8005680:	68a3      	ldr	r3, [r4, #8]
 8005682:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005686:	3b01      	subs	r3, #1
 8005688:	60a3      	str	r3, [r4, #8]
 800568a:	b9e9      	cbnz	r1, 80056c8 <_puts_r+0x78>
 800568c:	2b00      	cmp	r3, #0
 800568e:	da2e      	bge.n	80056ee <_puts_r+0x9e>
 8005690:	4622      	mov	r2, r4
 8005692:	210a      	movs	r1, #10
 8005694:	4628      	mov	r0, r5
 8005696:	f000 f83f 	bl	8005718 <__swbuf_r>
 800569a:	3001      	adds	r0, #1
 800569c:	d011      	beq.n	80056c2 <_puts_r+0x72>
 800569e:	200a      	movs	r0, #10
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
 80056a2:	4b17      	ldr	r3, [pc, #92]	; (8005700 <_puts_r+0xb0>)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	d101      	bne.n	80056ac <_puts_r+0x5c>
 80056a8:	68ac      	ldr	r4, [r5, #8]
 80056aa:	e7e3      	b.n	8005674 <_puts_r+0x24>
 80056ac:	4b15      	ldr	r3, [pc, #84]	; (8005704 <_puts_r+0xb4>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	bf08      	it	eq
 80056b2:	68ec      	ldreq	r4, [r5, #12]
 80056b4:	e7de      	b.n	8005674 <_puts_r+0x24>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f87f 	bl	80057bc <__swsetup_r>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d0dd      	beq.n	800567e <_puts_r+0x2e>
 80056c2:	f04f 30ff 	mov.w	r0, #4294967295
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da04      	bge.n	80056d6 <_puts_r+0x86>
 80056cc:	69a2      	ldr	r2, [r4, #24]
 80056ce:	4293      	cmp	r3, r2
 80056d0:	db06      	blt.n	80056e0 <_puts_r+0x90>
 80056d2:	290a      	cmp	r1, #10
 80056d4:	d004      	beq.n	80056e0 <_puts_r+0x90>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	6022      	str	r2, [r4, #0]
 80056dc:	7019      	strb	r1, [r3, #0]
 80056de:	e7cf      	b.n	8005680 <_puts_r+0x30>
 80056e0:	4622      	mov	r2, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f818 	bl	8005718 <__swbuf_r>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d1c9      	bne.n	8005680 <_puts_r+0x30>
 80056ec:	e7e9      	b.n	80056c2 <_puts_r+0x72>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	200a      	movs	r0, #10
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	6022      	str	r2, [r4, #0]
 80056f6:	7018      	strb	r0, [r3, #0]
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	bf00      	nop
 80056fc:	080067ac 	.word	0x080067ac
 8005700:	080067cc 	.word	0x080067cc
 8005704:	0800678c 	.word	0x0800678c

08005708 <puts>:
 8005708:	4b02      	ldr	r3, [pc, #8]	; (8005714 <puts+0xc>)
 800570a:	4601      	mov	r1, r0
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	f7ff bf9f 	b.w	8005650 <_puts_r>
 8005712:	bf00      	nop
 8005714:	20000010 	.word	0x20000010

08005718 <__swbuf_r>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	460e      	mov	r6, r1
 800571c:	4614      	mov	r4, r2
 800571e:	4605      	mov	r5, r0
 8005720:	b118      	cbz	r0, 800572a <__swbuf_r+0x12>
 8005722:	6983      	ldr	r3, [r0, #24]
 8005724:	b90b      	cbnz	r3, 800572a <__swbuf_r+0x12>
 8005726:	f000 f9a9 	bl	8005a7c <__sinit>
 800572a:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <__swbuf_r+0x98>)
 800572c:	429c      	cmp	r4, r3
 800572e:	d12a      	bne.n	8005786 <__swbuf_r+0x6e>
 8005730:	686c      	ldr	r4, [r5, #4]
 8005732:	69a3      	ldr	r3, [r4, #24]
 8005734:	60a3      	str	r3, [r4, #8]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	071a      	lsls	r2, r3, #28
 800573a:	d52e      	bpl.n	800579a <__swbuf_r+0x82>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	b363      	cbz	r3, 800579a <__swbuf_r+0x82>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	6820      	ldr	r0, [r4, #0]
 8005744:	1ac0      	subs	r0, r0, r3
 8005746:	6963      	ldr	r3, [r4, #20]
 8005748:	b2f6      	uxtb	r6, r6
 800574a:	4298      	cmp	r0, r3
 800574c:	4637      	mov	r7, r6
 800574e:	db04      	blt.n	800575a <__swbuf_r+0x42>
 8005750:	4621      	mov	r1, r4
 8005752:	4628      	mov	r0, r5
 8005754:	f000 f928 	bl	80059a8 <_fflush_r>
 8005758:	bb28      	cbnz	r0, 80057a6 <__swbuf_r+0x8e>
 800575a:	68a3      	ldr	r3, [r4, #8]
 800575c:	3b01      	subs	r3, #1
 800575e:	60a3      	str	r3, [r4, #8]
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	701e      	strb	r6, [r3, #0]
 8005768:	6963      	ldr	r3, [r4, #20]
 800576a:	3001      	adds	r0, #1
 800576c:	4298      	cmp	r0, r3
 800576e:	d004      	beq.n	800577a <__swbuf_r+0x62>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	07db      	lsls	r3, r3, #31
 8005774:	d519      	bpl.n	80057aa <__swbuf_r+0x92>
 8005776:	2e0a      	cmp	r6, #10
 8005778:	d117      	bne.n	80057aa <__swbuf_r+0x92>
 800577a:	4621      	mov	r1, r4
 800577c:	4628      	mov	r0, r5
 800577e:	f000 f913 	bl	80059a8 <_fflush_r>
 8005782:	b190      	cbz	r0, 80057aa <__swbuf_r+0x92>
 8005784:	e00f      	b.n	80057a6 <__swbuf_r+0x8e>
 8005786:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <__swbuf_r+0x9c>)
 8005788:	429c      	cmp	r4, r3
 800578a:	d101      	bne.n	8005790 <__swbuf_r+0x78>
 800578c:	68ac      	ldr	r4, [r5, #8]
 800578e:	e7d0      	b.n	8005732 <__swbuf_r+0x1a>
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <__swbuf_r+0xa0>)
 8005792:	429c      	cmp	r4, r3
 8005794:	bf08      	it	eq
 8005796:	68ec      	ldreq	r4, [r5, #12]
 8005798:	e7cb      	b.n	8005732 <__swbuf_r+0x1a>
 800579a:	4621      	mov	r1, r4
 800579c:	4628      	mov	r0, r5
 800579e:	f000 f80d 	bl	80057bc <__swsetup_r>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d0cc      	beq.n	8005740 <__swbuf_r+0x28>
 80057a6:	f04f 37ff 	mov.w	r7, #4294967295
 80057aa:	4638      	mov	r0, r7
 80057ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ae:	bf00      	nop
 80057b0:	080067ac 	.word	0x080067ac
 80057b4:	080067cc 	.word	0x080067cc
 80057b8:	0800678c 	.word	0x0800678c

080057bc <__swsetup_r>:
 80057bc:	4b32      	ldr	r3, [pc, #200]	; (8005888 <__swsetup_r+0xcc>)
 80057be:	b570      	push	{r4, r5, r6, lr}
 80057c0:	681d      	ldr	r5, [r3, #0]
 80057c2:	4606      	mov	r6, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	b125      	cbz	r5, 80057d2 <__swsetup_r+0x16>
 80057c8:	69ab      	ldr	r3, [r5, #24]
 80057ca:	b913      	cbnz	r3, 80057d2 <__swsetup_r+0x16>
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 f955 	bl	8005a7c <__sinit>
 80057d2:	4b2e      	ldr	r3, [pc, #184]	; (800588c <__swsetup_r+0xd0>)
 80057d4:	429c      	cmp	r4, r3
 80057d6:	d10f      	bne.n	80057f8 <__swsetup_r+0x3c>
 80057d8:	686c      	ldr	r4, [r5, #4]
 80057da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	0715      	lsls	r5, r2, #28
 80057e2:	d42c      	bmi.n	800583e <__swsetup_r+0x82>
 80057e4:	06d0      	lsls	r0, r2, #27
 80057e6:	d411      	bmi.n	800580c <__swsetup_r+0x50>
 80057e8:	2209      	movs	r2, #9
 80057ea:	6032      	str	r2, [r6, #0]
 80057ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	f04f 30ff 	mov.w	r0, #4294967295
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <__swsetup_r+0xd4>)
 80057fa:	429c      	cmp	r4, r3
 80057fc:	d101      	bne.n	8005802 <__swsetup_r+0x46>
 80057fe:	68ac      	ldr	r4, [r5, #8]
 8005800:	e7eb      	b.n	80057da <__swsetup_r+0x1e>
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <__swsetup_r+0xd8>)
 8005804:	429c      	cmp	r4, r3
 8005806:	bf08      	it	eq
 8005808:	68ec      	ldreq	r4, [r5, #12]
 800580a:	e7e6      	b.n	80057da <__swsetup_r+0x1e>
 800580c:	0751      	lsls	r1, r2, #29
 800580e:	d512      	bpl.n	8005836 <__swsetup_r+0x7a>
 8005810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005812:	b141      	cbz	r1, 8005826 <__swsetup_r+0x6a>
 8005814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005818:	4299      	cmp	r1, r3
 800581a:	d002      	beq.n	8005822 <__swsetup_r+0x66>
 800581c:	4630      	mov	r0, r6
 800581e:	f000 fa1b 	bl	8005c58 <_free_r>
 8005822:	2300      	movs	r3, #0
 8005824:	6363      	str	r3, [r4, #52]	; 0x34
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	2300      	movs	r3, #0
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	f043 0308 	orr.w	r3, r3, #8
 800583c:	81a3      	strh	r3, [r4, #12]
 800583e:	6923      	ldr	r3, [r4, #16]
 8005840:	b94b      	cbnz	r3, 8005856 <__swsetup_r+0x9a>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584c:	d003      	beq.n	8005856 <__swsetup_r+0x9a>
 800584e:	4621      	mov	r1, r4
 8005850:	4630      	mov	r0, r6
 8005852:	f000 f9c1 	bl	8005bd8 <__smakebuf_r>
 8005856:	89a2      	ldrh	r2, [r4, #12]
 8005858:	f012 0301 	ands.w	r3, r2, #1
 800585c:	d00c      	beq.n	8005878 <__swsetup_r+0xbc>
 800585e:	2300      	movs	r3, #0
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	6963      	ldr	r3, [r4, #20]
 8005864:	425b      	negs	r3, r3
 8005866:	61a3      	str	r3, [r4, #24]
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	b953      	cbnz	r3, 8005882 <__swsetup_r+0xc6>
 800586c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005870:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005874:	d1ba      	bne.n	80057ec <__swsetup_r+0x30>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	0792      	lsls	r2, r2, #30
 800587a:	bf58      	it	pl
 800587c:	6963      	ldrpl	r3, [r4, #20]
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	e7f2      	b.n	8005868 <__swsetup_r+0xac>
 8005882:	2000      	movs	r0, #0
 8005884:	e7f7      	b.n	8005876 <__swsetup_r+0xba>
 8005886:	bf00      	nop
 8005888:	20000010 	.word	0x20000010
 800588c:	080067ac 	.word	0x080067ac
 8005890:	080067cc 	.word	0x080067cc
 8005894:	0800678c 	.word	0x0800678c

08005898 <__sflush_r>:
 8005898:	898a      	ldrh	r2, [r1, #12]
 800589a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589e:	4605      	mov	r5, r0
 80058a0:	0710      	lsls	r0, r2, #28
 80058a2:	460c      	mov	r4, r1
 80058a4:	d45a      	bmi.n	800595c <__sflush_r+0xc4>
 80058a6:	684b      	ldr	r3, [r1, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dc05      	bgt.n	80058b8 <__sflush_r+0x20>
 80058ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	dc02      	bgt.n	80058b8 <__sflush_r+0x20>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ba:	2e00      	cmp	r6, #0
 80058bc:	d0f9      	beq.n	80058b2 <__sflush_r+0x1a>
 80058be:	2300      	movs	r3, #0
 80058c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058c4:	682f      	ldr	r7, [r5, #0]
 80058c6:	602b      	str	r3, [r5, #0]
 80058c8:	d033      	beq.n	8005932 <__sflush_r+0x9a>
 80058ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	075a      	lsls	r2, r3, #29
 80058d0:	d505      	bpl.n	80058de <__sflush_r+0x46>
 80058d2:	6863      	ldr	r3, [r4, #4]
 80058d4:	1ac0      	subs	r0, r0, r3
 80058d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058d8:	b10b      	cbz	r3, 80058de <__sflush_r+0x46>
 80058da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058dc:	1ac0      	subs	r0, r0, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	4602      	mov	r2, r0
 80058e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058e4:	6a21      	ldr	r1, [r4, #32]
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b0      	blx	r6
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	d106      	bne.n	80058fe <__sflush_r+0x66>
 80058f0:	6829      	ldr	r1, [r5, #0]
 80058f2:	291d      	cmp	r1, #29
 80058f4:	d84b      	bhi.n	800598e <__sflush_r+0xf6>
 80058f6:	4a2b      	ldr	r2, [pc, #172]	; (80059a4 <__sflush_r+0x10c>)
 80058f8:	40ca      	lsrs	r2, r1
 80058fa:	07d6      	lsls	r6, r2, #31
 80058fc:	d547      	bpl.n	800598e <__sflush_r+0xf6>
 80058fe:	2200      	movs	r2, #0
 8005900:	6062      	str	r2, [r4, #4]
 8005902:	04d9      	lsls	r1, r3, #19
 8005904:	6922      	ldr	r2, [r4, #16]
 8005906:	6022      	str	r2, [r4, #0]
 8005908:	d504      	bpl.n	8005914 <__sflush_r+0x7c>
 800590a:	1c42      	adds	r2, r0, #1
 800590c:	d101      	bne.n	8005912 <__sflush_r+0x7a>
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	b903      	cbnz	r3, 8005914 <__sflush_r+0x7c>
 8005912:	6560      	str	r0, [r4, #84]	; 0x54
 8005914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005916:	602f      	str	r7, [r5, #0]
 8005918:	2900      	cmp	r1, #0
 800591a:	d0ca      	beq.n	80058b2 <__sflush_r+0x1a>
 800591c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005920:	4299      	cmp	r1, r3
 8005922:	d002      	beq.n	800592a <__sflush_r+0x92>
 8005924:	4628      	mov	r0, r5
 8005926:	f000 f997 	bl	8005c58 <_free_r>
 800592a:	2000      	movs	r0, #0
 800592c:	6360      	str	r0, [r4, #52]	; 0x34
 800592e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005932:	6a21      	ldr	r1, [r4, #32]
 8005934:	2301      	movs	r3, #1
 8005936:	4628      	mov	r0, r5
 8005938:	47b0      	blx	r6
 800593a:	1c41      	adds	r1, r0, #1
 800593c:	d1c6      	bne.n	80058cc <__sflush_r+0x34>
 800593e:	682b      	ldr	r3, [r5, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0c3      	beq.n	80058cc <__sflush_r+0x34>
 8005944:	2b1d      	cmp	r3, #29
 8005946:	d001      	beq.n	800594c <__sflush_r+0xb4>
 8005948:	2b16      	cmp	r3, #22
 800594a:	d101      	bne.n	8005950 <__sflush_r+0xb8>
 800594c:	602f      	str	r7, [r5, #0]
 800594e:	e7b0      	b.n	80058b2 <__sflush_r+0x1a>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800595c:	690f      	ldr	r7, [r1, #16]
 800595e:	2f00      	cmp	r7, #0
 8005960:	d0a7      	beq.n	80058b2 <__sflush_r+0x1a>
 8005962:	0793      	lsls	r3, r2, #30
 8005964:	680e      	ldr	r6, [r1, #0]
 8005966:	bf08      	it	eq
 8005968:	694b      	ldreq	r3, [r1, #20]
 800596a:	600f      	str	r7, [r1, #0]
 800596c:	bf18      	it	ne
 800596e:	2300      	movne	r3, #0
 8005970:	eba6 0807 	sub.w	r8, r6, r7
 8005974:	608b      	str	r3, [r1, #8]
 8005976:	f1b8 0f00 	cmp.w	r8, #0
 800597a:	dd9a      	ble.n	80058b2 <__sflush_r+0x1a>
 800597c:	4643      	mov	r3, r8
 800597e:	463a      	mov	r2, r7
 8005980:	6a21      	ldr	r1, [r4, #32]
 8005982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005984:	4628      	mov	r0, r5
 8005986:	47b0      	blx	r6
 8005988:	2800      	cmp	r0, #0
 800598a:	dc07      	bgt.n	800599c <__sflush_r+0x104>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599c:	4407      	add	r7, r0
 800599e:	eba8 0800 	sub.w	r8, r8, r0
 80059a2:	e7e8      	b.n	8005976 <__sflush_r+0xde>
 80059a4:	20400001 	.word	0x20400001

080059a8 <_fflush_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	690b      	ldr	r3, [r1, #16]
 80059ac:	4605      	mov	r5, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	b1db      	cbz	r3, 80059ea <_fflush_r+0x42>
 80059b2:	b118      	cbz	r0, 80059bc <_fflush_r+0x14>
 80059b4:	6983      	ldr	r3, [r0, #24]
 80059b6:	b90b      	cbnz	r3, 80059bc <_fflush_r+0x14>
 80059b8:	f000 f860 	bl	8005a7c <__sinit>
 80059bc:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <_fflush_r+0x48>)
 80059be:	429c      	cmp	r4, r3
 80059c0:	d109      	bne.n	80059d6 <_fflush_r+0x2e>
 80059c2:	686c      	ldr	r4, [r5, #4]
 80059c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c8:	b17b      	cbz	r3, 80059ea <_fflush_r+0x42>
 80059ca:	4621      	mov	r1, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059d2:	f7ff bf61 	b.w	8005898 <__sflush_r>
 80059d6:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <_fflush_r+0x4c>)
 80059d8:	429c      	cmp	r4, r3
 80059da:	d101      	bne.n	80059e0 <_fflush_r+0x38>
 80059dc:	68ac      	ldr	r4, [r5, #8]
 80059de:	e7f1      	b.n	80059c4 <_fflush_r+0x1c>
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <_fflush_r+0x50>)
 80059e2:	429c      	cmp	r4, r3
 80059e4:	bf08      	it	eq
 80059e6:	68ec      	ldreq	r4, [r5, #12]
 80059e8:	e7ec      	b.n	80059c4 <_fflush_r+0x1c>
 80059ea:	2000      	movs	r0, #0
 80059ec:	bd38      	pop	{r3, r4, r5, pc}
 80059ee:	bf00      	nop
 80059f0:	080067ac 	.word	0x080067ac
 80059f4:	080067cc 	.word	0x080067cc
 80059f8:	0800678c 	.word	0x0800678c

080059fc <_cleanup_r>:
 80059fc:	4901      	ldr	r1, [pc, #4]	; (8005a04 <_cleanup_r+0x8>)
 80059fe:	f000 b8a9 	b.w	8005b54 <_fwalk_reent>
 8005a02:	bf00      	nop
 8005a04:	080059a9 	.word	0x080059a9

08005a08 <std.isra.0>:
 8005a08:	2300      	movs	r3, #0
 8005a0a:	b510      	push	{r4, lr}
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	6003      	str	r3, [r0, #0]
 8005a10:	6043      	str	r3, [r0, #4]
 8005a12:	6083      	str	r3, [r0, #8]
 8005a14:	8181      	strh	r1, [r0, #12]
 8005a16:	6643      	str	r3, [r0, #100]	; 0x64
 8005a18:	81c2      	strh	r2, [r0, #14]
 8005a1a:	6103      	str	r3, [r0, #16]
 8005a1c:	6143      	str	r3, [r0, #20]
 8005a1e:	6183      	str	r3, [r0, #24]
 8005a20:	4619      	mov	r1, r3
 8005a22:	2208      	movs	r2, #8
 8005a24:	305c      	adds	r0, #92	; 0x5c
 8005a26:	f7ff fdf2 	bl	800560e <memset>
 8005a2a:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <std.isra.0+0x38>)
 8005a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <std.isra.0+0x3c>)
 8005a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <std.isra.0+0x40>)
 8005a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <std.isra.0+0x44>)
 8005a38:	6224      	str	r4, [r4, #32]
 8005a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a3c:	bd10      	pop	{r4, pc}
 8005a3e:	bf00      	nop
 8005a40:	0800637d 	.word	0x0800637d
 8005a44:	0800639f 	.word	0x0800639f
 8005a48:	080063d7 	.word	0x080063d7
 8005a4c:	080063fb 	.word	0x080063fb

08005a50 <__sfmoreglue>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	1e4a      	subs	r2, r1, #1
 8005a54:	2568      	movs	r5, #104	; 0x68
 8005a56:	4355      	muls	r5, r2
 8005a58:	460e      	mov	r6, r1
 8005a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a5e:	f000 f949 	bl	8005cf4 <_malloc_r>
 8005a62:	4604      	mov	r4, r0
 8005a64:	b140      	cbz	r0, 8005a78 <__sfmoreglue+0x28>
 8005a66:	2100      	movs	r1, #0
 8005a68:	e880 0042 	stmia.w	r0, {r1, r6}
 8005a6c:	300c      	adds	r0, #12
 8005a6e:	60a0      	str	r0, [r4, #8]
 8005a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a74:	f7ff fdcb 	bl	800560e <memset>
 8005a78:	4620      	mov	r0, r4
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}

08005a7c <__sinit>:
 8005a7c:	6983      	ldr	r3, [r0, #24]
 8005a7e:	b510      	push	{r4, lr}
 8005a80:	4604      	mov	r4, r0
 8005a82:	bb33      	cbnz	r3, 8005ad2 <__sinit+0x56>
 8005a84:	6483      	str	r3, [r0, #72]	; 0x48
 8005a86:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005a88:	6503      	str	r3, [r0, #80]	; 0x50
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <__sinit+0x58>)
 8005a8c:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <__sinit+0x5c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6282      	str	r2, [r0, #40]	; 0x28
 8005a92:	4298      	cmp	r0, r3
 8005a94:	bf04      	itt	eq
 8005a96:	2301      	moveq	r3, #1
 8005a98:	6183      	streq	r3, [r0, #24]
 8005a9a:	f000 f81f 	bl	8005adc <__sfp>
 8005a9e:	6060      	str	r0, [r4, #4]
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 f81b 	bl	8005adc <__sfp>
 8005aa6:	60a0      	str	r0, [r4, #8]
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 f817 	bl	8005adc <__sfp>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	60e0      	str	r0, [r4, #12]
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	6860      	ldr	r0, [r4, #4]
 8005ab6:	f7ff ffa7 	bl	8005a08 <std.isra.0>
 8005aba:	2201      	movs	r2, #1
 8005abc:	2109      	movs	r1, #9
 8005abe:	68a0      	ldr	r0, [r4, #8]
 8005ac0:	f7ff ffa2 	bl	8005a08 <std.isra.0>
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	2112      	movs	r1, #18
 8005ac8:	68e0      	ldr	r0, [r4, #12]
 8005aca:	f7ff ff9d 	bl	8005a08 <std.isra.0>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	61a3      	str	r3, [r4, #24]
 8005ad2:	bd10      	pop	{r4, pc}
 8005ad4:	08006788 	.word	0x08006788
 8005ad8:	080059fd 	.word	0x080059fd

08005adc <__sfp>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <__sfp+0x74>)
 8005ae0:	681e      	ldr	r6, [r3, #0]
 8005ae2:	69b3      	ldr	r3, [r6, #24]
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	b913      	cbnz	r3, 8005aee <__sfp+0x12>
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7ff ffc7 	bl	8005a7c <__sinit>
 8005aee:	3648      	adds	r6, #72	; 0x48
 8005af0:	68b4      	ldr	r4, [r6, #8]
 8005af2:	6873      	ldr	r3, [r6, #4]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	d503      	bpl.n	8005b00 <__sfp+0x24>
 8005af8:	6833      	ldr	r3, [r6, #0]
 8005afa:	b133      	cbz	r3, 8005b0a <__sfp+0x2e>
 8005afc:	6836      	ldr	r6, [r6, #0]
 8005afe:	e7f7      	b.n	8005af0 <__sfp+0x14>
 8005b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b04:	b16d      	cbz	r5, 8005b22 <__sfp+0x46>
 8005b06:	3468      	adds	r4, #104	; 0x68
 8005b08:	e7f4      	b.n	8005af4 <__sfp+0x18>
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f7ff ff9f 	bl	8005a50 <__sfmoreglue>
 8005b12:	6030      	str	r0, [r6, #0]
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d1f1      	bne.n	8005afc <__sfp+0x20>
 8005b18:	230c      	movs	r3, #12
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	4620      	mov	r0, r4
 8005b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b26:	81e3      	strh	r3, [r4, #14]
 8005b28:	2301      	movs	r3, #1
 8005b2a:	81a3      	strh	r3, [r4, #12]
 8005b2c:	6665      	str	r5, [r4, #100]	; 0x64
 8005b2e:	6025      	str	r5, [r4, #0]
 8005b30:	60a5      	str	r5, [r4, #8]
 8005b32:	6065      	str	r5, [r4, #4]
 8005b34:	6125      	str	r5, [r4, #16]
 8005b36:	6165      	str	r5, [r4, #20]
 8005b38:	61a5      	str	r5, [r4, #24]
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b42:	f7ff fd64 	bl	800560e <memset>
 8005b46:	6365      	str	r5, [r4, #52]	; 0x34
 8005b48:	63a5      	str	r5, [r4, #56]	; 0x38
 8005b4a:	64a5      	str	r5, [r4, #72]	; 0x48
 8005b4c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005b4e:	e7e6      	b.n	8005b1e <__sfp+0x42>
 8005b50:	08006788 	.word	0x08006788

08005b54 <_fwalk_reent>:
 8005b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b58:	4680      	mov	r8, r0
 8005b5a:	4689      	mov	r9, r1
 8005b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b60:	2600      	movs	r6, #0
 8005b62:	b914      	cbnz	r4, 8005b6a <_fwalk_reent+0x16>
 8005b64:	4630      	mov	r0, r6
 8005b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6a:	68a5      	ldr	r5, [r4, #8]
 8005b6c:	6867      	ldr	r7, [r4, #4]
 8005b6e:	3f01      	subs	r7, #1
 8005b70:	d501      	bpl.n	8005b76 <_fwalk_reent+0x22>
 8005b72:	6824      	ldr	r4, [r4, #0]
 8005b74:	e7f5      	b.n	8005b62 <_fwalk_reent+0xe>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d907      	bls.n	8005b8c <_fwalk_reent+0x38>
 8005b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b80:	3301      	adds	r3, #1
 8005b82:	d003      	beq.n	8005b8c <_fwalk_reent+0x38>
 8005b84:	4629      	mov	r1, r5
 8005b86:	4640      	mov	r0, r8
 8005b88:	47c8      	blx	r9
 8005b8a:	4306      	orrs	r6, r0
 8005b8c:	3568      	adds	r5, #104	; 0x68
 8005b8e:	e7ee      	b.n	8005b6e <_fwalk_reent+0x1a>

08005b90 <__swhatbuf_r>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	460e      	mov	r6, r1
 8005b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b98:	2900      	cmp	r1, #0
 8005b9a:	b090      	sub	sp, #64	; 0x40
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	da07      	bge.n	8005bb2 <__swhatbuf_r+0x22>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	89b3      	ldrh	r3, [r6, #12]
 8005ba8:	061a      	lsls	r2, r3, #24
 8005baa:	d410      	bmi.n	8005bce <__swhatbuf_r+0x3e>
 8005bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb0:	e00e      	b.n	8005bd0 <__swhatbuf_r+0x40>
 8005bb2:	aa01      	add	r2, sp, #4
 8005bb4:	f000 fc48 	bl	8006448 <_fstat_r>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	dbf2      	blt.n	8005ba2 <__swhatbuf_r+0x12>
 8005bbc:	9a02      	ldr	r2, [sp, #8]
 8005bbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bc6:	425a      	negs	r2, r3
 8005bc8:	415a      	adcs	r2, r3
 8005bca:	602a      	str	r2, [r5, #0]
 8005bcc:	e7ee      	b.n	8005bac <__swhatbuf_r+0x1c>
 8005bce:	2340      	movs	r3, #64	; 0x40
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	6023      	str	r3, [r4, #0]
 8005bd4:	b010      	add	sp, #64	; 0x40
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}

08005bd8 <__smakebuf_r>:
 8005bd8:	898b      	ldrh	r3, [r1, #12]
 8005bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bdc:	079d      	lsls	r5, r3, #30
 8005bde:	4606      	mov	r6, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	d507      	bpl.n	8005bf4 <__smakebuf_r+0x1c>
 8005be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	2301      	movs	r3, #1
 8005bee:	6163      	str	r3, [r4, #20]
 8005bf0:	b002      	add	sp, #8
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	ab01      	add	r3, sp, #4
 8005bf6:	466a      	mov	r2, sp
 8005bf8:	f7ff ffca 	bl	8005b90 <__swhatbuf_r>
 8005bfc:	9900      	ldr	r1, [sp, #0]
 8005bfe:	4605      	mov	r5, r0
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 f877 	bl	8005cf4 <_malloc_r>
 8005c06:	b948      	cbnz	r0, 8005c1c <__smakebuf_r+0x44>
 8005c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c0c:	059a      	lsls	r2, r3, #22
 8005c0e:	d4ef      	bmi.n	8005bf0 <__smakebuf_r+0x18>
 8005c10:	f023 0303 	bic.w	r3, r3, #3
 8005c14:	f043 0302 	orr.w	r3, r3, #2
 8005c18:	81a3      	strh	r3, [r4, #12]
 8005c1a:	e7e3      	b.n	8005be4 <__smakebuf_r+0xc>
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <__smakebuf_r+0x7c>)
 8005c1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	6020      	str	r0, [r4, #0]
 8005c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	9b00      	ldr	r3, [sp, #0]
 8005c2c:	6163      	str	r3, [r4, #20]
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	6120      	str	r0, [r4, #16]
 8005c32:	b15b      	cbz	r3, 8005c4c <__smakebuf_r+0x74>
 8005c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 fc17 	bl	800646c <_isatty_r>
 8005c3e:	b128      	cbz	r0, 8005c4c <__smakebuf_r+0x74>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	81a3      	strh	r3, [r4, #12]
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	431d      	orrs	r5, r3
 8005c50:	81a5      	strh	r5, [r4, #12]
 8005c52:	e7cd      	b.n	8005bf0 <__smakebuf_r+0x18>
 8005c54:	080059fd 	.word	0x080059fd

08005c58 <_free_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	d045      	beq.n	8005cec <_free_r+0x94>
 8005c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c64:	1f0c      	subs	r4, r1, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bfb8      	it	lt
 8005c6a:	18e4      	addlt	r4, r4, r3
 8005c6c:	f000 fc20 	bl	80064b0 <__malloc_lock>
 8005c70:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <_free_r+0x98>)
 8005c72:	6813      	ldr	r3, [r2, #0]
 8005c74:	4610      	mov	r0, r2
 8005c76:	b933      	cbnz	r3, 8005c86 <_free_r+0x2e>
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	6014      	str	r4, [r2, #0]
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c82:	f000 bc16 	b.w	80064b2 <__malloc_unlock>
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	d90c      	bls.n	8005ca4 <_free_r+0x4c>
 8005c8a:	6821      	ldr	r1, [r4, #0]
 8005c8c:	1862      	adds	r2, r4, r1
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	bf04      	itt	eq
 8005c92:	681a      	ldreq	r2, [r3, #0]
 8005c94:	685b      	ldreq	r3, [r3, #4]
 8005c96:	6063      	str	r3, [r4, #4]
 8005c98:	bf04      	itt	eq
 8005c9a:	1852      	addeq	r2, r2, r1
 8005c9c:	6022      	streq	r2, [r4, #0]
 8005c9e:	6004      	str	r4, [r0, #0]
 8005ca0:	e7ec      	b.n	8005c7c <_free_r+0x24>
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	b10a      	cbz	r2, 8005cac <_free_r+0x54>
 8005ca8:	42a2      	cmp	r2, r4
 8005caa:	d9fa      	bls.n	8005ca2 <_free_r+0x4a>
 8005cac:	6819      	ldr	r1, [r3, #0]
 8005cae:	1858      	adds	r0, r3, r1
 8005cb0:	42a0      	cmp	r0, r4
 8005cb2:	d10b      	bne.n	8005ccc <_free_r+0x74>
 8005cb4:	6820      	ldr	r0, [r4, #0]
 8005cb6:	4401      	add	r1, r0
 8005cb8:	1858      	adds	r0, r3, r1
 8005cba:	4282      	cmp	r2, r0
 8005cbc:	6019      	str	r1, [r3, #0]
 8005cbe:	d1dd      	bne.n	8005c7c <_free_r+0x24>
 8005cc0:	6810      	ldr	r0, [r2, #0]
 8005cc2:	6852      	ldr	r2, [r2, #4]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	6019      	str	r1, [r3, #0]
 8005cca:	e7d7      	b.n	8005c7c <_free_r+0x24>
 8005ccc:	d902      	bls.n	8005cd4 <_free_r+0x7c>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	e7d3      	b.n	8005c7c <_free_r+0x24>
 8005cd4:	6820      	ldr	r0, [r4, #0]
 8005cd6:	1821      	adds	r1, r4, r0
 8005cd8:	428a      	cmp	r2, r1
 8005cda:	bf04      	itt	eq
 8005cdc:	6811      	ldreq	r1, [r2, #0]
 8005cde:	6852      	ldreq	r2, [r2, #4]
 8005ce0:	6062      	str	r2, [r4, #4]
 8005ce2:	bf04      	itt	eq
 8005ce4:	1809      	addeq	r1, r1, r0
 8005ce6:	6021      	streq	r1, [r4, #0]
 8005ce8:	605c      	str	r4, [r3, #4]
 8005cea:	e7c7      	b.n	8005c7c <_free_r+0x24>
 8005cec:	bd38      	pop	{r3, r4, r5, pc}
 8005cee:	bf00      	nop
 8005cf0:	200001d4 	.word	0x200001d4

08005cf4 <_malloc_r>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	1ccd      	adds	r5, r1, #3
 8005cf8:	f025 0503 	bic.w	r5, r5, #3
 8005cfc:	3508      	adds	r5, #8
 8005cfe:	2d0c      	cmp	r5, #12
 8005d00:	bf38      	it	cc
 8005d02:	250c      	movcc	r5, #12
 8005d04:	2d00      	cmp	r5, #0
 8005d06:	4606      	mov	r6, r0
 8005d08:	db01      	blt.n	8005d0e <_malloc_r+0x1a>
 8005d0a:	42a9      	cmp	r1, r5
 8005d0c:	d903      	bls.n	8005d16 <_malloc_r+0x22>
 8005d0e:	230c      	movs	r3, #12
 8005d10:	6033      	str	r3, [r6, #0]
 8005d12:	2000      	movs	r0, #0
 8005d14:	bd70      	pop	{r4, r5, r6, pc}
 8005d16:	f000 fbcb 	bl	80064b0 <__malloc_lock>
 8005d1a:	4a23      	ldr	r2, [pc, #140]	; (8005da8 <_malloc_r+0xb4>)
 8005d1c:	6814      	ldr	r4, [r2, #0]
 8005d1e:	4621      	mov	r1, r4
 8005d20:	b991      	cbnz	r1, 8005d48 <_malloc_r+0x54>
 8005d22:	4c22      	ldr	r4, [pc, #136]	; (8005dac <_malloc_r+0xb8>)
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	b91b      	cbnz	r3, 8005d30 <_malloc_r+0x3c>
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f000 fb17 	bl	800635c <_sbrk_r>
 8005d2e:	6020      	str	r0, [r4, #0]
 8005d30:	4629      	mov	r1, r5
 8005d32:	4630      	mov	r0, r6
 8005d34:	f000 fb12 	bl	800635c <_sbrk_r>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d126      	bne.n	8005d8a <_malloc_r+0x96>
 8005d3c:	230c      	movs	r3, #12
 8005d3e:	6033      	str	r3, [r6, #0]
 8005d40:	4630      	mov	r0, r6
 8005d42:	f000 fbb6 	bl	80064b2 <__malloc_unlock>
 8005d46:	e7e4      	b.n	8005d12 <_malloc_r+0x1e>
 8005d48:	680b      	ldr	r3, [r1, #0]
 8005d4a:	1b5b      	subs	r3, r3, r5
 8005d4c:	d41a      	bmi.n	8005d84 <_malloc_r+0x90>
 8005d4e:	2b0b      	cmp	r3, #11
 8005d50:	d90f      	bls.n	8005d72 <_malloc_r+0x7e>
 8005d52:	600b      	str	r3, [r1, #0]
 8005d54:	50cd      	str	r5, [r1, r3]
 8005d56:	18cc      	adds	r4, r1, r3
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f000 fbaa 	bl	80064b2 <__malloc_unlock>
 8005d5e:	f104 000b 	add.w	r0, r4, #11
 8005d62:	1d23      	adds	r3, r4, #4
 8005d64:	f020 0007 	bic.w	r0, r0, #7
 8005d68:	1ac3      	subs	r3, r0, r3
 8005d6a:	d01b      	beq.n	8005da4 <_malloc_r+0xb0>
 8005d6c:	425a      	negs	r2, r3
 8005d6e:	50e2      	str	r2, [r4, r3]
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
 8005d72:	428c      	cmp	r4, r1
 8005d74:	bf0d      	iteet	eq
 8005d76:	6863      	ldreq	r3, [r4, #4]
 8005d78:	684b      	ldrne	r3, [r1, #4]
 8005d7a:	6063      	strne	r3, [r4, #4]
 8005d7c:	6013      	streq	r3, [r2, #0]
 8005d7e:	bf18      	it	ne
 8005d80:	460c      	movne	r4, r1
 8005d82:	e7e9      	b.n	8005d58 <_malloc_r+0x64>
 8005d84:	460c      	mov	r4, r1
 8005d86:	6849      	ldr	r1, [r1, #4]
 8005d88:	e7ca      	b.n	8005d20 <_malloc_r+0x2c>
 8005d8a:	1cc4      	adds	r4, r0, #3
 8005d8c:	f024 0403 	bic.w	r4, r4, #3
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d005      	beq.n	8005da0 <_malloc_r+0xac>
 8005d94:	1a21      	subs	r1, r4, r0
 8005d96:	4630      	mov	r0, r6
 8005d98:	f000 fae0 	bl	800635c <_sbrk_r>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d0cd      	beq.n	8005d3c <_malloc_r+0x48>
 8005da0:	6025      	str	r5, [r4, #0]
 8005da2:	e7d9      	b.n	8005d58 <_malloc_r+0x64>
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
 8005da6:	bf00      	nop
 8005da8:	200001d4 	.word	0x200001d4
 8005dac:	200001d8 	.word	0x200001d8

08005db0 <__sfputc_r>:
 8005db0:	6893      	ldr	r3, [r2, #8]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	b410      	push	{r4}
 8005db8:	6093      	str	r3, [r2, #8]
 8005dba:	da09      	bge.n	8005dd0 <__sfputc_r+0x20>
 8005dbc:	6994      	ldr	r4, [r2, #24]
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	db02      	blt.n	8005dc8 <__sfputc_r+0x18>
 8005dc2:	b2cb      	uxtb	r3, r1
 8005dc4:	2b0a      	cmp	r3, #10
 8005dc6:	d103      	bne.n	8005dd0 <__sfputc_r+0x20>
 8005dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dcc:	f7ff bca4 	b.w	8005718 <__swbuf_r>
 8005dd0:	6813      	ldr	r3, [r2, #0]
 8005dd2:	1c58      	adds	r0, r3, #1
 8005dd4:	6010      	str	r0, [r2, #0]
 8005dd6:	7019      	strb	r1, [r3, #0]
 8005dd8:	b2c8      	uxtb	r0, r1
 8005dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <__sfputs_r>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	4606      	mov	r6, r0
 8005de4:	460f      	mov	r7, r1
 8005de6:	4614      	mov	r4, r2
 8005de8:	18d5      	adds	r5, r2, r3
 8005dea:	42ac      	cmp	r4, r5
 8005dec:	d101      	bne.n	8005df2 <__sfputs_r+0x12>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e007      	b.n	8005e02 <__sfputs_r+0x22>
 8005df2:	463a      	mov	r2, r7
 8005df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff ffd9 	bl	8005db0 <__sfputc_r>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d1f3      	bne.n	8005dea <__sfputs_r+0xa>
 8005e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e04 <_vfiprintf_r>:
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	b09d      	sub	sp, #116	; 0x74
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	4617      	mov	r7, r2
 8005e0e:	9303      	str	r3, [sp, #12]
 8005e10:	4606      	mov	r6, r0
 8005e12:	b118      	cbz	r0, 8005e1c <_vfiprintf_r+0x18>
 8005e14:	6983      	ldr	r3, [r0, #24]
 8005e16:	b90b      	cbnz	r3, 8005e1c <_vfiprintf_r+0x18>
 8005e18:	f7ff fe30 	bl	8005a7c <__sinit>
 8005e1c:	4b7c      	ldr	r3, [pc, #496]	; (8006010 <_vfiprintf_r+0x20c>)
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	d157      	bne.n	8005ed2 <_vfiprintf_r+0xce>
 8005e22:	6874      	ldr	r4, [r6, #4]
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	0718      	lsls	r0, r3, #28
 8005e28:	d55d      	bpl.n	8005ee6 <_vfiprintf_r+0xe2>
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d05a      	beq.n	8005ee6 <_vfiprintf_r+0xe2>
 8005e30:	2300      	movs	r3, #0
 8005e32:	9309      	str	r3, [sp, #36]	; 0x24
 8005e34:	2320      	movs	r3, #32
 8005e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e3a:	2330      	movs	r3, #48	; 0x30
 8005e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e40:	f04f 0b01 	mov.w	fp, #1
 8005e44:	46b8      	mov	r8, r7
 8005e46:	4645      	mov	r5, r8
 8005e48:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d155      	bne.n	8005efc <_vfiprintf_r+0xf8>
 8005e50:	ebb8 0a07 	subs.w	sl, r8, r7
 8005e54:	d00b      	beq.n	8005e6e <_vfiprintf_r+0x6a>
 8005e56:	4653      	mov	r3, sl
 8005e58:	463a      	mov	r2, r7
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f7ff ffbf 	bl	8005de0 <__sfputs_r>
 8005e62:	3001      	adds	r0, #1
 8005e64:	f000 80c4 	beq.w	8005ff0 <_vfiprintf_r+0x1ec>
 8005e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6a:	4453      	add	r3, sl
 8005e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6e:	f898 3000 	ldrb.w	r3, [r8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80bc 	beq.w	8005ff0 <_vfiprintf_r+0x1ec>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7e:	9304      	str	r3, [sp, #16]
 8005e80:	9307      	str	r3, [sp, #28]
 8005e82:	9205      	str	r2, [sp, #20]
 8005e84:	9306      	str	r3, [sp, #24]
 8005e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005e8c:	2205      	movs	r2, #5
 8005e8e:	7829      	ldrb	r1, [r5, #0]
 8005e90:	4860      	ldr	r0, [pc, #384]	; (8006014 <_vfiprintf_r+0x210>)
 8005e92:	f7fa f9c5 	bl	8000220 <memchr>
 8005e96:	f105 0801 	add.w	r8, r5, #1
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d131      	bne.n	8005f04 <_vfiprintf_r+0x100>
 8005ea0:	06d9      	lsls	r1, r3, #27
 8005ea2:	bf44      	itt	mi
 8005ea4:	2220      	movmi	r2, #32
 8005ea6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005eaa:	071a      	lsls	r2, r3, #28
 8005eac:	bf44      	itt	mi
 8005eae:	222b      	movmi	r2, #43	; 0x2b
 8005eb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005eb4:	782a      	ldrb	r2, [r5, #0]
 8005eb6:	2a2a      	cmp	r2, #42	; 0x2a
 8005eb8:	d02c      	beq.n	8005f14 <_vfiprintf_r+0x110>
 8005eba:	9a07      	ldr	r2, [sp, #28]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	200a      	movs	r0, #10
 8005ec0:	46a8      	mov	r8, r5
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	f898 3000 	ldrb.w	r3, [r8]
 8005ec8:	3b30      	subs	r3, #48	; 0x30
 8005eca:	2b09      	cmp	r3, #9
 8005ecc:	d96d      	bls.n	8005faa <_vfiprintf_r+0x1a6>
 8005ece:	b371      	cbz	r1, 8005f2e <_vfiprintf_r+0x12a>
 8005ed0:	e026      	b.n	8005f20 <_vfiprintf_r+0x11c>
 8005ed2:	4b51      	ldr	r3, [pc, #324]	; (8006018 <_vfiprintf_r+0x214>)
 8005ed4:	429c      	cmp	r4, r3
 8005ed6:	d101      	bne.n	8005edc <_vfiprintf_r+0xd8>
 8005ed8:	68b4      	ldr	r4, [r6, #8]
 8005eda:	e7a3      	b.n	8005e24 <_vfiprintf_r+0x20>
 8005edc:	4b4f      	ldr	r3, [pc, #316]	; (800601c <_vfiprintf_r+0x218>)
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	bf08      	it	eq
 8005ee2:	68f4      	ldreq	r4, [r6, #12]
 8005ee4:	e79e      	b.n	8005e24 <_vfiprintf_r+0x20>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f7ff fc67 	bl	80057bc <__swsetup_r>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d09e      	beq.n	8005e30 <_vfiprintf_r+0x2c>
 8005ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef6:	b01d      	add	sp, #116	; 0x74
 8005ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efc:	2b25      	cmp	r3, #37	; 0x25
 8005efe:	d0a7      	beq.n	8005e50 <_vfiprintf_r+0x4c>
 8005f00:	46a8      	mov	r8, r5
 8005f02:	e7a0      	b.n	8005e46 <_vfiprintf_r+0x42>
 8005f04:	4a43      	ldr	r2, [pc, #268]	; (8006014 <_vfiprintf_r+0x210>)
 8005f06:	1a80      	subs	r0, r0, r2
 8005f08:	fa0b f000 	lsl.w	r0, fp, r0
 8005f0c:	4318      	orrs	r0, r3
 8005f0e:	9004      	str	r0, [sp, #16]
 8005f10:	4645      	mov	r5, r8
 8005f12:	e7bb      	b.n	8005e8c <_vfiprintf_r+0x88>
 8005f14:	9a03      	ldr	r2, [sp, #12]
 8005f16:	1d11      	adds	r1, r2, #4
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	9103      	str	r1, [sp, #12]
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	db01      	blt.n	8005f24 <_vfiprintf_r+0x120>
 8005f20:	9207      	str	r2, [sp, #28]
 8005f22:	e004      	b.n	8005f2e <_vfiprintf_r+0x12a>
 8005f24:	4252      	negs	r2, r2
 8005f26:	f043 0302 	orr.w	r3, r3, #2
 8005f2a:	9207      	str	r2, [sp, #28]
 8005f2c:	9304      	str	r3, [sp, #16]
 8005f2e:	f898 3000 	ldrb.w	r3, [r8]
 8005f32:	2b2e      	cmp	r3, #46	; 0x2e
 8005f34:	d110      	bne.n	8005f58 <_vfiprintf_r+0x154>
 8005f36:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3c:	f108 0101 	add.w	r1, r8, #1
 8005f40:	d137      	bne.n	8005fb2 <_vfiprintf_r+0x1ae>
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	1d1a      	adds	r2, r3, #4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	9203      	str	r2, [sp, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bfb8      	it	lt
 8005f4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f52:	f108 0802 	add.w	r8, r8, #2
 8005f56:	9305      	str	r3, [sp, #20]
 8005f58:	4d31      	ldr	r5, [pc, #196]	; (8006020 <_vfiprintf_r+0x21c>)
 8005f5a:	f898 1000 	ldrb.w	r1, [r8]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	4628      	mov	r0, r5
 8005f62:	f7fa f95d 	bl	8000220 <memchr>
 8005f66:	b140      	cbz	r0, 8005f7a <_vfiprintf_r+0x176>
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	1b40      	subs	r0, r0, r5
 8005f6c:	fa03 f000 	lsl.w	r0, r3, r0
 8005f70:	9b04      	ldr	r3, [sp, #16]
 8005f72:	4303      	orrs	r3, r0
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	f108 0801 	add.w	r8, r8, #1
 8005f7a:	f898 1000 	ldrb.w	r1, [r8]
 8005f7e:	4829      	ldr	r0, [pc, #164]	; (8006024 <_vfiprintf_r+0x220>)
 8005f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f84:	2206      	movs	r2, #6
 8005f86:	f108 0701 	add.w	r7, r8, #1
 8005f8a:	f7fa f949 	bl	8000220 <memchr>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d034      	beq.n	8005ffc <_vfiprintf_r+0x1f8>
 8005f92:	4b25      	ldr	r3, [pc, #148]	; (8006028 <_vfiprintf_r+0x224>)
 8005f94:	bb03      	cbnz	r3, 8005fd8 <_vfiprintf_r+0x1d4>
 8005f96:	9b03      	ldr	r3, [sp, #12]
 8005f98:	3307      	adds	r3, #7
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	9303      	str	r3, [sp, #12]
 8005fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa4:	444b      	add	r3, r9
 8005fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa8:	e74c      	b.n	8005e44 <_vfiprintf_r+0x40>
 8005faa:	fb00 3202 	mla	r2, r0, r2, r3
 8005fae:	2101      	movs	r1, #1
 8005fb0:	e786      	b.n	8005ec0 <_vfiprintf_r+0xbc>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9305      	str	r3, [sp, #20]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	250a      	movs	r5, #10
 8005fba:	4688      	mov	r8, r1
 8005fbc:	3101      	adds	r1, #1
 8005fbe:	f898 2000 	ldrb.w	r2, [r8]
 8005fc2:	3a30      	subs	r2, #48	; 0x30
 8005fc4:	2a09      	cmp	r2, #9
 8005fc6:	d903      	bls.n	8005fd0 <_vfiprintf_r+0x1cc>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0c5      	beq.n	8005f58 <_vfiprintf_r+0x154>
 8005fcc:	9005      	str	r0, [sp, #20]
 8005fce:	e7c3      	b.n	8005f58 <_vfiprintf_r+0x154>
 8005fd0:	fb05 2000 	mla	r0, r5, r0, r2
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e7f0      	b.n	8005fba <_vfiprintf_r+0x1b6>
 8005fd8:	ab03      	add	r3, sp, #12
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <_vfiprintf_r+0x228>)
 8005fe0:	a904      	add	r1, sp, #16
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f3af 8000 	nop.w
 8005fe8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005fec:	4681      	mov	r9, r0
 8005fee:	d1d8      	bne.n	8005fa2 <_vfiprintf_r+0x19e>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	065b      	lsls	r3, r3, #25
 8005ff4:	f53f af7d 	bmi.w	8005ef2 <_vfiprintf_r+0xee>
 8005ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ffa:	e77c      	b.n	8005ef6 <_vfiprintf_r+0xf2>
 8005ffc:	ab03      	add	r3, sp, #12
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	4622      	mov	r2, r4
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <_vfiprintf_r+0x228>)
 8006004:	a904      	add	r1, sp, #16
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f888 	bl	800611c <_printf_i>
 800600c:	e7ec      	b.n	8005fe8 <_vfiprintf_r+0x1e4>
 800600e:	bf00      	nop
 8006010:	080067ac 	.word	0x080067ac
 8006014:	080067ec 	.word	0x080067ec
 8006018:	080067cc 	.word	0x080067cc
 800601c:	0800678c 	.word	0x0800678c
 8006020:	080067f2 	.word	0x080067f2
 8006024:	080067f6 	.word	0x080067f6
 8006028:	00000000 	.word	0x00000000
 800602c:	08005de1 	.word	0x08005de1

08006030 <_printf_common>:
 8006030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006034:	4691      	mov	r9, r2
 8006036:	461f      	mov	r7, r3
 8006038:	688a      	ldr	r2, [r1, #8]
 800603a:	690b      	ldr	r3, [r1, #16]
 800603c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006040:	4293      	cmp	r3, r2
 8006042:	bfb8      	it	lt
 8006044:	4613      	movlt	r3, r2
 8006046:	f8c9 3000 	str.w	r3, [r9]
 800604a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800604e:	4606      	mov	r6, r0
 8006050:	460c      	mov	r4, r1
 8006052:	b112      	cbz	r2, 800605a <_printf_common+0x2a>
 8006054:	3301      	adds	r3, #1
 8006056:	f8c9 3000 	str.w	r3, [r9]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	0699      	lsls	r1, r3, #26
 800605e:	bf42      	ittt	mi
 8006060:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006064:	3302      	addmi	r3, #2
 8006066:	f8c9 3000 	strmi.w	r3, [r9]
 800606a:	6825      	ldr	r5, [r4, #0]
 800606c:	f015 0506 	ands.w	r5, r5, #6
 8006070:	d107      	bne.n	8006082 <_printf_common+0x52>
 8006072:	f104 0a19 	add.w	sl, r4, #25
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	f8d9 2000 	ldr.w	r2, [r9]
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	429d      	cmp	r5, r3
 8006080:	db29      	blt.n	80060d6 <_printf_common+0xa6>
 8006082:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	3300      	adds	r3, #0
 800608a:	bf18      	it	ne
 800608c:	2301      	movne	r3, #1
 800608e:	0692      	lsls	r2, r2, #26
 8006090:	d42e      	bmi.n	80060f0 <_printf_common+0xc0>
 8006092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006096:	4639      	mov	r1, r7
 8006098:	4630      	mov	r0, r6
 800609a:	47c0      	blx	r8
 800609c:	3001      	adds	r0, #1
 800609e:	d021      	beq.n	80060e4 <_printf_common+0xb4>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	68e5      	ldr	r5, [r4, #12]
 80060a4:	f8d9 2000 	ldr.w	r2, [r9]
 80060a8:	f003 0306 	and.w	r3, r3, #6
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	bf08      	it	eq
 80060b0:	1aad      	subeq	r5, r5, r2
 80060b2:	68a3      	ldr	r3, [r4, #8]
 80060b4:	6922      	ldr	r2, [r4, #16]
 80060b6:	bf0c      	ite	eq
 80060b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060bc:	2500      	movne	r5, #0
 80060be:	4293      	cmp	r3, r2
 80060c0:	bfc4      	itt	gt
 80060c2:	1a9b      	subgt	r3, r3, r2
 80060c4:	18ed      	addgt	r5, r5, r3
 80060c6:	f04f 0900 	mov.w	r9, #0
 80060ca:	341a      	adds	r4, #26
 80060cc:	454d      	cmp	r5, r9
 80060ce:	d11b      	bne.n	8006108 <_printf_common+0xd8>
 80060d0:	2000      	movs	r0, #0
 80060d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d6:	2301      	movs	r3, #1
 80060d8:	4652      	mov	r2, sl
 80060da:	4639      	mov	r1, r7
 80060dc:	4630      	mov	r0, r6
 80060de:	47c0      	blx	r8
 80060e0:	3001      	adds	r0, #1
 80060e2:	d103      	bne.n	80060ec <_printf_common+0xbc>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ec:	3501      	adds	r5, #1
 80060ee:	e7c2      	b.n	8006076 <_printf_common+0x46>
 80060f0:	18e1      	adds	r1, r4, r3
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	2030      	movs	r0, #48	; 0x30
 80060f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060fa:	4422      	add	r2, r4
 80060fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006104:	3302      	adds	r3, #2
 8006106:	e7c4      	b.n	8006092 <_printf_common+0x62>
 8006108:	2301      	movs	r3, #1
 800610a:	4622      	mov	r2, r4
 800610c:	4639      	mov	r1, r7
 800610e:	4630      	mov	r0, r6
 8006110:	47c0      	blx	r8
 8006112:	3001      	adds	r0, #1
 8006114:	d0e6      	beq.n	80060e4 <_printf_common+0xb4>
 8006116:	f109 0901 	add.w	r9, r9, #1
 800611a:	e7d7      	b.n	80060cc <_printf_common+0x9c>

0800611c <_printf_i>:
 800611c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006120:	4617      	mov	r7, r2
 8006122:	7e0a      	ldrb	r2, [r1, #24]
 8006124:	b085      	sub	sp, #20
 8006126:	2a6e      	cmp	r2, #110	; 0x6e
 8006128:	4698      	mov	r8, r3
 800612a:	4606      	mov	r6, r0
 800612c:	460c      	mov	r4, r1
 800612e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006130:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006134:	f000 80bc 	beq.w	80062b0 <_printf_i+0x194>
 8006138:	d81a      	bhi.n	8006170 <_printf_i+0x54>
 800613a:	2a63      	cmp	r2, #99	; 0x63
 800613c:	d02e      	beq.n	800619c <_printf_i+0x80>
 800613e:	d80a      	bhi.n	8006156 <_printf_i+0x3a>
 8006140:	2a00      	cmp	r2, #0
 8006142:	f000 80c8 	beq.w	80062d6 <_printf_i+0x1ba>
 8006146:	2a58      	cmp	r2, #88	; 0x58
 8006148:	f000 808a 	beq.w	8006260 <_printf_i+0x144>
 800614c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006150:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006154:	e02a      	b.n	80061ac <_printf_i+0x90>
 8006156:	2a64      	cmp	r2, #100	; 0x64
 8006158:	d001      	beq.n	800615e <_printf_i+0x42>
 800615a:	2a69      	cmp	r2, #105	; 0x69
 800615c:	d1f6      	bne.n	800614c <_printf_i+0x30>
 800615e:	6821      	ldr	r1, [r4, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006166:	d023      	beq.n	80061b0 <_printf_i+0x94>
 8006168:	1d11      	adds	r1, r2, #4
 800616a:	6019      	str	r1, [r3, #0]
 800616c:	6813      	ldr	r3, [r2, #0]
 800616e:	e027      	b.n	80061c0 <_printf_i+0xa4>
 8006170:	2a73      	cmp	r2, #115	; 0x73
 8006172:	f000 80b4 	beq.w	80062de <_printf_i+0x1c2>
 8006176:	d808      	bhi.n	800618a <_printf_i+0x6e>
 8006178:	2a6f      	cmp	r2, #111	; 0x6f
 800617a:	d02a      	beq.n	80061d2 <_printf_i+0xb6>
 800617c:	2a70      	cmp	r2, #112	; 0x70
 800617e:	d1e5      	bne.n	800614c <_printf_i+0x30>
 8006180:	680a      	ldr	r2, [r1, #0]
 8006182:	f042 0220 	orr.w	r2, r2, #32
 8006186:	600a      	str	r2, [r1, #0]
 8006188:	e003      	b.n	8006192 <_printf_i+0x76>
 800618a:	2a75      	cmp	r2, #117	; 0x75
 800618c:	d021      	beq.n	80061d2 <_printf_i+0xb6>
 800618e:	2a78      	cmp	r2, #120	; 0x78
 8006190:	d1dc      	bne.n	800614c <_printf_i+0x30>
 8006192:	2278      	movs	r2, #120	; 0x78
 8006194:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006198:	496e      	ldr	r1, [pc, #440]	; (8006354 <_printf_i+0x238>)
 800619a:	e064      	b.n	8006266 <_printf_i+0x14a>
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80061a2:	1d11      	adds	r1, r2, #4
 80061a4:	6019      	str	r1, [r3, #0]
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0a3      	b.n	80062f8 <_printf_i+0x1dc>
 80061b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80061b4:	f102 0104 	add.w	r1, r2, #4
 80061b8:	6019      	str	r1, [r3, #0]
 80061ba:	d0d7      	beq.n	800616c <_printf_i+0x50>
 80061bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	da03      	bge.n	80061cc <_printf_i+0xb0>
 80061c4:	222d      	movs	r2, #45	; 0x2d
 80061c6:	425b      	negs	r3, r3
 80061c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061cc:	4962      	ldr	r1, [pc, #392]	; (8006358 <_printf_i+0x23c>)
 80061ce:	220a      	movs	r2, #10
 80061d0:	e017      	b.n	8006202 <_printf_i+0xe6>
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	6819      	ldr	r1, [r3, #0]
 80061d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80061da:	d003      	beq.n	80061e4 <_printf_i+0xc8>
 80061dc:	1d08      	adds	r0, r1, #4
 80061de:	6018      	str	r0, [r3, #0]
 80061e0:	680b      	ldr	r3, [r1, #0]
 80061e2:	e006      	b.n	80061f2 <_printf_i+0xd6>
 80061e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061e8:	f101 0004 	add.w	r0, r1, #4
 80061ec:	6018      	str	r0, [r3, #0]
 80061ee:	d0f7      	beq.n	80061e0 <_printf_i+0xc4>
 80061f0:	880b      	ldrh	r3, [r1, #0]
 80061f2:	4959      	ldr	r1, [pc, #356]	; (8006358 <_printf_i+0x23c>)
 80061f4:	2a6f      	cmp	r2, #111	; 0x6f
 80061f6:	bf14      	ite	ne
 80061f8:	220a      	movne	r2, #10
 80061fa:	2208      	moveq	r2, #8
 80061fc:	2000      	movs	r0, #0
 80061fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006202:	6865      	ldr	r5, [r4, #4]
 8006204:	60a5      	str	r5, [r4, #8]
 8006206:	2d00      	cmp	r5, #0
 8006208:	f2c0 809c 	blt.w	8006344 <_printf_i+0x228>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	f020 0004 	bic.w	r0, r0, #4
 8006212:	6020      	str	r0, [r4, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d13f      	bne.n	8006298 <_printf_i+0x17c>
 8006218:	2d00      	cmp	r5, #0
 800621a:	f040 8095 	bne.w	8006348 <_printf_i+0x22c>
 800621e:	4675      	mov	r5, lr
 8006220:	2a08      	cmp	r2, #8
 8006222:	d10b      	bne.n	800623c <_printf_i+0x120>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	07da      	lsls	r2, r3, #31
 8006228:	d508      	bpl.n	800623c <_printf_i+0x120>
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	6862      	ldr	r2, [r4, #4]
 800622e:	429a      	cmp	r2, r3
 8006230:	bfde      	ittt	le
 8006232:	2330      	movle	r3, #48	; 0x30
 8006234:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006238:	f105 35ff 	addle.w	r5, r5, #4294967295
 800623c:	ebae 0305 	sub.w	r3, lr, r5
 8006240:	6123      	str	r3, [r4, #16]
 8006242:	f8cd 8000 	str.w	r8, [sp]
 8006246:	463b      	mov	r3, r7
 8006248:	aa03      	add	r2, sp, #12
 800624a:	4621      	mov	r1, r4
 800624c:	4630      	mov	r0, r6
 800624e:	f7ff feef 	bl	8006030 <_printf_common>
 8006252:	3001      	adds	r0, #1
 8006254:	d155      	bne.n	8006302 <_printf_i+0x1e6>
 8006256:	f04f 30ff 	mov.w	r0, #4294967295
 800625a:	b005      	add	sp, #20
 800625c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006260:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006264:	493c      	ldr	r1, [pc, #240]	; (8006358 <_printf_i+0x23c>)
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800626e:	f100 0504 	add.w	r5, r0, #4
 8006272:	601d      	str	r5, [r3, #0]
 8006274:	d001      	beq.n	800627a <_printf_i+0x15e>
 8006276:	6803      	ldr	r3, [r0, #0]
 8006278:	e002      	b.n	8006280 <_printf_i+0x164>
 800627a:	0655      	lsls	r5, r2, #25
 800627c:	d5fb      	bpl.n	8006276 <_printf_i+0x15a>
 800627e:	8803      	ldrh	r3, [r0, #0]
 8006280:	07d0      	lsls	r0, r2, #31
 8006282:	bf44      	itt	mi
 8006284:	f042 0220 	orrmi.w	r2, r2, #32
 8006288:	6022      	strmi	r2, [r4, #0]
 800628a:	b91b      	cbnz	r3, 8006294 <_printf_i+0x178>
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	f022 0220 	bic.w	r2, r2, #32
 8006292:	6022      	str	r2, [r4, #0]
 8006294:	2210      	movs	r2, #16
 8006296:	e7b1      	b.n	80061fc <_printf_i+0xe0>
 8006298:	4675      	mov	r5, lr
 800629a:	fbb3 f0f2 	udiv	r0, r3, r2
 800629e:	fb02 3310 	mls	r3, r2, r0, r3
 80062a2:	5ccb      	ldrb	r3, [r1, r3]
 80062a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062a8:	4603      	mov	r3, r0
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d1f5      	bne.n	800629a <_printf_i+0x17e>
 80062ae:	e7b7      	b.n	8006220 <_printf_i+0x104>
 80062b0:	6808      	ldr	r0, [r1, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	6949      	ldr	r1, [r1, #20]
 80062b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80062ba:	d004      	beq.n	80062c6 <_printf_i+0x1aa>
 80062bc:	1d10      	adds	r0, r2, #4
 80062be:	6018      	str	r0, [r3, #0]
 80062c0:	6813      	ldr	r3, [r2, #0]
 80062c2:	6019      	str	r1, [r3, #0]
 80062c4:	e007      	b.n	80062d6 <_printf_i+0x1ba>
 80062c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062ca:	f102 0004 	add.w	r0, r2, #4
 80062ce:	6018      	str	r0, [r3, #0]
 80062d0:	6813      	ldr	r3, [r2, #0]
 80062d2:	d0f6      	beq.n	80062c2 <_printf_i+0x1a6>
 80062d4:	8019      	strh	r1, [r3, #0]
 80062d6:	2300      	movs	r3, #0
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	4675      	mov	r5, lr
 80062dc:	e7b1      	b.n	8006242 <_printf_i+0x126>
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	1d11      	adds	r1, r2, #4
 80062e2:	6019      	str	r1, [r3, #0]
 80062e4:	6815      	ldr	r5, [r2, #0]
 80062e6:	6862      	ldr	r2, [r4, #4]
 80062e8:	2100      	movs	r1, #0
 80062ea:	4628      	mov	r0, r5
 80062ec:	f7f9 ff98 	bl	8000220 <memchr>
 80062f0:	b108      	cbz	r0, 80062f6 <_printf_i+0x1da>
 80062f2:	1b40      	subs	r0, r0, r5
 80062f4:	6060      	str	r0, [r4, #4]
 80062f6:	6863      	ldr	r3, [r4, #4]
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	2300      	movs	r3, #0
 80062fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006300:	e79f      	b.n	8006242 <_printf_i+0x126>
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	462a      	mov	r2, r5
 8006306:	4639      	mov	r1, r7
 8006308:	4630      	mov	r0, r6
 800630a:	47c0      	blx	r8
 800630c:	3001      	adds	r0, #1
 800630e:	d0a2      	beq.n	8006256 <_printf_i+0x13a>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	079b      	lsls	r3, r3, #30
 8006314:	d507      	bpl.n	8006326 <_printf_i+0x20a>
 8006316:	2500      	movs	r5, #0
 8006318:	f104 0919 	add.w	r9, r4, #25
 800631c:	68e3      	ldr	r3, [r4, #12]
 800631e:	9a03      	ldr	r2, [sp, #12]
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	429d      	cmp	r5, r3
 8006324:	db05      	blt.n	8006332 <_printf_i+0x216>
 8006326:	68e0      	ldr	r0, [r4, #12]
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	4298      	cmp	r0, r3
 800632c:	bfb8      	it	lt
 800632e:	4618      	movlt	r0, r3
 8006330:	e793      	b.n	800625a <_printf_i+0x13e>
 8006332:	2301      	movs	r3, #1
 8006334:	464a      	mov	r2, r9
 8006336:	4639      	mov	r1, r7
 8006338:	4630      	mov	r0, r6
 800633a:	47c0      	blx	r8
 800633c:	3001      	adds	r0, #1
 800633e:	d08a      	beq.n	8006256 <_printf_i+0x13a>
 8006340:	3501      	adds	r5, #1
 8006342:	e7eb      	b.n	800631c <_printf_i+0x200>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1a7      	bne.n	8006298 <_printf_i+0x17c>
 8006348:	780b      	ldrb	r3, [r1, #0]
 800634a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800634e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006352:	e765      	b.n	8006220 <_printf_i+0x104>
 8006354:	0800680e 	.word	0x0800680e
 8006358:	080067fd 	.word	0x080067fd

0800635c <_sbrk_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4c06      	ldr	r4, [pc, #24]	; (8006378 <_sbrk_r+0x1c>)
 8006360:	2300      	movs	r3, #0
 8006362:	4605      	mov	r5, r0
 8006364:	4608      	mov	r0, r1
 8006366:	6023      	str	r3, [r4, #0]
 8006368:	f7fa fc38 	bl	8000bdc <_sbrk>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_sbrk_r+0x1a>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	b103      	cbz	r3, 8006376 <_sbrk_r+0x1a>
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	200002a0 	.word	0x200002a0

0800637c <__sread>:
 800637c:	b510      	push	{r4, lr}
 800637e:	460c      	mov	r4, r1
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	f000 f896 	bl	80064b4 <_read_r>
 8006388:	2800      	cmp	r0, #0
 800638a:	bfab      	itete	ge
 800638c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800638e:	89a3      	ldrhlt	r3, [r4, #12]
 8006390:	181b      	addge	r3, r3, r0
 8006392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006396:	bfac      	ite	ge
 8006398:	6563      	strge	r3, [r4, #84]	; 0x54
 800639a:	81a3      	strhlt	r3, [r4, #12]
 800639c:	bd10      	pop	{r4, pc}

0800639e <__swrite>:
 800639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	461f      	mov	r7, r3
 80063a4:	898b      	ldrh	r3, [r1, #12]
 80063a6:	05db      	lsls	r3, r3, #23
 80063a8:	4605      	mov	r5, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	4616      	mov	r6, r2
 80063ae:	d505      	bpl.n	80063bc <__swrite+0x1e>
 80063b0:	2302      	movs	r3, #2
 80063b2:	2200      	movs	r2, #0
 80063b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b8:	f000 f868 	bl	800648c <_lseek_r>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	4632      	mov	r2, r6
 80063ca:	463b      	mov	r3, r7
 80063cc:	4628      	mov	r0, r5
 80063ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	f000 b817 	b.w	8006404 <_write_r>

080063d6 <__sseek>:
 80063d6:	b510      	push	{r4, lr}
 80063d8:	460c      	mov	r4, r1
 80063da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063de:	f000 f855 	bl	800648c <_lseek_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	bf15      	itete	ne
 80063e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063f2:	81a3      	strheq	r3, [r4, #12]
 80063f4:	bf18      	it	ne
 80063f6:	81a3      	strhne	r3, [r4, #12]
 80063f8:	bd10      	pop	{r4, pc}

080063fa <__sclose>:
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 b813 	b.w	8006428 <_close_r>
	...

08006404 <_write_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4c07      	ldr	r4, [pc, #28]	; (8006424 <_write_r+0x20>)
 8006408:	4605      	mov	r5, r0
 800640a:	4608      	mov	r0, r1
 800640c:	4611      	mov	r1, r2
 800640e:	2200      	movs	r2, #0
 8006410:	6022      	str	r2, [r4, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	f7fa fbc5 	bl	8000ba2 <_write>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_write_r+0x1e>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	b103      	cbz	r3, 8006422 <_write_r+0x1e>
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	200002a0 	.word	0x200002a0

08006428 <_close_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4c06      	ldr	r4, [pc, #24]	; (8006444 <_close_r+0x1c>)
 800642c:	2300      	movs	r3, #0
 800642e:	4605      	mov	r5, r0
 8006430:	4608      	mov	r0, r1
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	f7fa fbfe 	bl	8000c34 <_close>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_close_r+0x1a>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	b103      	cbz	r3, 8006442 <_close_r+0x1a>
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200002a0 	.word	0x200002a0

08006448 <_fstat_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4c07      	ldr	r4, [pc, #28]	; (8006468 <_fstat_r+0x20>)
 800644c:	2300      	movs	r3, #0
 800644e:	4605      	mov	r5, r0
 8006450:	4608      	mov	r0, r1
 8006452:	4611      	mov	r1, r2
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	f7fa fbf9 	bl	8000c4c <_fstat>
 800645a:	1c43      	adds	r3, r0, #1
 800645c:	d102      	bne.n	8006464 <_fstat_r+0x1c>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	b103      	cbz	r3, 8006464 <_fstat_r+0x1c>
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	bd38      	pop	{r3, r4, r5, pc}
 8006466:	bf00      	nop
 8006468:	200002a0 	.word	0x200002a0

0800646c <_isatty_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4c06      	ldr	r4, [pc, #24]	; (8006488 <_isatty_r+0x1c>)
 8006470:	2300      	movs	r3, #0
 8006472:	4605      	mov	r5, r0
 8006474:	4608      	mov	r0, r1
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	f7fa fbf8 	bl	8000c6c <_isatty>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_isatty_r+0x1a>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	b103      	cbz	r3, 8006486 <_isatty_r+0x1a>
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	200002a0 	.word	0x200002a0

0800648c <_lseek_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4c07      	ldr	r4, [pc, #28]	; (80064ac <_lseek_r+0x20>)
 8006490:	4605      	mov	r5, r0
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	2200      	movs	r2, #0
 8006498:	6022      	str	r2, [r4, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	f7fa fbf1 	bl	8000c82 <_lseek>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_lseek_r+0x1e>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_lseek_r+0x1e>
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	200002a0 	.word	0x200002a0

080064b0 <__malloc_lock>:
 80064b0:	4770      	bx	lr

080064b2 <__malloc_unlock>:
 80064b2:	4770      	bx	lr

080064b4 <_read_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4c07      	ldr	r4, [pc, #28]	; (80064d4 <_read_r+0x20>)
 80064b8:	4605      	mov	r5, r0
 80064ba:	4608      	mov	r0, r1
 80064bc:	4611      	mov	r1, r2
 80064be:	2200      	movs	r2, #0
 80064c0:	6022      	str	r2, [r4, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	f7fa fb50 	bl	8000b68 <_read>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_read_r+0x1e>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_read_r+0x1e>
 80064d0:	602b      	str	r3, [r5, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	200002a0 	.word	0x200002a0

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
